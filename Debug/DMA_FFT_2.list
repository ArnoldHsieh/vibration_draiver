
DMA_FFT_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008d0c  0800a698  0800a698  0001a698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080133a4  080133a4  000305f0  2**0
                  CONTENTS
  4 .ARM          00000008  080133a4  080133a4  000233a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080133ac  080133ac  000305f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080133ac  080133ac  000233ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080133b0  080133b0  000233b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005f0  20000000  080133b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fec  200005f0  080139a4  000305f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015dc  080139a4  000315dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000305f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b9d  00000000  00000000  00030620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003307  00000000  00000000  000481bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  0004b4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  0004c478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248e3  00000000  00000000  0004d398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ff0  00000000  00000000  00071c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0c20  00000000  00000000  00086c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  0016788b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f4  00000000  00000000  00167950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000352f  00000000  00000000  0016d044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200005f0 	.word	0x200005f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a680 	.word	0x0800a680

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200005f4 	.word	0x200005f4
 800020c:	0800a680 	.word	0x0800a680

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800103e:	f000 fe2f 	bl	8001ca0 <HAL_Init>
	uint32_t max_Index;
	float32_t value_Buffer;
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001042:	f000 f8e9 	bl	8001218 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001046:	f000 fa61 	bl	800150c <MX_GPIO_Init>
	MX_DMA_Init();
 800104a:	f000 fa29 	bl	80014a0 <MX_DMA_Init>
	MX_USART2_UART_Init();
 800104e:	f000 f9fd 	bl	800144c <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8001052:	f000 f953 	bl	80012fc <MX_ADC1_Init>
	MX_TIM3_Init();
 8001056:	f000 f9a3 	bl	80013a0 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	printf("START\r\n");
 800105a:	4862      	ldr	r0, [pc, #392]	; (80011e4 <main+0x1ac>)
 800105c:	f005 fcf2 	bl	8006a44 <puts>
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t*) Data_adc, 256);
	//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);


	//Fdata
	DMA_states = H_IDLE;
 8001060:	4b61      	ldr	r3, [pc, #388]	; (80011e8 <main+0x1b0>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
	FFT_(Fdata, &value_Buffer, &max_Index);
 8001066:	f107 0208 	add.w	r2, r7, #8
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	4619      	mov	r1, r3
 800106e:	485f      	ldr	r0, [pc, #380]	; (80011ec <main+0x1b4>)
 8001070:	f000 faf6 	bl	8001660 <FFT_>
	printf("%f, %d\r\n", value_Buffer, (int) (max_Index));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fa86 	bl	8000588 <__aeabi_f2d>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	68b9      	ldr	r1, [r7, #8]
 8001082:	9100      	str	r1, [sp, #0]
 8001084:	485a      	ldr	r0, [pc, #360]	; (80011f0 <main+0x1b8>)
 8001086:	f005 fc57 	bl	8006938 <iprintf>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		switch (Now_states) {
 800108a:	4b5a      	ldr	r3, [pc, #360]	; (80011f4 <main+0x1bc>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d002      	beq.n	8001098 <main+0x60>
 8001092:	2b02      	cmp	r3, #2
 8001094:	d061      	beq.n	800115a <main+0x122>
				SET_EBN(now_frequency, output);		//設定震幅
			}
			break;

		default:
			break;
 8001096:	e0a3      	b.n	80011e0 <main+0x1a8>
			if (DMA_states == H_END) {
 8001098:	4b53      	ldr	r3, [pc, #332]	; (80011e8 <main+0x1b0>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b03      	cmp	r3, #3
 800109e:	f040 809c 	bne.w	80011da <main+0x1a2>
				DMA_states = H_IDLE;
 80010a2:	4b51      	ldr	r3, [pc, #324]	; (80011e8 <main+0x1b0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
				FFT_(Data_adc, &value_Buffer, &max_Index);
 80010a8:	f107 0208 	add.w	r2, r7, #8
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	4619      	mov	r1, r3
 80010b0:	4851      	ldr	r0, [pc, #324]	; (80011f8 <main+0x1c0>)
 80010b2:	f000 fad5 	bl	8001660 <FFT_>
				printf("%f, %d\r\n", value_Buffer, (int) (max_Index));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fa65 	bl	8000588 <__aeabi_f2d>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	68b9      	ldr	r1, [r7, #8]
 80010c4:	9100      	str	r1, [sp, #0]
 80010c6:	484a      	ldr	r0, [pc, #296]	; (80011f0 <main+0x1b8>)
 80010c8:	f005 fc36 	bl	8006938 <iprintf>
				if (value_Buffer > max_Value) { //比較最大的電壓值
 80010cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80010d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010dc:	d505      	bpl.n	80010ea <main+0xb2>
					max_Value = value_Buffer;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	60fb      	str	r3, [r7, #12]
					max_value_frequency = now_frequency;
 80010e2:	4b46      	ldr	r3, [pc, #280]	; (80011fc <main+0x1c4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a46      	ldr	r2, [pc, #280]	; (8001200 <main+0x1c8>)
 80010e8:	6013      	str	r3, [r2, #0]
				if (now_frequency == 400) {		//掃頻完成，匯入理想頻率
 80010ea:	4b44      	ldr	r3, [pc, #272]	; (80011fc <main+0x1c4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80010f2:	d10d      	bne.n	8001110 <main+0xd8>
					Now_states = H_P_FIXED_V;
 80010f4:	4b3f      	ldr	r3, [pc, #252]	; (80011f4 <main+0x1bc>)
 80010f6:	2202      	movs	r2, #2
 80010f8:	701a      	strb	r2, [r3, #0]
					now_frequency = max_value_frequency;
 80010fa:	4b41      	ldr	r3, [pc, #260]	; (8001200 <main+0x1c8>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a3f      	ldr	r2, [pc, #252]	; (80011fc <main+0x1c4>)
 8001100:	6013      	str	r3, [r2, #0]
					SET_EBN(now_frequency, 14);
 8001102:	4b3e      	ldr	r3, [pc, #248]	; (80011fc <main+0x1c4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	210e      	movs	r1, #14
 8001108:	4618      	mov	r0, r3
 800110a:	f000 fa6d 	bl	80015e8 <SET_EBN>
					continue;
 800110e:	e067      	b.n	80011e0 <main+0x1a8>
				now_frequency = now_frequency + 5;		//
 8001110:	4b3a      	ldr	r3, [pc, #232]	; (80011fc <main+0x1c4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3305      	adds	r3, #5
 8001116:	4a39      	ldr	r2, [pc, #228]	; (80011fc <main+0x1c4>)
 8001118:	6013      	str	r3, [r2, #0]
				SET_EBN(now_frequency, 14);
 800111a:	4b38      	ldr	r3, [pc, #224]	; (80011fc <main+0x1c4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	210e      	movs	r1, #14
 8001120:	4618      	mov	r0, r3
 8001122:	f000 fa61 	bl	80015e8 <SET_EBN>
				while (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) {
 8001126:	e005      	b.n	8001134 <main+0xfc>
					printf("START\r\n");
 8001128:	482e      	ldr	r0, [pc, #184]	; (80011e4 <main+0x1ac>)
 800112a:	f005 fc8b 	bl	8006a44 <puts>
					HAL_Delay(100);
 800112e:	2064      	movs	r0, #100	; 0x64
 8001130:	f000 fe28 	bl	8001d84 <HAL_Delay>
				while (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) {
 8001134:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001138:	4832      	ldr	r0, [pc, #200]	; (8001204 <main+0x1cc>)
 800113a:	f002 f875 	bl	8003228 <HAL_GPIO_ReadPin>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0f1      	beq.n	8001128 <main+0xf0>
				HAL_ADC_Start_DMA(&hadc1, (uint32_t*) Data_adc, 256);
 8001144:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001148:	492b      	ldr	r1, [pc, #172]	; (80011f8 <main+0x1c0>)
 800114a:	482f      	ldr	r0, [pc, #188]	; (8001208 <main+0x1d0>)
 800114c:	f000 fe82 	bl	8001e54 <HAL_ADC_Start_DMA>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001150:	2100      	movs	r1, #0
 8001152:	482e      	ldr	r0, [pc, #184]	; (800120c <main+0x1d4>)
 8001154:	f002 ff22 	bl	8003f9c <HAL_TIM_PWM_Start>
			break;
 8001158:	e03f      	b.n	80011da <main+0x1a2>
			if (DMA_states == H_END) {
 800115a:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <main+0x1b0>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b03      	cmp	r3, #3
 8001160:	d13d      	bne.n	80011de <main+0x1a6>
				FFT_(Data_adc, &value_Buffer, &max_Index);
 8001162:	f107 0208 	add.w	r2, r7, #8
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	4619      	mov	r1, r3
 800116a:	4823      	ldr	r0, [pc, #140]	; (80011f8 <main+0x1c0>)
 800116c:	f000 fa78 	bl	8001660 <FFT_>
				if (value_Buffer > amplitude)
 8001170:	ed97 7a01 	vldr	s14, [r7, #4]
 8001174:	4b26      	ldr	r3, [pc, #152]	; (8001210 <main+0x1d8>)
 8001176:	edd3 7a00 	vldr	s15, [r3]
 800117a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800117e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001182:	dd04      	ble.n	800118e <main+0x156>
					output++;
 8001184:	4b23      	ldr	r3, [pc, #140]	; (8001214 <main+0x1dc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	3301      	adds	r3, #1
 800118a:	4a22      	ldr	r2, [pc, #136]	; (8001214 <main+0x1dc>)
 800118c:	6013      	str	r3, [r2, #0]
				if (value_Buffer < amplitude)
 800118e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001192:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <main+0x1d8>)
 8001194:	edd3 7a00 	vldr	s15, [r3]
 8001198:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800119c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a0:	d504      	bpl.n	80011ac <main+0x174>
					output--;
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <main+0x1dc>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	4a1a      	ldr	r2, [pc, #104]	; (8001214 <main+0x1dc>)
 80011aa:	6013      	str	r3, [r2, #0]
				if (output < 20)
 80011ac:	4b19      	ldr	r3, [pc, #100]	; (8001214 <main+0x1dc>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b13      	cmp	r3, #19
 80011b2:	d802      	bhi.n	80011ba <main+0x182>
					output = 20;
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <main+0x1dc>)
 80011b6:	2214      	movs	r2, #20
 80011b8:	601a      	str	r2, [r3, #0]
				if (output > 80)
 80011ba:	4b16      	ldr	r3, [pc, #88]	; (8001214 <main+0x1dc>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b50      	cmp	r3, #80	; 0x50
 80011c0:	d902      	bls.n	80011c8 <main+0x190>
					output = 80;
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <main+0x1dc>)
 80011c4:	2250      	movs	r2, #80	; 0x50
 80011c6:	601a      	str	r2, [r3, #0]
				SET_EBN(now_frequency, output);		//設定震幅
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <main+0x1c4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a11      	ldr	r2, [pc, #68]	; (8001214 <main+0x1dc>)
 80011ce:	6812      	ldr	r2, [r2, #0]
 80011d0:	4611      	mov	r1, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 fa08 	bl	80015e8 <SET_EBN>
			break;
 80011d8:	e001      	b.n	80011de <main+0x1a6>
			break;
 80011da:	bf00      	nop
 80011dc:	e755      	b.n	800108a <main+0x52>
			break;
 80011de:	bf00      	nop
		switch (Now_states) {
 80011e0:	e753      	b.n	800108a <main+0x52>
 80011e2:	bf00      	nop
 80011e4:	0800a698 	.word	0x0800a698
 80011e8:	200009a0 	.word	0x200009a0
 80011ec:	20000010 	.word	0x20000010
 80011f0:	0800a6a0 	.word	0x0800a6a0
 80011f4:	20000008 	.word	0x20000008
 80011f8:	200007a0 	.word	0x200007a0
 80011fc:	2000000c 	.word	0x2000000c
 8001200:	200009a4 	.word	0x200009a4
 8001204:	40020800 	.word	0x40020800
 8001208:	2000060c 	.word	0x2000060c
 800120c:	200006b4 	.word	0x200006b4
 8001210:	20000000 	.word	0x20000000
 8001214:	20000004 	.word	0x20000004

08001218 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b094      	sub	sp, #80	; 0x50
 800121c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	2234      	movs	r2, #52	; 0x34
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f004 fd04 	bl	8005c34 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800122c:	f107 0308 	add.w	r3, r7, #8
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <SystemClock_Config+0xdc>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	4a2b      	ldr	r2, [pc, #172]	; (80012f4 <SystemClock_Config+0xdc>)
 8001246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124a:	6413      	str	r3, [r2, #64]	; 0x40
 800124c:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <SystemClock_Config+0xdc>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001258:	2300      	movs	r3, #0
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <SystemClock_Config+0xe0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a25      	ldr	r2, [pc, #148]	; (80012f8 <SystemClock_Config+0xe0>)
 8001262:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <SystemClock_Config+0xe0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001274:	2302      	movs	r3, #2
 8001276:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001278:	2301      	movs	r3, #1
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800127c:	2310      	movs	r3, #16
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001280:	2302      	movs	r3, #2
 8001282:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001284:	2300      	movs	r3, #0
 8001286:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001288:	2308      	movs	r3, #8
 800128a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 800128c:	23b4      	movs	r3, #180	; 0xb4
 800128e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001290:	2302      	movs	r3, #2
 8001292:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001294:	2302      	movs	r3, #2
 8001296:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001298:	2302      	movs	r3, #2
 800129a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800129c:	f107 031c 	add.w	r3, r7, #28
 80012a0:	4618      	mov	r0, r3
 80012a2:	f002 fb8d 	bl	80039c0 <HAL_RCC_OscConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0x98>
		Error_Handler();
 80012ac:	f000 f9d2 	bl	8001654 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80012b0:	f001 ffec 	bl	800328c <HAL_PWREx_EnableOverDrive>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <SystemClock_Config+0xa6>
		Error_Handler();
 80012ba:	f000 f9cb 	bl	8001654 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012be:	230f      	movs	r3, #15
 80012c0:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c2:	2302      	movs	r3, #2
 80012c4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012ce:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d4:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	2105      	movs	r1, #5
 80012dc:	4618      	mov	r0, r3
 80012de:	f002 f825 	bl	800332c <HAL_RCC_ClockConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0xd4>
		Error_Handler();
 80012e8:	f000 f9b4 	bl	8001654 <Error_Handler>
	}
}
 80012ec:	bf00      	nop
 80012ee:	3750      	adds	r7, #80	; 0x50
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40007000 	.word	0x40007000

080012fc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001302:	463b      	mov	r3, r7
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800130e:	4b22      	ldr	r3, [pc, #136]	; (8001398 <MX_ADC1_Init+0x9c>)
 8001310:	4a22      	ldr	r2, [pc, #136]	; (800139c <MX_ADC1_Init+0xa0>)
 8001312:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001314:	4b20      	ldr	r3, [pc, #128]	; (8001398 <MX_ADC1_Init+0x9c>)
 8001316:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800131a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800131c:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <MX_ADC1_Init+0x9c>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001322:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <MX_ADC1_Init+0x9c>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <MX_ADC1_Init+0x9c>)
 800132a:	2200      	movs	r2, #0
 800132c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800132e:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <MX_ADC1_Init+0x9c>)
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <MX_ADC1_Init+0x9c>)
 8001338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800133c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_CC1;
 800133e:	4b16      	ldr	r3, [pc, #88]	; (8001398 <MX_ADC1_Init+0x9c>)
 8001340:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001344:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <MX_ADC1_Init+0x9c>)
 8001348:	2200      	movs	r2, #0
 800134a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <MX_ADC1_Init+0x9c>)
 800134e:	2201      	movs	r2, #1
 8001350:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_ADC1_Init+0x9c>)
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_ADC1_Init+0x9c>)
 800135c:	2201      	movs	r2, #1
 800135e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001360:	480d      	ldr	r0, [pc, #52]	; (8001398 <MX_ADC1_Init+0x9c>)
 8001362:	f000 fd33 	bl	8001dcc <HAL_ADC_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_ADC1_Init+0x74>
		Error_Handler();
 800136c:	f000 f972 	bl	8001654 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001370:	2300      	movs	r3, #0
 8001372:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001374:	2301      	movs	r3, #1
 8001376:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800137c:	463b      	mov	r3, r7
 800137e:	4619      	mov	r1, r3
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_ADC1_Init+0x9c>)
 8001382:	f000 fe8b 	bl	800209c <HAL_ADC_ConfigChannel>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_ADC1_Init+0x94>
		Error_Handler();
 800138c:	f000 f962 	bl	8001654 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	2000060c 	.word	0x2000060c
 800139c:	40012000 	.word	0x40012000

080013a0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013a6:	f107 0320 	add.w	r3, r7, #32
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]
 80013be:	615a      	str	r2, [r3, #20]
 80013c0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <MX_TIM3_Init+0xa4>)
 80013c4:	4a20      	ldr	r2, [pc, #128]	; (8001448 <MX_TIM3_Init+0xa8>)
 80013c6:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 90;
 80013c8:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <MX_TIM3_Init+0xa4>)
 80013ca:	225a      	movs	r2, #90	; 0x5a
 80013cc:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ce:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <MX_TIM3_Init+0xa4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <MX_TIM3_Init+0xa4>)
 80013d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013da:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_TIM3_Init+0xa4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_TIM3_Init+0xa4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80013e8:	4816      	ldr	r0, [pc, #88]	; (8001444 <MX_TIM3_Init+0xa4>)
 80013ea:	f002 fd87 	bl	8003efc <HAL_TIM_PWM_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM3_Init+0x58>
		Error_Handler();
 80013f4:	f000 f92e 	bl	8001654 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001400:	f107 0320 	add.w	r3, r7, #32
 8001404:	4619      	mov	r1, r3
 8001406:	480f      	ldr	r0, [pc, #60]	; (8001444 <MX_TIM3_Init+0xa4>)
 8001408:	f003 f9c8 	bl	800479c <HAL_TIMEx_MasterConfigSynchronization>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM3_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8001412:	f000 f91f 	bl	8001654 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001416:	2360      	movs	r3, #96	; 0x60
 8001418:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 1;
 800141a:	2301      	movs	r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001422:	2304      	movs	r3, #4
 8001424:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2200      	movs	r2, #0
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_TIM3_Init+0xa4>)
 800142e:	f002 fe7d 	bl	800412c <HAL_TIM_PWM_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM3_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8001438:	f000 f90c 	bl	8001654 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	3728      	adds	r7, #40	; 0x28
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200006b4 	.word	0x200006b4
 8001448:	40000400 	.word	0x40000400

0800144c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <MX_USART2_UART_Init+0x50>)
 8001454:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800145c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001472:	220c      	movs	r2, #12
 8001474:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001484:	f003 fa06 	bl	8004894 <HAL_UART_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800148e:	f000 f8e1 	bl	8001654 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200006fc 	.word	0x200006fc
 800149c:	40004400 	.word	0x40004400

080014a0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <MX_DMA_Init+0x68>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a16      	ldr	r2, [pc, #88]	; (8001508 <MX_DMA_Init+0x68>)
 80014b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <MX_DMA_Init+0x68>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <MX_DMA_Init+0x68>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <MX_DMA_Init+0x68>)
 80014cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <MX_DMA_Init+0x68>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	2010      	movs	r0, #16
 80014e4:	f001 f965 	bl	80027b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80014e8:	2010      	movs	r0, #16
 80014ea:	f001 f97e 	bl	80027ea <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2100      	movs	r1, #0
 80014f2:	2038      	movs	r0, #56	; 0x38
 80014f4:	f001 f95d 	bl	80027b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014f8:	2038      	movs	r0, #56	; 0x38
 80014fa:	f001 f976 	bl	80027ea <HAL_NVIC_EnableIRQ>

}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800

0800150c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <MX_GPIO_Init+0xd0>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a2c      	ldr	r2, [pc, #176]	; (80015dc <MX_GPIO_Init+0xd0>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <MX_GPIO_Init+0xd0>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b26      	ldr	r3, [pc, #152]	; (80015dc <MX_GPIO_Init+0xd0>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a25      	ldr	r2, [pc, #148]	; (80015dc <MX_GPIO_Init+0xd0>)
 8001548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b23      	ldr	r3, [pc, #140]	; (80015dc <MX_GPIO_Init+0xd0>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <MX_GPIO_Init+0xd0>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a1e      	ldr	r2, [pc, #120]	; (80015dc <MX_GPIO_Init+0xd0>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <MX_GPIO_Init+0xd0>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <MX_GPIO_Init+0xd0>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a17      	ldr	r2, [pc, #92]	; (80015dc <MX_GPIO_Init+0xd0>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <MX_GPIO_Init+0xd0>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	2120      	movs	r1, #32
 8001596:	4812      	ldr	r0, [pc, #72]	; (80015e0 <MX_GPIO_Init+0xd4>)
 8001598:	f001 fe5e 	bl	8003258 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800159c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015a2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015a6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	480c      	ldr	r0, [pc, #48]	; (80015e4 <MX_GPIO_Init+0xd8>)
 80015b4:	f001 fca4 	bl	8002f00 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80015b8:	2320      	movs	r3, #32
 80015ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015bc:	2301      	movs	r3, #1
 80015be:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	4804      	ldr	r0, [pc, #16]	; (80015e0 <MX_GPIO_Init+0xd4>)
 80015d0:	f001 fc96 	bl	8002f00 <HAL_GPIO_Init>

}
 80015d4:	bf00      	nop
 80015d6:	3728      	adds	r7, #40	; 0x28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020000 	.word	0x40020000
 80015e4:	40020800 	.word	0x40020800

080015e8 <SET_EBN>:

/* USER CODE BEGIN 4 */
void SET_EBN(uint32_t F, uint32_t V) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
	printf("set V: %d F: %d\r\n", (int) F, (int) V);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	4619      	mov	r1, r3
 80015f8:	4803      	ldr	r0, [pc, #12]	; (8001608 <SET_EBN+0x20>)
 80015fa:	f005 f99d 	bl	8006938 <iprintf>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	0800a6ac 	.word	0x0800a6ac

0800160c <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	printf("DMA END\r\n");
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001616:	f005 fa15 	bl	8006a44 <puts>
	DMA_states = H_END;
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <HAL_ADC_ConvCpltCallback+0x20>)
 800161c:	2203      	movs	r2, #3
 800161e:	701a      	strb	r2, [r3, #0]
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	0800a6c0 	.word	0x0800a6c0
 800162c:	200009a0 	.word	0x200009a0

08001630 <__io_putchar>:
PUTCHAR_PROTOTYPE //for printf used
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8001638:	1d39      	adds	r1, r7, #4
 800163a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800163e:	2201      	movs	r2, #1
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <__io_putchar+0x20>)
 8001642:	f003 f974 	bl	800492e <HAL_UART_Transmit>
	return ch;
 8001646:	687b      	ldr	r3, [r7, #4]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200006fc 	.word	0x200006fc

08001654 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
}
 800165a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800165c:	e7fe      	b.n	800165c <Error_Handler+0x8>
	...

08001660 <FFT_>:
float32_t maxValue; /* Max FFT value is stored here */
uint32_t maxIndex; /* Index in Output array where max value is */
float32_t Input[SAMPLES];
float32_t Output[FFT_SIZE];

void FFT_(uint16_t *low_data, float32_t *max_value, uint32_t *max_index) {
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
	//uint8_t X;
	printf("FFT_start\r\n");
 800166c:	4846      	ldr	r0, [pc, #280]	; (8001788 <FFT_+0x128>)
 800166e:	f005 f9e9 	bl	8006a44 <puts>
	//char buffer[32];
	for (int i = 0; i < FFT_SIZE; i++) {
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	e03a      	b.n	80016ee <FFT_+0x8e>
		Input[i * 2] = (float32_t) ((float32_t) low_data[i] - 2048.0) * 1.65
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	4413      	add	r3, r2
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	ee07 3a90 	vmov	s15, r3
 8001686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800168a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800178c <FFT_+0x12c>
 800168e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001692:	ee17 0a90 	vmov	r0, s15
 8001696:	f7fe ff77 	bl	8000588 <__aeabi_f2d>
 800169a:	a339      	add	r3, pc, #228	; (adr r3, 8001780 <FFT_+0x120>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	f7fe ffca 	bl	8000638 <__aeabi_dmul>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
				/ 2048.0; //
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	4b37      	ldr	r3, [pc, #220]	; (8001790 <FFT_+0x130>)
 80016b2:	f7ff f8eb 	bl	800088c <__aeabi_ddiv>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
		Input[i * 2] = (float32_t) ((float32_t) low_data[i] - 2048.0) * 1.65
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	005c      	lsls	r4, r3, #1
				/ 2048.0; //
 80016c2:	f7ff fab1 	bl	8000c28 <__aeabi_d2f>
 80016c6:	4602      	mov	r2, r0
		Input[i * 2] = (float32_t) ((float32_t) low_data[i] - 2048.0) * 1.65
 80016c8:	4932      	ldr	r1, [pc, #200]	; (8001794 <FFT_+0x134>)
 80016ca:	00a3      	lsls	r3, r4, #2
 80016cc:	440b      	add	r3, r1
 80016ce:	601a      	str	r2, [r3, #0]
		Input[(uint16_t) (i * 2 + 1)] = 0;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	3301      	adds	r3, #1
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4a2d      	ldr	r2, [pc, #180]	; (8001794 <FFT_+0x134>)
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < FFT_SIZE; i++) {
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	3301      	adds	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	2bff      	cmp	r3, #255	; 0xff
 80016f2:	ddc1      	ble.n	8001678 <FFT_+0x18>
	}

// Use CFFT module to process the data.

	/* Initialize the CFFT/CIFFT module, intFlag = 0, doBitReverse = 1 */
	arm_cfft_radix4_init_f32(&S, FFT_SIZE, 0, 1);
 80016f4:	2301      	movs	r3, #1
 80016f6:	2200      	movs	r2, #0
 80016f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016fc:	4826      	ldr	r0, [pc, #152]	; (8001798 <FFT_+0x138>)
 80016fe:	f003 fcf7 	bl	80050f0 <arm_cfft_radix4_init_f32>
	/* Process the data through the CFFT/CIFFT module */
	arm_cfft_radix4_f32(&S, Input);
 8001702:	4924      	ldr	r1, [pc, #144]	; (8001794 <FFT_+0x134>)
 8001704:	4824      	ldr	r0, [pc, #144]	; (8001798 <FFT_+0x138>)
 8001706:	f004 f8b7 	bl	8005878 <arm_cfft_radix4_f32>
	/* Process the data through the Complex Magniture Module for calculating the magnitude at each bin */
	arm_cmplx_mag_f32(Input, Output, FFT_SIZE);
 800170a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800170e:	4923      	ldr	r1, [pc, #140]	; (800179c <FFT_+0x13c>)
 8001710:	4820      	ldr	r0, [pc, #128]	; (8001794 <FFT_+0x134>)
 8001712:	f004 f941 	bl	8005998 <arm_cmplx_mag_f32>
	/* Calculates maxValue and returns corresponding value */
	arm_max_f32(Output, FFT_SIZE, &maxValue, &maxIndex);
 8001716:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <FFT_+0x140>)
 8001718:	4a22      	ldr	r2, [pc, #136]	; (80017a4 <FFT_+0x144>)
 800171a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800171e:	481f      	ldr	r0, [pc, #124]	; (800179c <FFT_+0x13c>)
 8001720:	f003 fc7a 	bl	8005018 <arm_max_f32>

	*max_value = maxValue/ 128;
 8001724:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <FFT_+0x144>)
 8001726:	ed93 7a00 	vldr	s14, [r3]
 800172a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80017a8 <FFT_+0x148>
 800172e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	edc3 7a00 	vstr	s15, [r3]
	*max_index = maxIndex* 4;
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <FFT_+0x140>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	009a      	lsls	r2, r3, #2
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	601a      	str	r2, [r3, #0]
	//printf("%f, %d\r\n", maxValue / 128, (int) (maxIndex) * 4);
	for (int i = 0; i < FFT_SIZE / 2; i++) {
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	e012      	b.n	800176e <FFT_+0x10e>
		Output[i] = Output[i] / 128;	//i=0 /256 is batter
 8001748:	4a14      	ldr	r2, [pc, #80]	; (800179c <FFT_+0x13c>)
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	ed93 7a00 	vldr	s14, [r3]
 8001754:	eddf 6a14 	vldr	s13, [pc, #80]	; 80017a8 <FFT_+0x148>
 8001758:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800175c:	4a0f      	ldr	r2, [pc, #60]	; (800179c <FFT_+0x13c>)
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < FFT_SIZE / 2; i++) {
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	3301      	adds	r3, #1
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	2b7f      	cmp	r3, #127	; 0x7f
 8001772:	dde9      	ble.n	8001748 <FFT_+0xe8>
		//	printf("%f\r\n", Output[i]);
//		HAL_Delay(10);
	}
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	371c      	adds	r7, #28
 800177a:	46bd      	mov	sp, r7
 800177c:	bd90      	pop	{r4, r7, pc}
 800177e:	bf00      	nop
 8001780:	66666666 	.word	0x66666666
 8001784:	3ffa6666 	.word	0x3ffa6666
 8001788:	0800a6cc 	.word	0x0800a6cc
 800178c:	45000000 	.word	0x45000000
 8001790:	40a00000 	.word	0x40a00000
 8001794:	200009c4 	.word	0x200009c4
 8001798:	200009a8 	.word	0x200009a8
 800179c:	200011c4 	.word	0x200011c4
 80017a0:	200009c0 	.word	0x200009c0
 80017a4:	200009bc 	.word	0x200009bc
 80017a8:	43000000 	.word	0x43000000

080017ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <HAL_MspInit+0x4c>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	4a0f      	ldr	r2, [pc, #60]	; (80017f8 <HAL_MspInit+0x4c>)
 80017bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c0:	6453      	str	r3, [r2, #68]	; 0x44
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <HAL_MspInit+0x4c>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_MspInit+0x4c>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a08      	ldr	r2, [pc, #32]	; (80017f8 <HAL_MspInit+0x4c>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_MspInit+0x4c>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017ea:	2007      	movs	r0, #7
 80017ec:	f000 ffd6 	bl	800279c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40023800 	.word	0x40023800

080017fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a2e      	ldr	r2, [pc, #184]	; (80018d4 <HAL_ADC_MspInit+0xd8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d156      	bne.n	80018cc <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <HAL_ADC_MspInit+0xdc>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	4a2c      	ldr	r2, [pc, #176]	; (80018d8 <HAL_ADC_MspInit+0xdc>)
 8001828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182c:	6453      	str	r3, [r2, #68]	; 0x44
 800182e:	4b2a      	ldr	r3, [pc, #168]	; (80018d8 <HAL_ADC_MspInit+0xdc>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b26      	ldr	r3, [pc, #152]	; (80018d8 <HAL_ADC_MspInit+0xdc>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a25      	ldr	r2, [pc, #148]	; (80018d8 <HAL_ADC_MspInit+0xdc>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <HAL_ADC_MspInit+0xdc>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001856:	2301      	movs	r3, #1
 8001858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800185a:	2303      	movs	r3, #3
 800185c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	481c      	ldr	r0, [pc, #112]	; (80018dc <HAL_ADC_MspInit+0xe0>)
 800186a:	f001 fb49 	bl	8002f00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <HAL_ADC_MspInit+0xe4>)
 8001870:	4a1c      	ldr	r2, [pc, #112]	; (80018e4 <HAL_ADC_MspInit+0xe8>)
 8001872:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001874:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <HAL_ADC_MspInit+0xe4>)
 8001876:	2200      	movs	r2, #0
 8001878:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_ADC_MspInit+0xe4>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001880:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <HAL_ADC_MspInit+0xe4>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001886:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <HAL_ADC_MspInit+0xe4>)
 8001888:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800188c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <HAL_ADC_MspInit+0xe4>)
 8001890:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001894:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_ADC_MspInit+0xe4>)
 8001898:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800189c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <HAL_ADC_MspInit+0xe4>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018a4:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <HAL_ADC_MspInit+0xe4>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <HAL_ADC_MspInit+0xe4>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018b0:	480b      	ldr	r0, [pc, #44]	; (80018e0 <HAL_ADC_MspInit+0xe4>)
 80018b2:	f000 ffb5 	bl	8002820 <HAL_DMA_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80018bc:	f7ff feca 	bl	8001654 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a07      	ldr	r2, [pc, #28]	; (80018e0 <HAL_ADC_MspInit+0xe4>)
 80018c4:	639a      	str	r2, [r3, #56]	; 0x38
 80018c6:	4a06      	ldr	r2, [pc, #24]	; (80018e0 <HAL_ADC_MspInit+0xe4>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018cc:	bf00      	nop
 80018ce:	3728      	adds	r7, #40	; 0x28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40012000 	.word	0x40012000
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020000 	.word	0x40020000
 80018e0:	20000654 	.word	0x20000654
 80018e4:	40026410 	.word	0x40026410

080018e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <HAL_TIM_PWM_MspInit+0x3c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d10d      	bne.n	8001916 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <HAL_TIM_PWM_MspInit+0x40>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	4a09      	ldr	r2, [pc, #36]	; (8001928 <HAL_TIM_PWM_MspInit+0x40>)
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	6413      	str	r3, [r2, #64]	; 0x40
 800190a:	4b07      	ldr	r3, [pc, #28]	; (8001928 <HAL_TIM_PWM_MspInit+0x40>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001916:	bf00      	nop
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40000400 	.word	0x40000400
 8001928:	40023800 	.word	0x40023800

0800192c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a30      	ldr	r2, [pc, #192]	; (8001a0c <HAL_UART_MspInit+0xe0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d159      	bne.n	8001a02 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	4b2f      	ldr	r3, [pc, #188]	; (8001a10 <HAL_UART_MspInit+0xe4>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	4a2e      	ldr	r2, [pc, #184]	; (8001a10 <HAL_UART_MspInit+0xe4>)
 8001958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800195c:	6413      	str	r3, [r2, #64]	; 0x40
 800195e:	4b2c      	ldr	r3, [pc, #176]	; (8001a10 <HAL_UART_MspInit+0xe4>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4b28      	ldr	r3, [pc, #160]	; (8001a10 <HAL_UART_MspInit+0xe4>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a27      	ldr	r2, [pc, #156]	; (8001a10 <HAL_UART_MspInit+0xe4>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <HAL_UART_MspInit+0xe4>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001986:	230c      	movs	r3, #12
 8001988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001992:	2303      	movs	r3, #3
 8001994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001996:	2307      	movs	r3, #7
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	481c      	ldr	r0, [pc, #112]	; (8001a14 <HAL_UART_MspInit+0xe8>)
 80019a2:	f001 faad 	bl	8002f00 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80019a6:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <HAL_UART_MspInit+0xec>)
 80019a8:	4a1c      	ldr	r2, [pc, #112]	; (8001a1c <HAL_UART_MspInit+0xf0>)
 80019aa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80019ac:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <HAL_UART_MspInit+0xec>)
 80019ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019b2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019b4:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <HAL_UART_MspInit+0xec>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ba:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <HAL_UART_MspInit+0xec>)
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019c0:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_UART_MspInit+0xec>)
 80019c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019c6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019c8:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <HAL_UART_MspInit+0xec>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_UART_MspInit+0xec>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80019d4:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <HAL_UART_MspInit+0xec>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019da:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <HAL_UART_MspInit+0xec>)
 80019dc:	2200      	movs	r2, #0
 80019de:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019e0:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <HAL_UART_MspInit+0xec>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80019e6:	480c      	ldr	r0, [pc, #48]	; (8001a18 <HAL_UART_MspInit+0xec>)
 80019e8:	f000 ff1a 	bl	8002820 <HAL_DMA_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80019f2:	f7ff fe2f 	bl	8001654 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a07      	ldr	r2, [pc, #28]	; (8001a18 <HAL_UART_MspInit+0xec>)
 80019fa:	639a      	str	r2, [r3, #56]	; 0x38
 80019fc:	4a06      	ldr	r2, [pc, #24]	; (8001a18 <HAL_UART_MspInit+0xec>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a02:	bf00      	nop
 8001a04:	3728      	adds	r7, #40	; 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40004400 	.word	0x40004400
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020000 	.word	0x40020000
 8001a18:	20000740 	.word	0x20000740
 8001a1c:	40026088 	.word	0x40026088

08001a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <NMI_Handler+0x4>

08001a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <HardFault_Handler+0x4>

08001a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <MemManage_Handler+0x4>

08001a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <BusFault_Handler+0x4>

08001a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <UsageFault_Handler+0x4>

08001a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a6c:	f000 f96a 	bl	8001d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <DMA1_Stream5_IRQHandler+0x10>)
 8001a7a:	f000 ffd7 	bl	8002a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000740 	.word	0x20000740

08001a88 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a8c:	4802      	ldr	r0, [pc, #8]	; (8001a98 <DMA2_Stream0_IRQHandler+0x10>)
 8001a8e:	f000 ffcd 	bl	8002a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000654 	.word	0x20000654

08001a9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return 1;
 8001aa0:	2301      	movs	r3, #1
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <_kill>:

int _kill(int pid, int sig)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ab6:	f004 f893 	bl	8005be0 <__errno>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2216      	movs	r2, #22
 8001abe:	601a      	str	r2, [r3, #0]
  return -1;
 8001ac0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <_exit>:

void _exit (int status)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff ffe7 	bl	8001aac <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ade:	e7fe      	b.n	8001ade <_exit+0x12>

08001ae0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	e00a      	b.n	8001b08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001af2:	f3af 8000 	nop.w
 8001af6:	4601      	mov	r1, r0
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	60ba      	str	r2, [r7, #8]
 8001afe:	b2ca      	uxtb	r2, r1
 8001b00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3301      	adds	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	dbf0      	blt.n	8001af2 <_read+0x12>
  }

  return len;
 8001b10:	687b      	ldr	r3, [r7, #4]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	e009      	b.n	8001b40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	60ba      	str	r2, [r7, #8]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fd7b 	bl	8001630 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	dbf1      	blt.n	8001b2c <_write+0x12>
  }
  return len;
 8001b48:	687b      	ldr	r3, [r7, #4]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <_close>:

int _close(int file)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b7a:	605a      	str	r2, [r3, #4]
  return 0;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <_isatty>:

int _isatty(int file)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b92:	2301      	movs	r3, #1
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc4:	4a14      	ldr	r2, [pc, #80]	; (8001c18 <_sbrk+0x5c>)
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <_sbrk+0x60>)
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <_sbrk+0x64>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d102      	bne.n	8001bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <_sbrk+0x64>)
 8001bda:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <_sbrk+0x68>)
 8001bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <_sbrk+0x64>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d207      	bcs.n	8001bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bec:	f003 fff8 	bl	8005be0 <__errno>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfa:	e009      	b.n	8001c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <_sbrk+0x64>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <_sbrk+0x64>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <_sbrk+0x64>)
 8001c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20020000 	.word	0x20020000
 8001c1c:	00000400 	.word	0x00000400
 8001c20:	200015c4 	.word	0x200015c4
 8001c24:	200015e0 	.word	0x200015e0

08001c28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <SystemInit+0x20>)
 8001c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c32:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <SystemInit+0x20>)
 8001c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c50:	480d      	ldr	r0, [pc, #52]	; (8001c88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c52:	490e      	ldr	r1, [pc, #56]	; (8001c8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c54:	4a0e      	ldr	r2, [pc, #56]	; (8001c90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c58:	e002      	b.n	8001c60 <LoopCopyDataInit>

08001c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c5e:	3304      	adds	r3, #4

08001c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c64:	d3f9      	bcc.n	8001c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c66:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c68:	4c0b      	ldr	r4, [pc, #44]	; (8001c98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c6c:	e001      	b.n	8001c72 <LoopFillZerobss>

08001c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c70:	3204      	adds	r2, #4

08001c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c74:	d3fb      	bcc.n	8001c6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c76:	f7ff ffd7 	bl	8001c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c7a:	f003 ffb7 	bl	8005bec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c7e:	f7ff f9db 	bl	8001038 <main>
  bx  lr    
 8001c82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c8c:	200005f0 	.word	0x200005f0
  ldr r2, =_sidata
 8001c90:	080133b4 	.word	0x080133b4
  ldr r2, =_sbss
 8001c94:	200005f0 	.word	0x200005f0
  ldr r4, =_ebss
 8001c98:	200015dc 	.word	0x200015dc

08001c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c9c:	e7fe      	b.n	8001c9c <ADC_IRQHandler>
	...

08001ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ca4:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <HAL_Init+0x40>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0d      	ldr	r2, [pc, #52]	; (8001ce0 <HAL_Init+0x40>)
 8001caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_Init+0x40>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <HAL_Init+0x40>)
 8001cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <HAL_Init+0x40>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a07      	ldr	r2, [pc, #28]	; (8001ce0 <HAL_Init+0x40>)
 8001cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc8:	2003      	movs	r0, #3
 8001cca:	f000 fd67 	bl	800279c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f000 f808 	bl	8001ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd4:	f7ff fd6a 	bl	80017ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40023c00 	.word	0x40023c00

08001ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_InitTick+0x54>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_InitTick+0x58>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 fd7f 	bl	8002806 <HAL_SYSTICK_Config>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e00e      	b.n	8001d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b0f      	cmp	r3, #15
 8001d16:	d80a      	bhi.n	8001d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d20:	f000 fd47 	bl	80027b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d24:	4a06      	ldr	r2, [pc, #24]	; (8001d40 <HAL_InitTick+0x5c>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e000      	b.n	8001d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000410 	.word	0x20000410
 8001d3c:	20000418 	.word	0x20000418
 8001d40:	20000414 	.word	0x20000414

08001d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_IncTick+0x20>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_IncTick+0x24>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4413      	add	r3, r2
 8001d54:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <HAL_IncTick+0x24>)
 8001d56:	6013      	str	r3, [r2, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20000418 	.word	0x20000418
 8001d68:	200015c8 	.word	0x200015c8

08001d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <HAL_GetTick+0x14>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	200015c8 	.word	0x200015c8

08001d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d8c:	f7ff ffee 	bl	8001d6c <HAL_GetTick>
 8001d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9c:	d005      	beq.n	8001daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_Delay+0x44>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4413      	add	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001daa:	bf00      	nop
 8001dac:	f7ff ffde 	bl	8001d6c <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d8f7      	bhi.n	8001dac <HAL_Delay+0x28>
  {
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000418 	.word	0x20000418

08001dcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e033      	b.n	8001e4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d109      	bne.n	8001dfe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff fd06 	bl	80017fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d118      	bne.n	8001e3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e12:	f023 0302 	bic.w	r3, r3, #2
 8001e16:	f043 0202 	orr.w	r2, r3, #2
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 fa6e 	bl	8002300 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f023 0303 	bic.w	r3, r3, #3
 8001e32:	f043 0201 	orr.w	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	641a      	str	r2, [r3, #64]	; 0x40
 8001e3a:	e001      	b.n	8001e40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_Start_DMA+0x1e>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e0e9      	b.n	8002046 <HAL_ADC_Start_DMA+0x1f2>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d018      	beq.n	8001eba <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e98:	4b6d      	ldr	r3, [pc, #436]	; (8002050 <HAL_ADC_Start_DMA+0x1fc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a6d      	ldr	r2, [pc, #436]	; (8002054 <HAL_ADC_Start_DMA+0x200>)
 8001e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea2:	0c9a      	lsrs	r2, r3, #18
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	4413      	add	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001eac:	e002      	b.n	8001eb4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f9      	bne.n	8001eae <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ec8:	d107      	bne.n	8001eda <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ed8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	f040 80a1 	bne.w	800202c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ef2:	f023 0301 	bic.w	r3, r3, #1
 8001ef6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d007      	beq.n	8001f1c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f28:	d106      	bne.n	8001f38 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	f023 0206 	bic.w	r2, r3, #6
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	645a      	str	r2, [r3, #68]	; 0x44
 8001f36:	e002      	b.n	8001f3e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f46:	4b44      	ldr	r3, [pc, #272]	; (8002058 <HAL_ADC_Start_DMA+0x204>)
 8001f48:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4e:	4a43      	ldr	r2, [pc, #268]	; (800205c <HAL_ADC_Start_DMA+0x208>)
 8001f50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f56:	4a42      	ldr	r2, [pc, #264]	; (8002060 <HAL_ADC_Start_DMA+0x20c>)
 8001f58:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5e:	4a41      	ldr	r2, [pc, #260]	; (8002064 <HAL_ADC_Start_DMA+0x210>)
 8001f60:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f6a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001f7a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f8a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	334c      	adds	r3, #76	; 0x4c
 8001f96:	4619      	mov	r1, r3
 8001f98:	68ba      	ldr	r2, [r7, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f000 fcee 	bl	800297c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d12a      	bne.n	8002002 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a2d      	ldr	r2, [pc, #180]	; (8002068 <HAL_ADC_Start_DMA+0x214>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d015      	beq.n	8001fe2 <HAL_ADC_Start_DMA+0x18e>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a2c      	ldr	r2, [pc, #176]	; (800206c <HAL_ADC_Start_DMA+0x218>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d105      	bne.n	8001fcc <HAL_ADC_Start_DMA+0x178>
 8001fc0:	4b25      	ldr	r3, [pc, #148]	; (8002058 <HAL_ADC_Start_DMA+0x204>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 031f 	and.w	r3, r3, #31
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00a      	beq.n	8001fe2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a27      	ldr	r2, [pc, #156]	; (8002070 <HAL_ADC_Start_DMA+0x21c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d136      	bne.n	8002044 <HAL_ADC_Start_DMA+0x1f0>
 8001fd6:	4b20      	ldr	r3, [pc, #128]	; (8002058 <HAL_ADC_Start_DMA+0x204>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d130      	bne.n	8002044 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d129      	bne.n	8002044 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	e020      	b.n	8002044 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a18      	ldr	r2, [pc, #96]	; (8002068 <HAL_ADC_Start_DMA+0x214>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d11b      	bne.n	8002044 <HAL_ADC_Start_DMA+0x1f0>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d114      	bne.n	8002044 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	e00b      	b.n	8002044 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	f043 0210 	orr.w	r2, r3, #16
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203c:	f043 0201 	orr.w	r2, r3, #1
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000410 	.word	0x20000410
 8002054:	431bde83 	.word	0x431bde83
 8002058:	40012300 	.word	0x40012300
 800205c:	080024f9 	.word	0x080024f9
 8002060:	080025b3 	.word	0x080025b3
 8002064:	080025cf 	.word	0x080025cf
 8002068:	40012000 	.word	0x40012000
 800206c:	40012100 	.word	0x40012100
 8002070:	40012200 	.word	0x40012200

08002074 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x1c>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e113      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x244>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b09      	cmp	r3, #9
 80020c6:	d925      	bls.n	8002114 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68d9      	ldr	r1, [r3, #12]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	461a      	mov	r2, r3
 80020d6:	4613      	mov	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4413      	add	r3, r2
 80020dc:	3b1e      	subs	r3, #30
 80020de:	2207      	movs	r2, #7
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43da      	mvns	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	400a      	ands	r2, r1
 80020ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68d9      	ldr	r1, [r3, #12]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	4618      	mov	r0, r3
 8002100:	4603      	mov	r3, r0
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4403      	add	r3, r0
 8002106:	3b1e      	subs	r3, #30
 8002108:	409a      	lsls	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	e022      	b.n	800215a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6919      	ldr	r1, [r3, #16]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	b29b      	uxth	r3, r3
 8002120:	461a      	mov	r2, r3
 8002122:	4613      	mov	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	2207      	movs	r2, #7
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43da      	mvns	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	400a      	ands	r2, r1
 8002136:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6919      	ldr	r1, [r3, #16]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	4618      	mov	r0, r3
 800214a:	4603      	mov	r3, r0
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4403      	add	r3, r0
 8002150:	409a      	lsls	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b06      	cmp	r3, #6
 8002160:	d824      	bhi.n	80021ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	3b05      	subs	r3, #5
 8002174:	221f      	movs	r2, #31
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43da      	mvns	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	400a      	ands	r2, r1
 8002182:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	b29b      	uxth	r3, r3
 8002190:	4618      	mov	r0, r3
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	3b05      	subs	r3, #5
 800219e:	fa00 f203 	lsl.w	r2, r0, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	635a      	str	r2, [r3, #52]	; 0x34
 80021aa:	e04c      	b.n	8002246 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b0c      	cmp	r3, #12
 80021b2:	d824      	bhi.n	80021fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	3b23      	subs	r3, #35	; 0x23
 80021c6:	221f      	movs	r2, #31
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43da      	mvns	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	400a      	ands	r2, r1
 80021d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	4618      	mov	r0, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	3b23      	subs	r3, #35	; 0x23
 80021f0:	fa00 f203 	lsl.w	r2, r0, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	631a      	str	r2, [r3, #48]	; 0x30
 80021fc:	e023      	b.n	8002246 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	3b41      	subs	r3, #65	; 0x41
 8002210:	221f      	movs	r2, #31
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43da      	mvns	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	400a      	ands	r2, r1
 800221e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	4618      	mov	r0, r3
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	3b41      	subs	r3, #65	; 0x41
 800223a:	fa00 f203 	lsl.w	r2, r0, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002246:	4b29      	ldr	r3, [pc, #164]	; (80022ec <HAL_ADC_ConfigChannel+0x250>)
 8002248:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a28      	ldr	r2, [pc, #160]	; (80022f0 <HAL_ADC_ConfigChannel+0x254>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d10f      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x1d8>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b12      	cmp	r3, #18
 800225a:	d10b      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a1d      	ldr	r2, [pc, #116]	; (80022f0 <HAL_ADC_ConfigChannel+0x254>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d12b      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x23a>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a1c      	ldr	r2, [pc, #112]	; (80022f4 <HAL_ADC_ConfigChannel+0x258>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d003      	beq.n	8002290 <HAL_ADC_ConfigChannel+0x1f4>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b11      	cmp	r3, #17
 800228e:	d122      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a11      	ldr	r2, [pc, #68]	; (80022f4 <HAL_ADC_ConfigChannel+0x258>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d111      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <HAL_ADC_ConfigChannel+0x25c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a11      	ldr	r2, [pc, #68]	; (80022fc <HAL_ADC_ConfigChannel+0x260>)
 80022b8:	fba2 2303 	umull	r2, r3, r2, r3
 80022bc:	0c9a      	lsrs	r2, r3, #18
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022c8:	e002      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	3b01      	subs	r3, #1
 80022ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f9      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	40012300 	.word	0x40012300
 80022f0:	40012000 	.word	0x40012000
 80022f4:	10000012 	.word	0x10000012
 80022f8:	20000410 	.word	0x20000410
 80022fc:	431bde83 	.word	0x431bde83

08002300 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002308:	4b79      	ldr	r3, [pc, #484]	; (80024f0 <ADC_Init+0x1f0>)
 800230a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	431a      	orrs	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002334:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6859      	ldr	r1, [r3, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	021a      	lsls	r2, r3, #8
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002358:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6859      	ldr	r1, [r3, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800237a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6899      	ldr	r1, [r3, #8]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002392:	4a58      	ldr	r2, [pc, #352]	; (80024f4 <ADC_Init+0x1f4>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d022      	beq.n	80023de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6899      	ldr	r1, [r3, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6899      	ldr	r1, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	e00f      	b.n	80023fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0202 	bic.w	r2, r2, #2
 800240c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6899      	ldr	r1, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7e1b      	ldrb	r3, [r3, #24]
 8002418:	005a      	lsls	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d01b      	beq.n	8002464 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800243a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800244a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6859      	ldr	r1, [r3, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	3b01      	subs	r3, #1
 8002458:	035a      	lsls	r2, r3, #13
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	e007      	b.n	8002474 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002472:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002482:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	3b01      	subs	r3, #1
 8002490:	051a      	lsls	r2, r3, #20
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6899      	ldr	r1, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024b6:	025a      	lsls	r2, r3, #9
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6899      	ldr	r1, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	029a      	lsls	r2, r3, #10
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	609a      	str	r2, [r3, #8]
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	40012300 	.word	0x40012300
 80024f4:	0f000001 	.word	0x0f000001

080024f8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002504:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800250e:	2b00      	cmp	r3, #0
 8002510:	d13c      	bne.n	800258c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d12b      	bne.n	8002584 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002530:	2b00      	cmp	r3, #0
 8002532:	d127      	bne.n	8002584 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800253e:	2b00      	cmp	r3, #0
 8002540:	d006      	beq.n	8002550 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800254c:	2b00      	cmp	r3, #0
 800254e:	d119      	bne.n	8002584 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0220 	bic.w	r2, r2, #32
 800255e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d105      	bne.n	8002584 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	f043 0201 	orr.w	r2, r3, #1
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f7ff f841 	bl	800160c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800258a:	e00e      	b.n	80025aa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	f003 0310 	and.w	r3, r3, #16
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f7ff fd75 	bl	8002088 <HAL_ADC_ErrorCallback>
}
 800259e:	e004      	b.n	80025aa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	4798      	blx	r3
}
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b084      	sub	sp, #16
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025be:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f7ff fd57 	bl	8002074 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025da:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2240      	movs	r2, #64	; 0x40
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f043 0204 	orr.w	r2, r3, #4
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f7ff fd4a 	bl	8002088 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025f4:	bf00      	nop
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <__NVIC_SetPriorityGrouping+0x44>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002618:	4013      	ands	r3, r2
 800261a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800262c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800262e:	4a04      	ldr	r2, [pc, #16]	; (8002640 <__NVIC_SetPriorityGrouping+0x44>)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	60d3      	str	r3, [r2, #12]
}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <__NVIC_GetPriorityGrouping+0x18>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	0a1b      	lsrs	r3, r3, #8
 800264e:	f003 0307 	and.w	r3, r3, #7
}
 8002652:	4618      	mov	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	2b00      	cmp	r3, #0
 8002670:	db0b      	blt.n	800268a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	f003 021f 	and.w	r2, r3, #31
 8002678:	4907      	ldr	r1, [pc, #28]	; (8002698 <__NVIC_EnableIRQ+0x38>)
 800267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	2001      	movs	r0, #1
 8002682:	fa00 f202 	lsl.w	r2, r0, r2
 8002686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	e000e100 	.word	0xe000e100

0800269c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	6039      	str	r1, [r7, #0]
 80026a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	db0a      	blt.n	80026c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	490c      	ldr	r1, [pc, #48]	; (80026e8 <__NVIC_SetPriority+0x4c>)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	0112      	lsls	r2, r2, #4
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	440b      	add	r3, r1
 80026c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c4:	e00a      	b.n	80026dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	4908      	ldr	r1, [pc, #32]	; (80026ec <__NVIC_SetPriority+0x50>)
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	3b04      	subs	r3, #4
 80026d4:	0112      	lsls	r2, r2, #4
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	440b      	add	r3, r1
 80026da:	761a      	strb	r2, [r3, #24]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000e100 	.word	0xe000e100
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b089      	sub	sp, #36	; 0x24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f1c3 0307 	rsb	r3, r3, #7
 800270a:	2b04      	cmp	r3, #4
 800270c:	bf28      	it	cs
 800270e:	2304      	movcs	r3, #4
 8002710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3304      	adds	r3, #4
 8002716:	2b06      	cmp	r3, #6
 8002718:	d902      	bls.n	8002720 <NVIC_EncodePriority+0x30>
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3b03      	subs	r3, #3
 800271e:	e000      	b.n	8002722 <NVIC_EncodePriority+0x32>
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	f04f 32ff 	mov.w	r2, #4294967295
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43da      	mvns	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	401a      	ands	r2, r3
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002738:	f04f 31ff 	mov.w	r1, #4294967295
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	fa01 f303 	lsl.w	r3, r1, r3
 8002742:	43d9      	mvns	r1, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002748:	4313      	orrs	r3, r2
         );
}
 800274a:	4618      	mov	r0, r3
 800274c:	3724      	adds	r7, #36	; 0x24
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002768:	d301      	bcc.n	800276e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800276a:	2301      	movs	r3, #1
 800276c:	e00f      	b.n	800278e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800276e:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <SysTick_Config+0x40>)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3b01      	subs	r3, #1
 8002774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002776:	210f      	movs	r1, #15
 8002778:	f04f 30ff 	mov.w	r0, #4294967295
 800277c:	f7ff ff8e 	bl	800269c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <SysTick_Config+0x40>)
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002786:	4b04      	ldr	r3, [pc, #16]	; (8002798 <SysTick_Config+0x40>)
 8002788:	2207      	movs	r2, #7
 800278a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	e000e010 	.word	0xe000e010

0800279c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff ff29 	bl	80025fc <__NVIC_SetPriorityGrouping>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b086      	sub	sp, #24
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	4603      	mov	r3, r0
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	607a      	str	r2, [r7, #4]
 80027be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027c4:	f7ff ff3e 	bl	8002644 <__NVIC_GetPriorityGrouping>
 80027c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	68b9      	ldr	r1, [r7, #8]
 80027ce:	6978      	ldr	r0, [r7, #20]
 80027d0:	f7ff ff8e 	bl	80026f0 <NVIC_EncodePriority>
 80027d4:	4602      	mov	r2, r0
 80027d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027da:	4611      	mov	r1, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff5d 	bl	800269c <__NVIC_SetPriority>
}
 80027e2:	bf00      	nop
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	4603      	mov	r3, r0
 80027f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ff31 	bl	8002660 <__NVIC_EnableIRQ>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff ffa2 	bl	8002758 <SysTick_Config>
 8002814:	4603      	mov	r3, r0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800282c:	f7ff fa9e 	bl	8001d6c <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e099      	b.n	8002970 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0201 	bic.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800285c:	e00f      	b.n	800287e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800285e:	f7ff fa85 	bl	8001d6c <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b05      	cmp	r3, #5
 800286a:	d908      	bls.n	800287e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2220      	movs	r2, #32
 8002870:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2203      	movs	r2, #3
 8002876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e078      	b.n	8002970 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1e8      	bne.n	800285e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	4b38      	ldr	r3, [pc, #224]	; (8002978 <HAL_DMA_Init+0x158>)
 8002898:	4013      	ands	r3, r2
 800289a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d107      	bne.n	80028e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	4313      	orrs	r3, r2
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f023 0307 	bic.w	r3, r3, #7
 80028fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	4313      	orrs	r3, r2
 8002908:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	2b04      	cmp	r3, #4
 8002910:	d117      	bne.n	8002942 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4313      	orrs	r3, r2
 800291a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00e      	beq.n	8002942 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 fa6f 	bl	8002e08 <DMA_CheckFifoParam>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2240      	movs	r2, #64	; 0x40
 8002934:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800293e:	2301      	movs	r3, #1
 8002940:	e016      	b.n	8002970 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 fa26 	bl	8002d9c <DMA_CalcBaseAndBitshift>
 8002950:	4603      	mov	r3, r0
 8002952:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002958:	223f      	movs	r2, #63	; 0x3f
 800295a:	409a      	lsls	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	f010803f 	.word	0xf010803f

0800297c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002992:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <HAL_DMA_Start_IT+0x26>
 800299e:	2302      	movs	r3, #2
 80029a0:	e040      	b.n	8002a24 <HAL_DMA_Start_IT+0xa8>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d12f      	bne.n	8002a16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2202      	movs	r2, #2
 80029ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f9b8 	bl	8002d40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d4:	223f      	movs	r2, #63	; 0x3f
 80029d6:	409a      	lsls	r2, r3
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0216 	orr.w	r2, r2, #22
 80029ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d007      	beq.n	8002a04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0208 	orr.w	r2, r2, #8
 8002a02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	e005      	b.n	8002a22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a38:	4b8e      	ldr	r3, [pc, #568]	; (8002c74 <HAL_DMA_IRQHandler+0x248>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a8e      	ldr	r2, [pc, #568]	; (8002c78 <HAL_DMA_IRQHandler+0x24c>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	0a9b      	lsrs	r3, r3, #10
 8002a44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a56:	2208      	movs	r2, #8
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d01a      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d013      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0204 	bic.w	r2, r2, #4
 8002a7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a84:	2208      	movs	r2, #8
 8002a86:	409a      	lsls	r2, r3
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a90:	f043 0201 	orr.w	r2, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d012      	beq.n	8002ace <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00b      	beq.n	8002ace <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aba:	2201      	movs	r2, #1
 8002abc:	409a      	lsls	r2, r3
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac6:	f043 0202 	orr.w	r2, r3, #2
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d012      	beq.n	8002b04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00b      	beq.n	8002b04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af0:	2204      	movs	r2, #4
 8002af2:	409a      	lsls	r2, r3
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afc:	f043 0204 	orr.w	r2, r3, #4
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b08:	2210      	movs	r2, #16
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d043      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d03c      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b26:	2210      	movs	r2, #16
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d018      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d108      	bne.n	8002b5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d024      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	4798      	blx	r3
 8002b5a:	e01f      	b.n	8002b9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d01b      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	4798      	blx	r3
 8002b6c:	e016      	b.n	8002b9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d107      	bne.n	8002b8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0208 	bic.w	r2, r2, #8
 8002b8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	409a      	lsls	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 808f 	beq.w	8002ccc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 8087 	beq.w	8002ccc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	409a      	lsls	r2, r3
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b05      	cmp	r3, #5
 8002bd4:	d136      	bne.n	8002c44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0216 	bic.w	r2, r2, #22
 8002be4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695a      	ldr	r2, [r3, #20]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bf4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d103      	bne.n	8002c06 <HAL_DMA_IRQHandler+0x1da>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d007      	beq.n	8002c16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0208 	bic.w	r2, r2, #8
 8002c14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1a:	223f      	movs	r2, #63	; 0x3f
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d07e      	beq.n	8002d38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	4798      	blx	r3
        }
        return;
 8002c42:	e079      	b.n	8002d38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d01d      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10d      	bne.n	8002c7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d031      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	4798      	blx	r3
 8002c70:	e02c      	b.n	8002ccc <HAL_DMA_IRQHandler+0x2a0>
 8002c72:	bf00      	nop
 8002c74:	20000410 	.word	0x20000410
 8002c78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d023      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	4798      	blx	r3
 8002c8c:	e01e      	b.n	8002ccc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10f      	bne.n	8002cbc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0210 	bic.w	r2, r2, #16
 8002caa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d032      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d022      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2205      	movs	r2, #5
 8002ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0201 	bic.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d307      	bcc.n	8002d14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f2      	bne.n	8002cf8 <HAL_DMA_IRQHandler+0x2cc>
 8002d12:	e000      	b.n	8002d16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	4798      	blx	r3
 8002d36:	e000      	b.n	8002d3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d38:	bf00      	nop
    }
  }
}
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b40      	cmp	r3, #64	; 0x40
 8002d6c:	d108      	bne.n	8002d80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d7e:	e007      	b.n	8002d90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	60da      	str	r2, [r3, #12]
}
 8002d90:	bf00      	nop
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	3b10      	subs	r3, #16
 8002dac:	4a14      	ldr	r2, [pc, #80]	; (8002e00 <DMA_CalcBaseAndBitshift+0x64>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	091b      	lsrs	r3, r3, #4
 8002db4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002db6:	4a13      	ldr	r2, [pc, #76]	; (8002e04 <DMA_CalcBaseAndBitshift+0x68>)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4413      	add	r3, r2
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d909      	bls.n	8002dde <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dd2:	f023 0303 	bic.w	r3, r3, #3
 8002dd6:	1d1a      	adds	r2, r3, #4
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	659a      	str	r2, [r3, #88]	; 0x58
 8002ddc:	e007      	b.n	8002dee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002de6:	f023 0303 	bic.w	r3, r3, #3
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	aaaaaaab 	.word	0xaaaaaaab
 8002e04:	0800a6f0 	.word	0x0800a6f0

08002e08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d11f      	bne.n	8002e62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d856      	bhi.n	8002ed6 <DMA_CheckFifoParam+0xce>
 8002e28:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <DMA_CheckFifoParam+0x28>)
 8002e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2e:	bf00      	nop
 8002e30:	08002e41 	.word	0x08002e41
 8002e34:	08002e53 	.word	0x08002e53
 8002e38:	08002e41 	.word	0x08002e41
 8002e3c:	08002ed7 	.word	0x08002ed7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d046      	beq.n	8002eda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e50:	e043      	b.n	8002eda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e5a:	d140      	bne.n	8002ede <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e60:	e03d      	b.n	8002ede <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e6a:	d121      	bne.n	8002eb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2b03      	cmp	r3, #3
 8002e70:	d837      	bhi.n	8002ee2 <DMA_CheckFifoParam+0xda>
 8002e72:	a201      	add	r2, pc, #4	; (adr r2, 8002e78 <DMA_CheckFifoParam+0x70>)
 8002e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e78:	08002e89 	.word	0x08002e89
 8002e7c:	08002e8f 	.word	0x08002e8f
 8002e80:	08002e89 	.word	0x08002e89
 8002e84:	08002ea1 	.word	0x08002ea1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e8c:	e030      	b.n	8002ef0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d025      	beq.n	8002ee6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e9e:	e022      	b.n	8002ee6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ea8:	d11f      	bne.n	8002eea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002eae:	e01c      	b.n	8002eea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d903      	bls.n	8002ebe <DMA_CheckFifoParam+0xb6>
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d003      	beq.n	8002ec4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ebc:	e018      	b.n	8002ef0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec2:	e015      	b.n	8002ef0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00e      	beq.n	8002eee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed4:	e00b      	b.n	8002eee <DMA_CheckFifoParam+0xe6>
      break;
 8002ed6:	bf00      	nop
 8002ed8:	e00a      	b.n	8002ef0 <DMA_CheckFifoParam+0xe8>
      break;
 8002eda:	bf00      	nop
 8002edc:	e008      	b.n	8002ef0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ede:	bf00      	nop
 8002ee0:	e006      	b.n	8002ef0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ee2:	bf00      	nop
 8002ee4:	e004      	b.n	8002ef0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ee6:	bf00      	nop
 8002ee8:	e002      	b.n	8002ef0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002eea:	bf00      	nop
 8002eec:	e000      	b.n	8002ef0 <DMA_CheckFifoParam+0xe8>
      break;
 8002eee:	bf00      	nop
    }
  } 
  
  return status; 
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop

08002f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b089      	sub	sp, #36	; 0x24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	e165      	b.n	80031e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	f040 8154 	bne.w	80031e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d005      	beq.n	8002f52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d130      	bne.n	8002fb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f88:	2201      	movs	r2, #1
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f003 0201 	and.w	r2, r3, #1
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d017      	beq.n	8002ff0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	2203      	movs	r2, #3
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d123      	bne.n	8003044 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	08da      	lsrs	r2, r3, #3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3208      	adds	r2, #8
 8003004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003008:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	220f      	movs	r2, #15
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	08da      	lsrs	r2, r3, #3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3208      	adds	r2, #8
 800303e:	69b9      	ldr	r1, [r7, #24]
 8003040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	2203      	movs	r2, #3
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 0203 	and.w	r2, r3, #3
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 80ae 	beq.w	80031e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	4b5d      	ldr	r3, [pc, #372]	; (8003200 <HAL_GPIO_Init+0x300>)
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	4a5c      	ldr	r2, [pc, #368]	; (8003200 <HAL_GPIO_Init+0x300>)
 8003090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003094:	6453      	str	r3, [r2, #68]	; 0x44
 8003096:	4b5a      	ldr	r3, [pc, #360]	; (8003200 <HAL_GPIO_Init+0x300>)
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030a2:	4a58      	ldr	r2, [pc, #352]	; (8003204 <HAL_GPIO_Init+0x304>)
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	089b      	lsrs	r3, r3, #2
 80030a8:	3302      	adds	r3, #2
 80030aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	220f      	movs	r2, #15
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4013      	ands	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a4f      	ldr	r2, [pc, #316]	; (8003208 <HAL_GPIO_Init+0x308>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d025      	beq.n	800311a <HAL_GPIO_Init+0x21a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4e      	ldr	r2, [pc, #312]	; (800320c <HAL_GPIO_Init+0x30c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d01f      	beq.n	8003116 <HAL_GPIO_Init+0x216>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a4d      	ldr	r2, [pc, #308]	; (8003210 <HAL_GPIO_Init+0x310>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d019      	beq.n	8003112 <HAL_GPIO_Init+0x212>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a4c      	ldr	r2, [pc, #304]	; (8003214 <HAL_GPIO_Init+0x314>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d013      	beq.n	800310e <HAL_GPIO_Init+0x20e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a4b      	ldr	r2, [pc, #300]	; (8003218 <HAL_GPIO_Init+0x318>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d00d      	beq.n	800310a <HAL_GPIO_Init+0x20a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a4a      	ldr	r2, [pc, #296]	; (800321c <HAL_GPIO_Init+0x31c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d007      	beq.n	8003106 <HAL_GPIO_Init+0x206>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a49      	ldr	r2, [pc, #292]	; (8003220 <HAL_GPIO_Init+0x320>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d101      	bne.n	8003102 <HAL_GPIO_Init+0x202>
 80030fe:	2306      	movs	r3, #6
 8003100:	e00c      	b.n	800311c <HAL_GPIO_Init+0x21c>
 8003102:	2307      	movs	r3, #7
 8003104:	e00a      	b.n	800311c <HAL_GPIO_Init+0x21c>
 8003106:	2305      	movs	r3, #5
 8003108:	e008      	b.n	800311c <HAL_GPIO_Init+0x21c>
 800310a:	2304      	movs	r3, #4
 800310c:	e006      	b.n	800311c <HAL_GPIO_Init+0x21c>
 800310e:	2303      	movs	r3, #3
 8003110:	e004      	b.n	800311c <HAL_GPIO_Init+0x21c>
 8003112:	2302      	movs	r3, #2
 8003114:	e002      	b.n	800311c <HAL_GPIO_Init+0x21c>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <HAL_GPIO_Init+0x21c>
 800311a:	2300      	movs	r3, #0
 800311c:	69fa      	ldr	r2, [r7, #28]
 800311e:	f002 0203 	and.w	r2, r2, #3
 8003122:	0092      	lsls	r2, r2, #2
 8003124:	4093      	lsls	r3, r2
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800312c:	4935      	ldr	r1, [pc, #212]	; (8003204 <HAL_GPIO_Init+0x304>)
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	089b      	lsrs	r3, r3, #2
 8003132:	3302      	adds	r3, #2
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800313a:	4b3a      	ldr	r3, [pc, #232]	; (8003224 <HAL_GPIO_Init+0x324>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	43db      	mvns	r3, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4013      	ands	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800315e:	4a31      	ldr	r2, [pc, #196]	; (8003224 <HAL_GPIO_Init+0x324>)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003164:	4b2f      	ldr	r3, [pc, #188]	; (8003224 <HAL_GPIO_Init+0x324>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003188:	4a26      	ldr	r2, [pc, #152]	; (8003224 <HAL_GPIO_Init+0x324>)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800318e:	4b25      	ldr	r3, [pc, #148]	; (8003224 <HAL_GPIO_Init+0x324>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	43db      	mvns	r3, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4013      	ands	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031b2:	4a1c      	ldr	r2, [pc, #112]	; (8003224 <HAL_GPIO_Init+0x324>)
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031b8:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <HAL_GPIO_Init+0x324>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	43db      	mvns	r3, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4013      	ands	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031dc:	4a11      	ldr	r2, [pc, #68]	; (8003224 <HAL_GPIO_Init+0x324>)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3301      	adds	r3, #1
 80031e6:	61fb      	str	r3, [r7, #28]
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	2b0f      	cmp	r3, #15
 80031ec:	f67f ae96 	bls.w	8002f1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	3724      	adds	r7, #36	; 0x24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	40023800 	.word	0x40023800
 8003204:	40013800 	.word	0x40013800
 8003208:	40020000 	.word	0x40020000
 800320c:	40020400 	.word	0x40020400
 8003210:	40020800 	.word	0x40020800
 8003214:	40020c00 	.word	0x40020c00
 8003218:	40021000 	.word	0x40021000
 800321c:	40021400 	.word	0x40021400
 8003220:	40021800 	.word	0x40021800
 8003224:	40013c00 	.word	0x40013c00

08003228 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	887b      	ldrh	r3, [r7, #2]
 800323a:	4013      	ands	r3, r2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003240:	2301      	movs	r3, #1
 8003242:	73fb      	strb	r3, [r7, #15]
 8003244:	e001      	b.n	800324a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003246:	2300      	movs	r3, #0
 8003248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800324a:	7bfb      	ldrb	r3, [r7, #15]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
 8003264:	4613      	mov	r3, r2
 8003266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003268:	787b      	ldrb	r3, [r7, #1]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800326e:	887a      	ldrh	r2, [r7, #2]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003274:	e003      	b.n	800327e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003276:	887b      	ldrh	r3, [r7, #2]
 8003278:	041a      	lsls	r2, r3, #16
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	619a      	str	r2, [r3, #24]
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	603b      	str	r3, [r7, #0]
 800329a:	4b20      	ldr	r3, [pc, #128]	; (800331c <HAL_PWREx_EnableOverDrive+0x90>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	4a1f      	ldr	r2, [pc, #124]	; (800331c <HAL_PWREx_EnableOverDrive+0x90>)
 80032a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a4:	6413      	str	r3, [r2, #64]	; 0x40
 80032a6:	4b1d      	ldr	r3, [pc, #116]	; (800331c <HAL_PWREx_EnableOverDrive+0x90>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ae:	603b      	str	r3, [r7, #0]
 80032b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80032b2:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <HAL_PWREx_EnableOverDrive+0x94>)
 80032b4:	2201      	movs	r2, #1
 80032b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032b8:	f7fe fd58 	bl	8001d6c <HAL_GetTick>
 80032bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032be:	e009      	b.n	80032d4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032c0:	f7fe fd54 	bl	8001d6c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ce:	d901      	bls.n	80032d4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e01f      	b.n	8003314 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032d4:	4b13      	ldr	r3, [pc, #76]	; (8003324 <HAL_PWREx_EnableOverDrive+0x98>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e0:	d1ee      	bne.n	80032c0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032e2:	4b11      	ldr	r3, [pc, #68]	; (8003328 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032e4:	2201      	movs	r2, #1
 80032e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032e8:	f7fe fd40 	bl	8001d6c <HAL_GetTick>
 80032ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032ee:	e009      	b.n	8003304 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032f0:	f7fe fd3c 	bl	8001d6c <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032fe:	d901      	bls.n	8003304 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e007      	b.n	8003314 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003304:	4b07      	ldr	r3, [pc, #28]	; (8003324 <HAL_PWREx_EnableOverDrive+0x98>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003310:	d1ee      	bne.n	80032f0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40023800 	.word	0x40023800
 8003320:	420e0040 	.word	0x420e0040
 8003324:	40007000 	.word	0x40007000
 8003328:	420e0044 	.word	0x420e0044

0800332c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0cc      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003340:	4b68      	ldr	r3, [pc, #416]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 030f 	and.w	r3, r3, #15
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d90c      	bls.n	8003368 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334e:	4b65      	ldr	r3, [pc, #404]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003356:	4b63      	ldr	r3, [pc, #396]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d001      	beq.n	8003368 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0b8      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d020      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003380:	4b59      	ldr	r3, [pc, #356]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4a58      	ldr	r2, [pc, #352]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800338a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b00      	cmp	r3, #0
 8003396:	d005      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003398:	4b53      	ldr	r3, [pc, #332]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	4a52      	ldr	r2, [pc, #328]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a4:	4b50      	ldr	r3, [pc, #320]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	494d      	ldr	r1, [pc, #308]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d044      	beq.n	800344c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d107      	bne.n	80033da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ca:	4b47      	ldr	r3, [pc, #284]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d119      	bne.n	800340a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e07f      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d003      	beq.n	80033ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	d107      	bne.n	80033fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ea:	4b3f      	ldr	r3, [pc, #252]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e06f      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fa:	4b3b      	ldr	r3, [pc, #236]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e067      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800340a:	4b37      	ldr	r3, [pc, #220]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f023 0203 	bic.w	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4934      	ldr	r1, [pc, #208]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003418:	4313      	orrs	r3, r2
 800341a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800341c:	f7fe fca6 	bl	8001d6c <HAL_GetTick>
 8003420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	e00a      	b.n	800343a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003424:	f7fe fca2 	bl	8001d6c <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e04f      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343a:	4b2b      	ldr	r3, [pc, #172]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 020c 	and.w	r2, r3, #12
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	429a      	cmp	r2, r3
 800344a:	d1eb      	bne.n	8003424 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800344c:	4b25      	ldr	r3, [pc, #148]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d20c      	bcs.n	8003474 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345a:	4b22      	ldr	r3, [pc, #136]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003462:	4b20      	ldr	r3, [pc, #128]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d001      	beq.n	8003474 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e032      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003480:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	4916      	ldr	r1, [pc, #88]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d009      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800349e:	4b12      	ldr	r3, [pc, #72]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	490e      	ldr	r1, [pc, #56]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034b2:	f000 f855 	bl	8003560 <HAL_RCC_GetSysClockFreq>
 80034b6:	4602      	mov	r2, r0
 80034b8:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	490a      	ldr	r1, [pc, #40]	; (80034ec <HAL_RCC_ClockConfig+0x1c0>)
 80034c4:	5ccb      	ldrb	r3, [r1, r3]
 80034c6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ca:	4a09      	ldr	r2, [pc, #36]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 80034cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034ce:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <HAL_RCC_ClockConfig+0x1c8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fe fc06 	bl	8001ce4 <HAL_InitTick>

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40023c00 	.word	0x40023c00
 80034e8:	40023800 	.word	0x40023800
 80034ec:	0800a6d8 	.word	0x0800a6d8
 80034f0:	20000410 	.word	0x20000410
 80034f4:	20000414 	.word	0x20000414

080034f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034fc:	4b03      	ldr	r3, [pc, #12]	; (800350c <HAL_RCC_GetHCLKFreq+0x14>)
 80034fe:	681b      	ldr	r3, [r3, #0]
}
 8003500:	4618      	mov	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	20000410 	.word	0x20000410

08003510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003514:	f7ff fff0 	bl	80034f8 <HAL_RCC_GetHCLKFreq>
 8003518:	4602      	mov	r2, r0
 800351a:	4b05      	ldr	r3, [pc, #20]	; (8003530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	0a9b      	lsrs	r3, r3, #10
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	4903      	ldr	r1, [pc, #12]	; (8003534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003526:	5ccb      	ldrb	r3, [r1, r3]
 8003528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800352c:	4618      	mov	r0, r3
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40023800 	.word	0x40023800
 8003534:	0800a6e8 	.word	0x0800a6e8

08003538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800353c:	f7ff ffdc 	bl	80034f8 <HAL_RCC_GetHCLKFreq>
 8003540:	4602      	mov	r2, r0
 8003542:	4b05      	ldr	r3, [pc, #20]	; (8003558 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	0b5b      	lsrs	r3, r3, #13
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	4903      	ldr	r1, [pc, #12]	; (800355c <HAL_RCC_GetPCLK2Freq+0x24>)
 800354e:	5ccb      	ldrb	r3, [r1, r3]
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003554:	4618      	mov	r0, r3
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40023800 	.word	0x40023800
 800355c:	0800a6e8 	.word	0x0800a6e8

08003560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003564:	b0ae      	sub	sp, #184	; 0xb8
 8003566:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800356e:	2300      	movs	r3, #0
 8003570:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003586:	4bcb      	ldr	r3, [pc, #812]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 030c 	and.w	r3, r3, #12
 800358e:	2b0c      	cmp	r3, #12
 8003590:	f200 8206 	bhi.w	80039a0 <HAL_RCC_GetSysClockFreq+0x440>
 8003594:	a201      	add	r2, pc, #4	; (adr r2, 800359c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359a:	bf00      	nop
 800359c:	080035d1 	.word	0x080035d1
 80035a0:	080039a1 	.word	0x080039a1
 80035a4:	080039a1 	.word	0x080039a1
 80035a8:	080039a1 	.word	0x080039a1
 80035ac:	080035d9 	.word	0x080035d9
 80035b0:	080039a1 	.word	0x080039a1
 80035b4:	080039a1 	.word	0x080039a1
 80035b8:	080039a1 	.word	0x080039a1
 80035bc:	080035e1 	.word	0x080035e1
 80035c0:	080039a1 	.word	0x080039a1
 80035c4:	080039a1 	.word	0x080039a1
 80035c8:	080039a1 	.word	0x080039a1
 80035cc:	080037d1 	.word	0x080037d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035d0:	4bb9      	ldr	r3, [pc, #740]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x358>)
 80035d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80035d6:	e1e7      	b.n	80039a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035d8:	4bb8      	ldr	r3, [pc, #736]	; (80038bc <HAL_RCC_GetSysClockFreq+0x35c>)
 80035da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80035de:	e1e3      	b.n	80039a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035e0:	4bb4      	ldr	r3, [pc, #720]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ec:	4bb1      	ldr	r3, [pc, #708]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d071      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f8:	4bae      	ldr	r3, [pc, #696]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	099b      	lsrs	r3, r3, #6
 80035fe:	2200      	movs	r2, #0
 8003600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003604:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003608:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800360c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003610:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003614:	2300      	movs	r3, #0
 8003616:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800361a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800361e:	4622      	mov	r2, r4
 8003620:	462b      	mov	r3, r5
 8003622:	f04f 0000 	mov.w	r0, #0
 8003626:	f04f 0100 	mov.w	r1, #0
 800362a:	0159      	lsls	r1, r3, #5
 800362c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003630:	0150      	lsls	r0, r2, #5
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	4621      	mov	r1, r4
 8003638:	1a51      	subs	r1, r2, r1
 800363a:	6439      	str	r1, [r7, #64]	; 0x40
 800363c:	4629      	mov	r1, r5
 800363e:	eb63 0301 	sbc.w	r3, r3, r1
 8003642:	647b      	str	r3, [r7, #68]	; 0x44
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003650:	4649      	mov	r1, r9
 8003652:	018b      	lsls	r3, r1, #6
 8003654:	4641      	mov	r1, r8
 8003656:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800365a:	4641      	mov	r1, r8
 800365c:	018a      	lsls	r2, r1, #6
 800365e:	4641      	mov	r1, r8
 8003660:	1a51      	subs	r1, r2, r1
 8003662:	63b9      	str	r1, [r7, #56]	; 0x38
 8003664:	4649      	mov	r1, r9
 8003666:	eb63 0301 	sbc.w	r3, r3, r1
 800366a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003678:	4649      	mov	r1, r9
 800367a:	00cb      	lsls	r3, r1, #3
 800367c:	4641      	mov	r1, r8
 800367e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003682:	4641      	mov	r1, r8
 8003684:	00ca      	lsls	r2, r1, #3
 8003686:	4610      	mov	r0, r2
 8003688:	4619      	mov	r1, r3
 800368a:	4603      	mov	r3, r0
 800368c:	4622      	mov	r2, r4
 800368e:	189b      	adds	r3, r3, r2
 8003690:	633b      	str	r3, [r7, #48]	; 0x30
 8003692:	462b      	mov	r3, r5
 8003694:	460a      	mov	r2, r1
 8003696:	eb42 0303 	adc.w	r3, r2, r3
 800369a:	637b      	str	r3, [r7, #52]	; 0x34
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036a8:	4629      	mov	r1, r5
 80036aa:	024b      	lsls	r3, r1, #9
 80036ac:	4621      	mov	r1, r4
 80036ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036b2:	4621      	mov	r1, r4
 80036b4:	024a      	lsls	r2, r1, #9
 80036b6:	4610      	mov	r0, r2
 80036b8:	4619      	mov	r1, r3
 80036ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036be:	2200      	movs	r2, #0
 80036c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036c8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80036cc:	f7fd fafc 	bl	8000cc8 <__aeabi_uldivmod>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4613      	mov	r3, r2
 80036d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036da:	e067      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036dc:	4b75      	ldr	r3, [pc, #468]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	099b      	lsrs	r3, r3, #6
 80036e2:	2200      	movs	r2, #0
 80036e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036e8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80036ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80036f6:	2300      	movs	r3, #0
 80036f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80036fa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80036fe:	4622      	mov	r2, r4
 8003700:	462b      	mov	r3, r5
 8003702:	f04f 0000 	mov.w	r0, #0
 8003706:	f04f 0100 	mov.w	r1, #0
 800370a:	0159      	lsls	r1, r3, #5
 800370c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003710:	0150      	lsls	r0, r2, #5
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	4621      	mov	r1, r4
 8003718:	1a51      	subs	r1, r2, r1
 800371a:	62b9      	str	r1, [r7, #40]	; 0x28
 800371c:	4629      	mov	r1, r5
 800371e:	eb63 0301 	sbc.w	r3, r3, r1
 8003722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003730:	4649      	mov	r1, r9
 8003732:	018b      	lsls	r3, r1, #6
 8003734:	4641      	mov	r1, r8
 8003736:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800373a:	4641      	mov	r1, r8
 800373c:	018a      	lsls	r2, r1, #6
 800373e:	4641      	mov	r1, r8
 8003740:	ebb2 0a01 	subs.w	sl, r2, r1
 8003744:	4649      	mov	r1, r9
 8003746:	eb63 0b01 	sbc.w	fp, r3, r1
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003756:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800375a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800375e:	4692      	mov	sl, r2
 8003760:	469b      	mov	fp, r3
 8003762:	4623      	mov	r3, r4
 8003764:	eb1a 0303 	adds.w	r3, sl, r3
 8003768:	623b      	str	r3, [r7, #32]
 800376a:	462b      	mov	r3, r5
 800376c:	eb4b 0303 	adc.w	r3, fp, r3
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800377e:	4629      	mov	r1, r5
 8003780:	028b      	lsls	r3, r1, #10
 8003782:	4621      	mov	r1, r4
 8003784:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003788:	4621      	mov	r1, r4
 800378a:	028a      	lsls	r2, r1, #10
 800378c:	4610      	mov	r0, r2
 800378e:	4619      	mov	r1, r3
 8003790:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003794:	2200      	movs	r2, #0
 8003796:	673b      	str	r3, [r7, #112]	; 0x70
 8003798:	677a      	str	r2, [r7, #116]	; 0x74
 800379a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800379e:	f7fd fa93 	bl	8000cc8 <__aeabi_uldivmod>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4613      	mov	r3, r2
 80037a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037ac:	4b41      	ldr	r3, [pc, #260]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	0c1b      	lsrs	r3, r3, #16
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	3301      	adds	r3, #1
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80037be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80037ce:	e0eb      	b.n	80039a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037d0:	4b38      	ldr	r3, [pc, #224]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037dc:	4b35      	ldr	r3, [pc, #212]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d06b      	beq.n	80038c0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e8:	4b32      	ldr	r3, [pc, #200]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	099b      	lsrs	r3, r3, #6
 80037ee:	2200      	movs	r2, #0
 80037f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80037f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037fa:	663b      	str	r3, [r7, #96]	; 0x60
 80037fc:	2300      	movs	r3, #0
 80037fe:	667b      	str	r3, [r7, #100]	; 0x64
 8003800:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003804:	4622      	mov	r2, r4
 8003806:	462b      	mov	r3, r5
 8003808:	f04f 0000 	mov.w	r0, #0
 800380c:	f04f 0100 	mov.w	r1, #0
 8003810:	0159      	lsls	r1, r3, #5
 8003812:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003816:	0150      	lsls	r0, r2, #5
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4621      	mov	r1, r4
 800381e:	1a51      	subs	r1, r2, r1
 8003820:	61b9      	str	r1, [r7, #24]
 8003822:	4629      	mov	r1, r5
 8003824:	eb63 0301 	sbc.w	r3, r3, r1
 8003828:	61fb      	str	r3, [r7, #28]
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003836:	4659      	mov	r1, fp
 8003838:	018b      	lsls	r3, r1, #6
 800383a:	4651      	mov	r1, sl
 800383c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003840:	4651      	mov	r1, sl
 8003842:	018a      	lsls	r2, r1, #6
 8003844:	4651      	mov	r1, sl
 8003846:	ebb2 0801 	subs.w	r8, r2, r1
 800384a:	4659      	mov	r1, fp
 800384c:	eb63 0901 	sbc.w	r9, r3, r1
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800385c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003860:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003864:	4690      	mov	r8, r2
 8003866:	4699      	mov	r9, r3
 8003868:	4623      	mov	r3, r4
 800386a:	eb18 0303 	adds.w	r3, r8, r3
 800386e:	613b      	str	r3, [r7, #16]
 8003870:	462b      	mov	r3, r5
 8003872:	eb49 0303 	adc.w	r3, r9, r3
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	f04f 0200 	mov.w	r2, #0
 800387c:	f04f 0300 	mov.w	r3, #0
 8003880:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003884:	4629      	mov	r1, r5
 8003886:	024b      	lsls	r3, r1, #9
 8003888:	4621      	mov	r1, r4
 800388a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800388e:	4621      	mov	r1, r4
 8003890:	024a      	lsls	r2, r1, #9
 8003892:	4610      	mov	r0, r2
 8003894:	4619      	mov	r1, r3
 8003896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800389a:	2200      	movs	r2, #0
 800389c:	65bb      	str	r3, [r7, #88]	; 0x58
 800389e:	65fa      	str	r2, [r7, #92]	; 0x5c
 80038a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80038a4:	f7fd fa10 	bl	8000cc8 <__aeabi_uldivmod>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4613      	mov	r3, r2
 80038ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038b2:	e065      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x420>
 80038b4:	40023800 	.word	0x40023800
 80038b8:	00f42400 	.word	0x00f42400
 80038bc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038c0:	4b3d      	ldr	r3, [pc, #244]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x458>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	099b      	lsrs	r3, r3, #6
 80038c6:	2200      	movs	r2, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	4611      	mov	r1, r2
 80038cc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038d0:	653b      	str	r3, [r7, #80]	; 0x50
 80038d2:	2300      	movs	r3, #0
 80038d4:	657b      	str	r3, [r7, #84]	; 0x54
 80038d6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80038da:	4642      	mov	r2, r8
 80038dc:	464b      	mov	r3, r9
 80038de:	f04f 0000 	mov.w	r0, #0
 80038e2:	f04f 0100 	mov.w	r1, #0
 80038e6:	0159      	lsls	r1, r3, #5
 80038e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038ec:	0150      	lsls	r0, r2, #5
 80038ee:	4602      	mov	r2, r0
 80038f0:	460b      	mov	r3, r1
 80038f2:	4641      	mov	r1, r8
 80038f4:	1a51      	subs	r1, r2, r1
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	4649      	mov	r1, r9
 80038fa:	eb63 0301 	sbc.w	r3, r3, r1
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800390c:	4659      	mov	r1, fp
 800390e:	018b      	lsls	r3, r1, #6
 8003910:	4651      	mov	r1, sl
 8003912:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003916:	4651      	mov	r1, sl
 8003918:	018a      	lsls	r2, r1, #6
 800391a:	4651      	mov	r1, sl
 800391c:	1a54      	subs	r4, r2, r1
 800391e:	4659      	mov	r1, fp
 8003920:	eb63 0501 	sbc.w	r5, r3, r1
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	00eb      	lsls	r3, r5, #3
 800392e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003932:	00e2      	lsls	r2, r4, #3
 8003934:	4614      	mov	r4, r2
 8003936:	461d      	mov	r5, r3
 8003938:	4643      	mov	r3, r8
 800393a:	18e3      	adds	r3, r4, r3
 800393c:	603b      	str	r3, [r7, #0]
 800393e:	464b      	mov	r3, r9
 8003940:	eb45 0303 	adc.w	r3, r5, r3
 8003944:	607b      	str	r3, [r7, #4]
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	f04f 0300 	mov.w	r3, #0
 800394e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003952:	4629      	mov	r1, r5
 8003954:	028b      	lsls	r3, r1, #10
 8003956:	4621      	mov	r1, r4
 8003958:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800395c:	4621      	mov	r1, r4
 800395e:	028a      	lsls	r2, r1, #10
 8003960:	4610      	mov	r0, r2
 8003962:	4619      	mov	r1, r3
 8003964:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003968:	2200      	movs	r2, #0
 800396a:	64bb      	str	r3, [r7, #72]	; 0x48
 800396c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800396e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003972:	f7fd f9a9 	bl	8000cc8 <__aeabi_uldivmod>
 8003976:	4602      	mov	r2, r0
 8003978:	460b      	mov	r3, r1
 800397a:	4613      	mov	r3, r2
 800397c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003980:	4b0d      	ldr	r3, [pc, #52]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	0f1b      	lsrs	r3, r3, #28
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800398e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003992:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003996:	fbb2 f3f3 	udiv	r3, r2, r3
 800399a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800399e:	e003      	b.n	80039a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039a0:	4b06      	ldr	r3, [pc, #24]	; (80039bc <HAL_RCC_GetSysClockFreq+0x45c>)
 80039a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80039a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	37b8      	adds	r7, #184	; 0xb8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039b6:	bf00      	nop
 80039b8:	40023800 	.word	0x40023800
 80039bc:	00f42400 	.word	0x00f42400

080039c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e28d      	b.n	8003eee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 8083 	beq.w	8003ae6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80039e0:	4b94      	ldr	r3, [pc, #592]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 030c 	and.w	r3, r3, #12
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d019      	beq.n	8003a20 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039ec:	4b91      	ldr	r3, [pc, #580]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d106      	bne.n	8003a06 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039f8:	4b8e      	ldr	r3, [pc, #568]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a04:	d00c      	beq.n	8003a20 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a06:	4b8b      	ldr	r3, [pc, #556]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a0e:	2b0c      	cmp	r3, #12
 8003a10:	d112      	bne.n	8003a38 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a12:	4b88      	ldr	r3, [pc, #544]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a1e:	d10b      	bne.n	8003a38 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a20:	4b84      	ldr	r3, [pc, #528]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d05b      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x124>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d157      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e25a      	b.n	8003eee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a40:	d106      	bne.n	8003a50 <HAL_RCC_OscConfig+0x90>
 8003a42:	4b7c      	ldr	r3, [pc, #496]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a7b      	ldr	r2, [pc, #492]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	e01d      	b.n	8003a8c <HAL_RCC_OscConfig+0xcc>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a58:	d10c      	bne.n	8003a74 <HAL_RCC_OscConfig+0xb4>
 8003a5a:	4b76      	ldr	r3, [pc, #472]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a75      	ldr	r2, [pc, #468]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	4b73      	ldr	r3, [pc, #460]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a72      	ldr	r2, [pc, #456]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	e00b      	b.n	8003a8c <HAL_RCC_OscConfig+0xcc>
 8003a74:	4b6f      	ldr	r3, [pc, #444]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a6e      	ldr	r2, [pc, #440]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	4b6c      	ldr	r3, [pc, #432]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a6b      	ldr	r2, [pc, #428]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d013      	beq.n	8003abc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a94:	f7fe f96a 	bl	8001d6c <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a9c:	f7fe f966 	bl	8001d6c <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b64      	cmp	r3, #100	; 0x64
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e21f      	b.n	8003eee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aae:	4b61      	ldr	r3, [pc, #388]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0f0      	beq.n	8003a9c <HAL_RCC_OscConfig+0xdc>
 8003aba:	e014      	b.n	8003ae6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abc:	f7fe f956 	bl	8001d6c <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ac4:	f7fe f952 	bl	8001d6c <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b64      	cmp	r3, #100	; 0x64
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e20b      	b.n	8003eee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad6:	4b57      	ldr	r3, [pc, #348]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f0      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x104>
 8003ae2:	e000      	b.n	8003ae6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d06f      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003af2:	4b50      	ldr	r3, [pc, #320]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 030c 	and.w	r3, r3, #12
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d017      	beq.n	8003b2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003afe:	4b4d      	ldr	r3, [pc, #308]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d105      	bne.n	8003b16 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b0a:	4b4a      	ldr	r3, [pc, #296]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00b      	beq.n	8003b2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b16:	4b47      	ldr	r3, [pc, #284]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b1e:	2b0c      	cmp	r3, #12
 8003b20:	d11c      	bne.n	8003b5c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b22:	4b44      	ldr	r3, [pc, #272]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d116      	bne.n	8003b5c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b2e:	4b41      	ldr	r3, [pc, #260]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_RCC_OscConfig+0x186>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d001      	beq.n	8003b46 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e1d3      	b.n	8003eee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b46:	4b3b      	ldr	r3, [pc, #236]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4937      	ldr	r1, [pc, #220]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b5a:	e03a      	b.n	8003bd2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d020      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b64:	4b34      	ldr	r3, [pc, #208]	; (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6a:	f7fe f8ff 	bl	8001d6c <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b72:	f7fe f8fb 	bl	8001d6c <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e1b4      	b.n	8003eee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b84:	4b2b      	ldr	r3, [pc, #172]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0f0      	beq.n	8003b72 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b90:	4b28      	ldr	r3, [pc, #160]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	4925      	ldr	r1, [pc, #148]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	600b      	str	r3, [r1, #0]
 8003ba4:	e015      	b.n	8003bd2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ba6:	4b24      	ldr	r3, [pc, #144]	; (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bac:	f7fe f8de 	bl	8001d6c <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bb4:	f7fe f8da 	bl	8001d6c <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e193      	b.n	8003eee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bc6:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d036      	beq.n	8003c4c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d016      	beq.n	8003c14 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003be6:	4b15      	ldr	r3, [pc, #84]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003be8:	2201      	movs	r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bec:	f7fe f8be 	bl	8001d6c <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bf4:	f7fe f8ba 	bl	8001d6c <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e173      	b.n	8003eee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c06:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x234>
 8003c12:	e01b      	b.n	8003c4c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c14:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1a:	f7fe f8a7 	bl	8001d6c <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c20:	e00e      	b.n	8003c40 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c22:	f7fe f8a3 	bl	8001d6c <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d907      	bls.n	8003c40 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e15c      	b.n	8003eee <HAL_RCC_OscConfig+0x52e>
 8003c34:	40023800 	.word	0x40023800
 8003c38:	42470000 	.word	0x42470000
 8003c3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c40:	4b8a      	ldr	r3, [pc, #552]	; (8003e6c <HAL_RCC_OscConfig+0x4ac>)
 8003c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1ea      	bne.n	8003c22 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 8097 	beq.w	8003d88 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c5e:	4b83      	ldr	r3, [pc, #524]	; (8003e6c <HAL_RCC_OscConfig+0x4ac>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10f      	bne.n	8003c8a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	4b7f      	ldr	r3, [pc, #508]	; (8003e6c <HAL_RCC_OscConfig+0x4ac>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	4a7e      	ldr	r2, [pc, #504]	; (8003e6c <HAL_RCC_OscConfig+0x4ac>)
 8003c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c78:	6413      	str	r3, [r2, #64]	; 0x40
 8003c7a:	4b7c      	ldr	r3, [pc, #496]	; (8003e6c <HAL_RCC_OscConfig+0x4ac>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c82:	60bb      	str	r3, [r7, #8]
 8003c84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c86:	2301      	movs	r3, #1
 8003c88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8a:	4b79      	ldr	r3, [pc, #484]	; (8003e70 <HAL_RCC_OscConfig+0x4b0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d118      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c96:	4b76      	ldr	r3, [pc, #472]	; (8003e70 <HAL_RCC_OscConfig+0x4b0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a75      	ldr	r2, [pc, #468]	; (8003e70 <HAL_RCC_OscConfig+0x4b0>)
 8003c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ca2:	f7fe f863 	bl	8001d6c <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003caa:	f7fe f85f 	bl	8001d6c <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e118      	b.n	8003eee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbc:	4b6c      	ldr	r3, [pc, #432]	; (8003e70 <HAL_RCC_OscConfig+0x4b0>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0f0      	beq.n	8003caa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d106      	bne.n	8003cde <HAL_RCC_OscConfig+0x31e>
 8003cd0:	4b66      	ldr	r3, [pc, #408]	; (8003e6c <HAL_RCC_OscConfig+0x4ac>)
 8003cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd4:	4a65      	ldr	r2, [pc, #404]	; (8003e6c <HAL_RCC_OscConfig+0x4ac>)
 8003cd6:	f043 0301 	orr.w	r3, r3, #1
 8003cda:	6713      	str	r3, [r2, #112]	; 0x70
 8003cdc:	e01c      	b.n	8003d18 <HAL_RCC_OscConfig+0x358>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2b05      	cmp	r3, #5
 8003ce4:	d10c      	bne.n	8003d00 <HAL_RCC_OscConfig+0x340>
 8003ce6:	4b61      	ldr	r3, [pc, #388]	; (8003e6c <HAL_RCC_OscConfig+0x4ac>)
 8003ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cea:	4a60      	ldr	r2, [pc, #384]	; (8003e6c <HAL_RCC_OscConfig+0x4ac>)
 8003cec:	f043 0304 	orr.w	r3, r3, #4
 8003cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf2:	4b5e      	ldr	r3, [pc, #376]	; (8003e6c <HAL_RCC_OscConfig+0x4ac>)
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf6:	4a5d      	ldr	r2, [pc, #372]	; (8003e6c <HAL_RCC_OscConfig+0x4ac>)
 8003cf8:	f043 0301 	orr.w	r3, r3, #1
 8003cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cfe:	e00b      	b.n	8003d18 <HAL_RCC_OscConfig+0x358>
 8003d00:	4b5a      	ldr	r3, [pc, #360]	; (8003e6c <HAL_RCC_OscConfig+0x4ac>)
 8003d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d04:	4a59      	ldr	r2, [pc, #356]	; (8003e6c <HAL_RCC_OscConfig+0x4ac>)
 8003d06:	f023 0301 	bic.w	r3, r3, #1
 8003d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0c:	4b57      	ldr	r3, [pc, #348]	; (8003e6c <HAL_RCC_OscConfig+0x4ac>)
 8003d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d10:	4a56      	ldr	r2, [pc, #344]	; (8003e6c <HAL_RCC_OscConfig+0x4ac>)
 8003d12:	f023 0304 	bic.w	r3, r3, #4
 8003d16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d015      	beq.n	8003d4c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d20:	f7fe f824 	bl	8001d6c <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d26:	e00a      	b.n	8003d3e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d28:	f7fe f820 	bl	8001d6c <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e0d7      	b.n	8003eee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d3e:	4b4b      	ldr	r3, [pc, #300]	; (8003e6c <HAL_RCC_OscConfig+0x4ac>)
 8003d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0ee      	beq.n	8003d28 <HAL_RCC_OscConfig+0x368>
 8003d4a:	e014      	b.n	8003d76 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4c:	f7fe f80e 	bl	8001d6c <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d52:	e00a      	b.n	8003d6a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d54:	f7fe f80a 	bl	8001d6c <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e0c1      	b.n	8003eee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d6a:	4b40      	ldr	r3, [pc, #256]	; (8003e6c <HAL_RCC_OscConfig+0x4ac>)
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1ee      	bne.n	8003d54 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d76:	7dfb      	ldrb	r3, [r7, #23]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d105      	bne.n	8003d88 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d7c:	4b3b      	ldr	r3, [pc, #236]	; (8003e6c <HAL_RCC_OscConfig+0x4ac>)
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	4a3a      	ldr	r2, [pc, #232]	; (8003e6c <HAL_RCC_OscConfig+0x4ac>)
 8003d82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 80ad 	beq.w	8003eec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d92:	4b36      	ldr	r3, [pc, #216]	; (8003e6c <HAL_RCC_OscConfig+0x4ac>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 030c 	and.w	r3, r3, #12
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d060      	beq.n	8003e60 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d145      	bne.n	8003e32 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da6:	4b33      	ldr	r3, [pc, #204]	; (8003e74 <HAL_RCC_OscConfig+0x4b4>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7fd ffde 	bl	8001d6c <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db4:	f7fd ffda 	bl	8001d6c <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e093      	b.n	8003eee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc6:	4b29      	ldr	r3, [pc, #164]	; (8003e6c <HAL_RCC_OscConfig+0x4ac>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f0      	bne.n	8003db4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69da      	ldr	r2, [r3, #28]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	019b      	lsls	r3, r3, #6
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de8:	085b      	lsrs	r3, r3, #1
 8003dea:	3b01      	subs	r3, #1
 8003dec:	041b      	lsls	r3, r3, #16
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	061b      	lsls	r3, r3, #24
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfc:	071b      	lsls	r3, r3, #28
 8003dfe:	491b      	ldr	r1, [pc, #108]	; (8003e6c <HAL_RCC_OscConfig+0x4ac>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e04:	4b1b      	ldr	r3, [pc, #108]	; (8003e74 <HAL_RCC_OscConfig+0x4b4>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0a:	f7fd ffaf 	bl	8001d6c <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e12:	f7fd ffab 	bl	8001d6c <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e064      	b.n	8003eee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e24:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <HAL_RCC_OscConfig+0x4ac>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0f0      	beq.n	8003e12 <HAL_RCC_OscConfig+0x452>
 8003e30:	e05c      	b.n	8003eec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e32:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <HAL_RCC_OscConfig+0x4b4>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e38:	f7fd ff98 	bl	8001d6c <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e40:	f7fd ff94 	bl	8001d6c <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e04d      	b.n	8003eee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e52:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <HAL_RCC_OscConfig+0x4ac>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1f0      	bne.n	8003e40 <HAL_RCC_OscConfig+0x480>
 8003e5e:	e045      	b.n	8003eec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d107      	bne.n	8003e78 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e040      	b.n	8003eee <HAL_RCC_OscConfig+0x52e>
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	40007000 	.word	0x40007000
 8003e74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e78:	4b1f      	ldr	r3, [pc, #124]	; (8003ef8 <HAL_RCC_OscConfig+0x538>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d030      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d129      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d122      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003eae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d119      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebe:	085b      	lsrs	r3, r3, #1
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d10f      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d107      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d001      	beq.n	8003eec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	40023800 	.word	0x40023800

08003efc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e041      	b.n	8003f92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fd fce0 	bl	80018e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3304      	adds	r3, #4
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	f000 f9b8 	bl	80042b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d109      	bne.n	8003fc0 <HAL_TIM_PWM_Start+0x24>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	bf14      	ite	ne
 8003fb8:	2301      	movne	r3, #1
 8003fba:	2300      	moveq	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	e022      	b.n	8004006 <HAL_TIM_PWM_Start+0x6a>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d109      	bne.n	8003fda <HAL_TIM_PWM_Start+0x3e>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	bf14      	ite	ne
 8003fd2:	2301      	movne	r3, #1
 8003fd4:	2300      	moveq	r3, #0
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	e015      	b.n	8004006 <HAL_TIM_PWM_Start+0x6a>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d109      	bne.n	8003ff4 <HAL_TIM_PWM_Start+0x58>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	bf14      	ite	ne
 8003fec:	2301      	movne	r3, #1
 8003fee:	2300      	moveq	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	e008      	b.n	8004006 <HAL_TIM_PWM_Start+0x6a>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	bf14      	ite	ne
 8004000:	2301      	movne	r3, #1
 8004002:	2300      	moveq	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e07c      	b.n	8004108 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d104      	bne.n	800401e <HAL_TIM_PWM_Start+0x82>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800401c:	e013      	b.n	8004046 <HAL_TIM_PWM_Start+0xaa>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b04      	cmp	r3, #4
 8004022:	d104      	bne.n	800402e <HAL_TIM_PWM_Start+0x92>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800402c:	e00b      	b.n	8004046 <HAL_TIM_PWM_Start+0xaa>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b08      	cmp	r3, #8
 8004032:	d104      	bne.n	800403e <HAL_TIM_PWM_Start+0xa2>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800403c:	e003      	b.n	8004046 <HAL_TIM_PWM_Start+0xaa>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2202      	movs	r2, #2
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2201      	movs	r2, #1
 800404c:	6839      	ldr	r1, [r7, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fb7e 	bl	8004750 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a2d      	ldr	r2, [pc, #180]	; (8004110 <HAL_TIM_PWM_Start+0x174>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d004      	beq.n	8004068 <HAL_TIM_PWM_Start+0xcc>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a2c      	ldr	r2, [pc, #176]	; (8004114 <HAL_TIM_PWM_Start+0x178>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d101      	bne.n	800406c <HAL_TIM_PWM_Start+0xd0>
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <HAL_TIM_PWM_Start+0xd2>
 800406c:	2300      	movs	r3, #0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004080:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a22      	ldr	r2, [pc, #136]	; (8004110 <HAL_TIM_PWM_Start+0x174>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d022      	beq.n	80040d2 <HAL_TIM_PWM_Start+0x136>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004094:	d01d      	beq.n	80040d2 <HAL_TIM_PWM_Start+0x136>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a1f      	ldr	r2, [pc, #124]	; (8004118 <HAL_TIM_PWM_Start+0x17c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d018      	beq.n	80040d2 <HAL_TIM_PWM_Start+0x136>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a1d      	ldr	r2, [pc, #116]	; (800411c <HAL_TIM_PWM_Start+0x180>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d013      	beq.n	80040d2 <HAL_TIM_PWM_Start+0x136>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1c      	ldr	r2, [pc, #112]	; (8004120 <HAL_TIM_PWM_Start+0x184>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d00e      	beq.n	80040d2 <HAL_TIM_PWM_Start+0x136>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a16      	ldr	r2, [pc, #88]	; (8004114 <HAL_TIM_PWM_Start+0x178>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d009      	beq.n	80040d2 <HAL_TIM_PWM_Start+0x136>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a18      	ldr	r2, [pc, #96]	; (8004124 <HAL_TIM_PWM_Start+0x188>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d004      	beq.n	80040d2 <HAL_TIM_PWM_Start+0x136>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a16      	ldr	r2, [pc, #88]	; (8004128 <HAL_TIM_PWM_Start+0x18c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d111      	bne.n	80040f6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b06      	cmp	r3, #6
 80040e2:	d010      	beq.n	8004106 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f4:	e007      	b.n	8004106 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0201 	orr.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40010000 	.word	0x40010000
 8004114:	40010400 	.word	0x40010400
 8004118:	40000400 	.word	0x40000400
 800411c:	40000800 	.word	0x40000800
 8004120:	40000c00 	.word	0x40000c00
 8004124:	40014000 	.word	0x40014000
 8004128:	40001800 	.word	0x40001800

0800412c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004138:	2300      	movs	r3, #0
 800413a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004142:	2b01      	cmp	r3, #1
 8004144:	d101      	bne.n	800414a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004146:	2302      	movs	r3, #2
 8004148:	e0ae      	b.n	80042a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b0c      	cmp	r3, #12
 8004156:	f200 809f 	bhi.w	8004298 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800415a:	a201      	add	r2, pc, #4	; (adr r2, 8004160 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800415c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004160:	08004195 	.word	0x08004195
 8004164:	08004299 	.word	0x08004299
 8004168:	08004299 	.word	0x08004299
 800416c:	08004299 	.word	0x08004299
 8004170:	080041d5 	.word	0x080041d5
 8004174:	08004299 	.word	0x08004299
 8004178:	08004299 	.word	0x08004299
 800417c:	08004299 	.word	0x08004299
 8004180:	08004217 	.word	0x08004217
 8004184:	08004299 	.word	0x08004299
 8004188:	08004299 	.word	0x08004299
 800418c:	08004299 	.word	0x08004299
 8004190:	08004257 	.word	0x08004257
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	4618      	mov	r0, r3
 800419c:	f000 f928 	bl	80043f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699a      	ldr	r2, [r3, #24]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f042 0208 	orr.w	r2, r2, #8
 80041ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0204 	bic.w	r2, r2, #4
 80041be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6999      	ldr	r1, [r3, #24]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	619a      	str	r2, [r3, #24]
      break;
 80041d2:	e064      	b.n	800429e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68b9      	ldr	r1, [r7, #8]
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 f978 	bl	80044d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699a      	ldr	r2, [r3, #24]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6999      	ldr	r1, [r3, #24]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	021a      	lsls	r2, r3, #8
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	619a      	str	r2, [r3, #24]
      break;
 8004214:	e043      	b.n	800429e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68b9      	ldr	r1, [r7, #8]
 800421c:	4618      	mov	r0, r3
 800421e:	f000 f9cd 	bl	80045bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69da      	ldr	r2, [r3, #28]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0208 	orr.w	r2, r2, #8
 8004230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69da      	ldr	r2, [r3, #28]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0204 	bic.w	r2, r2, #4
 8004240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69d9      	ldr	r1, [r3, #28]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	61da      	str	r2, [r3, #28]
      break;
 8004254:	e023      	b.n	800429e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68b9      	ldr	r1, [r7, #8]
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fa21 	bl	80046a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69da      	ldr	r2, [r3, #28]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69da      	ldr	r2, [r3, #28]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69d9      	ldr	r1, [r3, #28]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	021a      	lsls	r2, r3, #8
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	61da      	str	r2, [r3, #28]
      break;
 8004296:	e002      	b.n	800429e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	75fb      	strb	r3, [r7, #23]
      break;
 800429c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3718      	adds	r7, #24
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a40      	ldr	r2, [pc, #256]	; (80043c4 <TIM_Base_SetConfig+0x114>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d013      	beq.n	80042f0 <TIM_Base_SetConfig+0x40>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ce:	d00f      	beq.n	80042f0 <TIM_Base_SetConfig+0x40>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a3d      	ldr	r2, [pc, #244]	; (80043c8 <TIM_Base_SetConfig+0x118>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d00b      	beq.n	80042f0 <TIM_Base_SetConfig+0x40>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a3c      	ldr	r2, [pc, #240]	; (80043cc <TIM_Base_SetConfig+0x11c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d007      	beq.n	80042f0 <TIM_Base_SetConfig+0x40>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a3b      	ldr	r2, [pc, #236]	; (80043d0 <TIM_Base_SetConfig+0x120>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d003      	beq.n	80042f0 <TIM_Base_SetConfig+0x40>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a3a      	ldr	r2, [pc, #232]	; (80043d4 <TIM_Base_SetConfig+0x124>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d108      	bne.n	8004302 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a2f      	ldr	r2, [pc, #188]	; (80043c4 <TIM_Base_SetConfig+0x114>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d02b      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004310:	d027      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a2c      	ldr	r2, [pc, #176]	; (80043c8 <TIM_Base_SetConfig+0x118>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d023      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a2b      	ldr	r2, [pc, #172]	; (80043cc <TIM_Base_SetConfig+0x11c>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d01f      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a2a      	ldr	r2, [pc, #168]	; (80043d0 <TIM_Base_SetConfig+0x120>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d01b      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a29      	ldr	r2, [pc, #164]	; (80043d4 <TIM_Base_SetConfig+0x124>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d017      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a28      	ldr	r2, [pc, #160]	; (80043d8 <TIM_Base_SetConfig+0x128>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d013      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a27      	ldr	r2, [pc, #156]	; (80043dc <TIM_Base_SetConfig+0x12c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d00f      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a26      	ldr	r2, [pc, #152]	; (80043e0 <TIM_Base_SetConfig+0x130>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00b      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a25      	ldr	r2, [pc, #148]	; (80043e4 <TIM_Base_SetConfig+0x134>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d007      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a24      	ldr	r2, [pc, #144]	; (80043e8 <TIM_Base_SetConfig+0x138>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d003      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a23      	ldr	r2, [pc, #140]	; (80043ec <TIM_Base_SetConfig+0x13c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d108      	bne.n	8004374 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	4313      	orrs	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a0a      	ldr	r2, [pc, #40]	; (80043c4 <TIM_Base_SetConfig+0x114>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d003      	beq.n	80043a8 <TIM_Base_SetConfig+0xf8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a0c      	ldr	r2, [pc, #48]	; (80043d4 <TIM_Base_SetConfig+0x124>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d103      	bne.n	80043b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	615a      	str	r2, [r3, #20]
}
 80043b6:	bf00      	nop
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	40010000 	.word	0x40010000
 80043c8:	40000400 	.word	0x40000400
 80043cc:	40000800 	.word	0x40000800
 80043d0:	40000c00 	.word	0x40000c00
 80043d4:	40010400 	.word	0x40010400
 80043d8:	40014000 	.word	0x40014000
 80043dc:	40014400 	.word	0x40014400
 80043e0:	40014800 	.word	0x40014800
 80043e4:	40001800 	.word	0x40001800
 80043e8:	40001c00 	.word	0x40001c00
 80043ec:	40002000 	.word	0x40002000

080043f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	f023 0201 	bic.w	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0303 	bic.w	r3, r3, #3
 8004426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f023 0302 	bic.w	r3, r3, #2
 8004438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	4313      	orrs	r3, r2
 8004442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a20      	ldr	r2, [pc, #128]	; (80044c8 <TIM_OC1_SetConfig+0xd8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d003      	beq.n	8004454 <TIM_OC1_SetConfig+0x64>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a1f      	ldr	r2, [pc, #124]	; (80044cc <TIM_OC1_SetConfig+0xdc>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d10c      	bne.n	800446e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f023 0308 	bic.w	r3, r3, #8
 800445a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f023 0304 	bic.w	r3, r3, #4
 800446c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a15      	ldr	r2, [pc, #84]	; (80044c8 <TIM_OC1_SetConfig+0xd8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d003      	beq.n	800447e <TIM_OC1_SetConfig+0x8e>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a14      	ldr	r2, [pc, #80]	; (80044cc <TIM_OC1_SetConfig+0xdc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d111      	bne.n	80044a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800448c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	4313      	orrs	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	621a      	str	r2, [r3, #32]
}
 80044bc:	bf00      	nop
 80044be:	371c      	adds	r7, #28
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	40010000 	.word	0x40010000
 80044cc:	40010400 	.word	0x40010400

080044d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	f023 0210 	bic.w	r2, r3, #16
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	021b      	lsls	r3, r3, #8
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f023 0320 	bic.w	r3, r3, #32
 800451a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4313      	orrs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a22      	ldr	r2, [pc, #136]	; (80045b4 <TIM_OC2_SetConfig+0xe4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d003      	beq.n	8004538 <TIM_OC2_SetConfig+0x68>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a21      	ldr	r2, [pc, #132]	; (80045b8 <TIM_OC2_SetConfig+0xe8>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d10d      	bne.n	8004554 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800453e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004552:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a17      	ldr	r2, [pc, #92]	; (80045b4 <TIM_OC2_SetConfig+0xe4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d003      	beq.n	8004564 <TIM_OC2_SetConfig+0x94>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a16      	ldr	r2, [pc, #88]	; (80045b8 <TIM_OC2_SetConfig+0xe8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d113      	bne.n	800458c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800456a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004572:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4313      	orrs	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	621a      	str	r2, [r3, #32]
}
 80045a6:	bf00      	nop
 80045a8:	371c      	adds	r7, #28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40010000 	.word	0x40010000
 80045b8:	40010400 	.word	0x40010400

080045bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0303 	bic.w	r3, r3, #3
 80045f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	021b      	lsls	r3, r3, #8
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a21      	ldr	r2, [pc, #132]	; (800469c <TIM_OC3_SetConfig+0xe0>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d003      	beq.n	8004622 <TIM_OC3_SetConfig+0x66>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a20      	ldr	r2, [pc, #128]	; (80046a0 <TIM_OC3_SetConfig+0xe4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d10d      	bne.n	800463e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004628:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	4313      	orrs	r3, r2
 8004634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800463c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a16      	ldr	r2, [pc, #88]	; (800469c <TIM_OC3_SetConfig+0xe0>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d003      	beq.n	800464e <TIM_OC3_SetConfig+0x92>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a15      	ldr	r2, [pc, #84]	; (80046a0 <TIM_OC3_SetConfig+0xe4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d113      	bne.n	8004676 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800465c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	4313      	orrs	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	621a      	str	r2, [r3, #32]
}
 8004690:	bf00      	nop
 8004692:	371c      	adds	r7, #28
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	40010000 	.word	0x40010000
 80046a0:	40010400 	.word	0x40010400

080046a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	021b      	lsls	r3, r3, #8
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	031b      	lsls	r3, r3, #12
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a12      	ldr	r2, [pc, #72]	; (8004748 <TIM_OC4_SetConfig+0xa4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d003      	beq.n	800470c <TIM_OC4_SetConfig+0x68>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a11      	ldr	r2, [pc, #68]	; (800474c <TIM_OC4_SetConfig+0xa8>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d109      	bne.n	8004720 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004712:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	019b      	lsls	r3, r3, #6
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	4313      	orrs	r3, r2
 800471e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	621a      	str	r2, [r3, #32]
}
 800473a:	bf00      	nop
 800473c:	371c      	adds	r7, #28
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40010000 	.word	0x40010000
 800474c:	40010400 	.word	0x40010400

08004750 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f003 031f 	and.w	r3, r3, #31
 8004762:	2201      	movs	r2, #1
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a1a      	ldr	r2, [r3, #32]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	43db      	mvns	r3, r3
 8004772:	401a      	ands	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a1a      	ldr	r2, [r3, #32]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f003 031f 	and.w	r3, r3, #31
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	fa01 f303 	lsl.w	r3, r1, r3
 8004788:	431a      	orrs	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	621a      	str	r2, [r3, #32]
}
 800478e:	bf00      	nop
 8004790:	371c      	adds	r7, #28
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
	...

0800479c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e05a      	b.n	800486a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a21      	ldr	r2, [pc, #132]	; (8004878 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d022      	beq.n	800483e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004800:	d01d      	beq.n	800483e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1d      	ldr	r2, [pc, #116]	; (800487c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d018      	beq.n	800483e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a1b      	ldr	r2, [pc, #108]	; (8004880 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d013      	beq.n	800483e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1a      	ldr	r2, [pc, #104]	; (8004884 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d00e      	beq.n	800483e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a18      	ldr	r2, [pc, #96]	; (8004888 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d009      	beq.n	800483e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a17      	ldr	r2, [pc, #92]	; (800488c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d004      	beq.n	800483e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a15      	ldr	r2, [pc, #84]	; (8004890 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d10c      	bne.n	8004858 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004844:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	4313      	orrs	r3, r2
 800484e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	40010000 	.word	0x40010000
 800487c:	40000400 	.word	0x40000400
 8004880:	40000800 	.word	0x40000800
 8004884:	40000c00 	.word	0x40000c00
 8004888:	40010400 	.word	0x40010400
 800488c:	40014000 	.word	0x40014000
 8004890:	40001800 	.word	0x40001800

08004894 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e03f      	b.n	8004926 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fd f836 	bl	800192c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2224      	movs	r2, #36	; 0x24
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f929 	bl	8004b30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695a      	ldr	r2, [r3, #20]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800490c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b08a      	sub	sp, #40	; 0x28
 8004932:	af02      	add	r7, sp, #8
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	60b9      	str	r1, [r7, #8]
 8004938:	603b      	str	r3, [r7, #0]
 800493a:	4613      	mov	r3, r2
 800493c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b20      	cmp	r3, #32
 800494c:	d17c      	bne.n	8004a48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <HAL_UART_Transmit+0x2c>
 8004954:	88fb      	ldrh	r3, [r7, #6]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e075      	b.n	8004a4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_UART_Transmit+0x3e>
 8004968:	2302      	movs	r3, #2
 800496a:	e06e      	b.n	8004a4a <HAL_UART_Transmit+0x11c>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2221      	movs	r2, #33	; 0x21
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004982:	f7fd f9f3 	bl	8001d6c <HAL_GetTick>
 8004986:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	88fa      	ldrh	r2, [r7, #6]
 800498c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	88fa      	ldrh	r2, [r7, #6]
 8004992:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800499c:	d108      	bne.n	80049b0 <HAL_UART_Transmit+0x82>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d104      	bne.n	80049b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	e003      	b.n	80049b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049b4:	2300      	movs	r3, #0
 80049b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80049c0:	e02a      	b.n	8004a18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2200      	movs	r2, #0
 80049ca:	2180      	movs	r1, #128	; 0x80
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 f840 	bl	8004a52 <UART_WaitOnFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e036      	b.n	8004a4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10b      	bne.n	80049fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	461a      	mov	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	3302      	adds	r3, #2
 80049f6:	61bb      	str	r3, [r7, #24]
 80049f8:	e007      	b.n	8004a0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	781a      	ldrb	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	3301      	adds	r3, #1
 8004a08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1cf      	bne.n	80049c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	2140      	movs	r1, #64	; 0x40
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 f810 	bl	8004a52 <UART_WaitOnFlagUntilTimeout>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e006      	b.n	8004a4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	e000      	b.n	8004a4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a48:	2302      	movs	r3, #2
  }
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3720      	adds	r7, #32
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b090      	sub	sp, #64	; 0x40
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	603b      	str	r3, [r7, #0]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a62:	e050      	b.n	8004b06 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6a:	d04c      	beq.n	8004b06 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d007      	beq.n	8004a82 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a72:	f7fd f97b 	bl	8001d6c <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d241      	bcs.n	8004b06 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	330c      	adds	r3, #12
 8004a88:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	e853 3f00 	ldrex	r3, [r3]
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	330c      	adds	r3, #12
 8004aa0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004aa2:	637a      	str	r2, [r7, #52]	; 0x34
 8004aa4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004aa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aaa:	e841 2300 	strex	r3, r2, [r1]
 8004aae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1e5      	bne.n	8004a82 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	3314      	adds	r3, #20
 8004abc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	e853 3f00 	ldrex	r3, [r3]
 8004ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f023 0301 	bic.w	r3, r3, #1
 8004acc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3314      	adds	r3, #20
 8004ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ad6:	623a      	str	r2, [r7, #32]
 8004ad8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ada:	69f9      	ldr	r1, [r7, #28]
 8004adc:	6a3a      	ldr	r2, [r7, #32]
 8004ade:	e841 2300 	strex	r3, r2, [r1]
 8004ae2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1e5      	bne.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2220      	movs	r2, #32
 8004aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e00f      	b.n	8004b26 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	bf0c      	ite	eq
 8004b16:	2301      	moveq	r3, #1
 8004b18:	2300      	movne	r3, #0
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	79fb      	ldrb	r3, [r7, #7]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d09f      	beq.n	8004a64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3740      	adds	r7, #64	; 0x40
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b34:	b0c0      	sub	sp, #256	; 0x100
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4c:	68d9      	ldr	r1, [r3, #12]
 8004b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	ea40 0301 	orr.w	r3, r0, r1
 8004b58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b88:	f021 010c 	bic.w	r1, r1, #12
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b96:	430b      	orrs	r3, r1
 8004b98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004baa:	6999      	ldr	r1, [r3, #24]
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	ea40 0301 	orr.w	r3, r0, r1
 8004bb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	4b8f      	ldr	r3, [pc, #572]	; (8004dfc <UART_SetConfig+0x2cc>)
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d005      	beq.n	8004bd0 <UART_SetConfig+0xa0>
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	4b8d      	ldr	r3, [pc, #564]	; (8004e00 <UART_SetConfig+0x2d0>)
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d104      	bne.n	8004bda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bd0:	f7fe fcb2 	bl	8003538 <HAL_RCC_GetPCLK2Freq>
 8004bd4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004bd8:	e003      	b.n	8004be2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bda:	f7fe fc99 	bl	8003510 <HAL_RCC_GetPCLK1Freq>
 8004bde:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bec:	f040 810c 	bne.w	8004e08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004bfa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004bfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c02:	4622      	mov	r2, r4
 8004c04:	462b      	mov	r3, r5
 8004c06:	1891      	adds	r1, r2, r2
 8004c08:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c0a:	415b      	adcs	r3, r3
 8004c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c12:	4621      	mov	r1, r4
 8004c14:	eb12 0801 	adds.w	r8, r2, r1
 8004c18:	4629      	mov	r1, r5
 8004c1a:	eb43 0901 	adc.w	r9, r3, r1
 8004c1e:	f04f 0200 	mov.w	r2, #0
 8004c22:	f04f 0300 	mov.w	r3, #0
 8004c26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c32:	4690      	mov	r8, r2
 8004c34:	4699      	mov	r9, r3
 8004c36:	4623      	mov	r3, r4
 8004c38:	eb18 0303 	adds.w	r3, r8, r3
 8004c3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c40:	462b      	mov	r3, r5
 8004c42:	eb49 0303 	adc.w	r3, r9, r3
 8004c46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c5e:	460b      	mov	r3, r1
 8004c60:	18db      	adds	r3, r3, r3
 8004c62:	653b      	str	r3, [r7, #80]	; 0x50
 8004c64:	4613      	mov	r3, r2
 8004c66:	eb42 0303 	adc.w	r3, r2, r3
 8004c6a:	657b      	str	r3, [r7, #84]	; 0x54
 8004c6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c74:	f7fc f828 	bl	8000cc8 <__aeabi_uldivmod>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4b61      	ldr	r3, [pc, #388]	; (8004e04 <UART_SetConfig+0x2d4>)
 8004c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c82:	095b      	lsrs	r3, r3, #5
 8004c84:	011c      	lsls	r4, r3, #4
 8004c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c98:	4642      	mov	r2, r8
 8004c9a:	464b      	mov	r3, r9
 8004c9c:	1891      	adds	r1, r2, r2
 8004c9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ca0:	415b      	adcs	r3, r3
 8004ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ca4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ca8:	4641      	mov	r1, r8
 8004caa:	eb12 0a01 	adds.w	sl, r2, r1
 8004cae:	4649      	mov	r1, r9
 8004cb0:	eb43 0b01 	adc.w	fp, r3, r1
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cc8:	4692      	mov	sl, r2
 8004cca:	469b      	mov	fp, r3
 8004ccc:	4643      	mov	r3, r8
 8004cce:	eb1a 0303 	adds.w	r3, sl, r3
 8004cd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cd6:	464b      	mov	r3, r9
 8004cd8:	eb4b 0303 	adc.w	r3, fp, r3
 8004cdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004cf0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	18db      	adds	r3, r3, r3
 8004cf8:	643b      	str	r3, [r7, #64]	; 0x40
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	eb42 0303 	adc.w	r3, r2, r3
 8004d00:	647b      	str	r3, [r7, #68]	; 0x44
 8004d02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d0a:	f7fb ffdd 	bl	8000cc8 <__aeabi_uldivmod>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	4611      	mov	r1, r2
 8004d14:	4b3b      	ldr	r3, [pc, #236]	; (8004e04 <UART_SetConfig+0x2d4>)
 8004d16:	fba3 2301 	umull	r2, r3, r3, r1
 8004d1a:	095b      	lsrs	r3, r3, #5
 8004d1c:	2264      	movs	r2, #100	; 0x64
 8004d1e:	fb02 f303 	mul.w	r3, r2, r3
 8004d22:	1acb      	subs	r3, r1, r3
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d2a:	4b36      	ldr	r3, [pc, #216]	; (8004e04 <UART_SetConfig+0x2d4>)
 8004d2c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d30:	095b      	lsrs	r3, r3, #5
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d38:	441c      	add	r4, r3
 8004d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d4c:	4642      	mov	r2, r8
 8004d4e:	464b      	mov	r3, r9
 8004d50:	1891      	adds	r1, r2, r2
 8004d52:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d54:	415b      	adcs	r3, r3
 8004d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d5c:	4641      	mov	r1, r8
 8004d5e:	1851      	adds	r1, r2, r1
 8004d60:	6339      	str	r1, [r7, #48]	; 0x30
 8004d62:	4649      	mov	r1, r9
 8004d64:	414b      	adcs	r3, r1
 8004d66:	637b      	str	r3, [r7, #52]	; 0x34
 8004d68:	f04f 0200 	mov.w	r2, #0
 8004d6c:	f04f 0300 	mov.w	r3, #0
 8004d70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d74:	4659      	mov	r1, fp
 8004d76:	00cb      	lsls	r3, r1, #3
 8004d78:	4651      	mov	r1, sl
 8004d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d7e:	4651      	mov	r1, sl
 8004d80:	00ca      	lsls	r2, r1, #3
 8004d82:	4610      	mov	r0, r2
 8004d84:	4619      	mov	r1, r3
 8004d86:	4603      	mov	r3, r0
 8004d88:	4642      	mov	r2, r8
 8004d8a:	189b      	adds	r3, r3, r2
 8004d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d90:	464b      	mov	r3, r9
 8004d92:	460a      	mov	r2, r1
 8004d94:	eb42 0303 	adc.w	r3, r2, r3
 8004d98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004da8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004dac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004db0:	460b      	mov	r3, r1
 8004db2:	18db      	adds	r3, r3, r3
 8004db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db6:	4613      	mov	r3, r2
 8004db8:	eb42 0303 	adc.w	r3, r2, r3
 8004dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004dc6:	f7fb ff7f 	bl	8000cc8 <__aeabi_uldivmod>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4b0d      	ldr	r3, [pc, #52]	; (8004e04 <UART_SetConfig+0x2d4>)
 8004dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8004dd4:	095b      	lsrs	r3, r3, #5
 8004dd6:	2164      	movs	r1, #100	; 0x64
 8004dd8:	fb01 f303 	mul.w	r3, r1, r3
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	3332      	adds	r3, #50	; 0x32
 8004de2:	4a08      	ldr	r2, [pc, #32]	; (8004e04 <UART_SetConfig+0x2d4>)
 8004de4:	fba2 2303 	umull	r2, r3, r2, r3
 8004de8:	095b      	lsrs	r3, r3, #5
 8004dea:	f003 0207 	and.w	r2, r3, #7
 8004dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4422      	add	r2, r4
 8004df6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004df8:	e105      	b.n	8005006 <UART_SetConfig+0x4d6>
 8004dfa:	bf00      	nop
 8004dfc:	40011000 	.word	0x40011000
 8004e00:	40011400 	.word	0x40011400
 8004e04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e1a:	4642      	mov	r2, r8
 8004e1c:	464b      	mov	r3, r9
 8004e1e:	1891      	adds	r1, r2, r2
 8004e20:	6239      	str	r1, [r7, #32]
 8004e22:	415b      	adcs	r3, r3
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
 8004e26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e2a:	4641      	mov	r1, r8
 8004e2c:	1854      	adds	r4, r2, r1
 8004e2e:	4649      	mov	r1, r9
 8004e30:	eb43 0501 	adc.w	r5, r3, r1
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	00eb      	lsls	r3, r5, #3
 8004e3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e42:	00e2      	lsls	r2, r4, #3
 8004e44:	4614      	mov	r4, r2
 8004e46:	461d      	mov	r5, r3
 8004e48:	4643      	mov	r3, r8
 8004e4a:	18e3      	adds	r3, r4, r3
 8004e4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e50:	464b      	mov	r3, r9
 8004e52:	eb45 0303 	adc.w	r3, r5, r3
 8004e56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e6a:	f04f 0200 	mov.w	r2, #0
 8004e6e:	f04f 0300 	mov.w	r3, #0
 8004e72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e76:	4629      	mov	r1, r5
 8004e78:	008b      	lsls	r3, r1, #2
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e80:	4621      	mov	r1, r4
 8004e82:	008a      	lsls	r2, r1, #2
 8004e84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e88:	f7fb ff1e 	bl	8000cc8 <__aeabi_uldivmod>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4b60      	ldr	r3, [pc, #384]	; (8005014 <UART_SetConfig+0x4e4>)
 8004e92:	fba3 2302 	umull	r2, r3, r3, r2
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	011c      	lsls	r4, r3, #4
 8004e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ea4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ea8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004eac:	4642      	mov	r2, r8
 8004eae:	464b      	mov	r3, r9
 8004eb0:	1891      	adds	r1, r2, r2
 8004eb2:	61b9      	str	r1, [r7, #24]
 8004eb4:	415b      	adcs	r3, r3
 8004eb6:	61fb      	str	r3, [r7, #28]
 8004eb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ebc:	4641      	mov	r1, r8
 8004ebe:	1851      	adds	r1, r2, r1
 8004ec0:	6139      	str	r1, [r7, #16]
 8004ec2:	4649      	mov	r1, r9
 8004ec4:	414b      	adcs	r3, r1
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ed4:	4659      	mov	r1, fp
 8004ed6:	00cb      	lsls	r3, r1, #3
 8004ed8:	4651      	mov	r1, sl
 8004eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ede:	4651      	mov	r1, sl
 8004ee0:	00ca      	lsls	r2, r1, #3
 8004ee2:	4610      	mov	r0, r2
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	4642      	mov	r2, r8
 8004eea:	189b      	adds	r3, r3, r2
 8004eec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ef0:	464b      	mov	r3, r9
 8004ef2:	460a      	mov	r2, r1
 8004ef4:	eb42 0303 	adc.w	r3, r2, r3
 8004ef8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f14:	4649      	mov	r1, r9
 8004f16:	008b      	lsls	r3, r1, #2
 8004f18:	4641      	mov	r1, r8
 8004f1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f1e:	4641      	mov	r1, r8
 8004f20:	008a      	lsls	r2, r1, #2
 8004f22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f26:	f7fb fecf 	bl	8000cc8 <__aeabi_uldivmod>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	4b39      	ldr	r3, [pc, #228]	; (8005014 <UART_SetConfig+0x4e4>)
 8004f30:	fba3 1302 	umull	r1, r3, r3, r2
 8004f34:	095b      	lsrs	r3, r3, #5
 8004f36:	2164      	movs	r1, #100	; 0x64
 8004f38:	fb01 f303 	mul.w	r3, r1, r3
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	3332      	adds	r3, #50	; 0x32
 8004f42:	4a34      	ldr	r2, [pc, #208]	; (8005014 <UART_SetConfig+0x4e4>)
 8004f44:	fba2 2303 	umull	r2, r3, r2, r3
 8004f48:	095b      	lsrs	r3, r3, #5
 8004f4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f4e:	441c      	add	r4, r3
 8004f50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f54:	2200      	movs	r2, #0
 8004f56:	673b      	str	r3, [r7, #112]	; 0x70
 8004f58:	677a      	str	r2, [r7, #116]	; 0x74
 8004f5a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f5e:	4642      	mov	r2, r8
 8004f60:	464b      	mov	r3, r9
 8004f62:	1891      	adds	r1, r2, r2
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	415b      	adcs	r3, r3
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f6e:	4641      	mov	r1, r8
 8004f70:	1851      	adds	r1, r2, r1
 8004f72:	6039      	str	r1, [r7, #0]
 8004f74:	4649      	mov	r1, r9
 8004f76:	414b      	adcs	r3, r1
 8004f78:	607b      	str	r3, [r7, #4]
 8004f7a:	f04f 0200 	mov.w	r2, #0
 8004f7e:	f04f 0300 	mov.w	r3, #0
 8004f82:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f86:	4659      	mov	r1, fp
 8004f88:	00cb      	lsls	r3, r1, #3
 8004f8a:	4651      	mov	r1, sl
 8004f8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f90:	4651      	mov	r1, sl
 8004f92:	00ca      	lsls	r2, r1, #3
 8004f94:	4610      	mov	r0, r2
 8004f96:	4619      	mov	r1, r3
 8004f98:	4603      	mov	r3, r0
 8004f9a:	4642      	mov	r2, r8
 8004f9c:	189b      	adds	r3, r3, r2
 8004f9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fa0:	464b      	mov	r3, r9
 8004fa2:	460a      	mov	r2, r1
 8004fa4:	eb42 0303 	adc.w	r3, r2, r3
 8004fa8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	663b      	str	r3, [r7, #96]	; 0x60
 8004fb4:	667a      	str	r2, [r7, #100]	; 0x64
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004fc2:	4649      	mov	r1, r9
 8004fc4:	008b      	lsls	r3, r1, #2
 8004fc6:	4641      	mov	r1, r8
 8004fc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fcc:	4641      	mov	r1, r8
 8004fce:	008a      	lsls	r2, r1, #2
 8004fd0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004fd4:	f7fb fe78 	bl	8000cc8 <__aeabi_uldivmod>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <UART_SetConfig+0x4e4>)
 8004fde:	fba3 1302 	umull	r1, r3, r3, r2
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	2164      	movs	r1, #100	; 0x64
 8004fe6:	fb01 f303 	mul.w	r3, r1, r3
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	3332      	adds	r3, #50	; 0x32
 8004ff0:	4a08      	ldr	r2, [pc, #32]	; (8005014 <UART_SetConfig+0x4e4>)
 8004ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	f003 020f 	and.w	r2, r3, #15
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4422      	add	r2, r4
 8005004:	609a      	str	r2, [r3, #8]
}
 8005006:	bf00      	nop
 8005008:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800500c:	46bd      	mov	sp, r7
 800500e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005012:	bf00      	nop
 8005014:	51eb851f 	.word	0x51eb851f

08005018 <arm_max_f32>:
 8005018:	f101 3cff 	add.w	ip, r1, #4294967295
 800501c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800501e:	4607      	mov	r7, r0
 8005020:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 8005024:	ecf7 7a01 	vldmia	r7!, {s15}
 8005028:	d060      	beq.n	80050ec <arm_max_f32+0xd4>
 800502a:	2400      	movs	r4, #0
 800502c:	3014      	adds	r0, #20
 800502e:	4625      	mov	r5, r4
 8005030:	ea4f 068e 	mov.w	r6, lr, lsl #2
 8005034:	ed10 7a04 	vldr	s14, [r0, #-16]
 8005038:	eef4 7ac7 	vcmpe.f32	s15, s14
 800503c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005040:	bf48      	it	mi
 8005042:	eef0 7a47 	vmovmi.f32	s15, s14
 8005046:	ed10 7a03 	vldr	s14, [r0, #-12]
 800504a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800504e:	bf48      	it	mi
 8005050:	1c65      	addmi	r5, r4, #1
 8005052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005056:	bf48      	it	mi
 8005058:	eef0 7a47 	vmovmi.f32	s15, s14
 800505c:	ed10 7a02 	vldr	s14, [r0, #-8]
 8005060:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005064:	bf48      	it	mi
 8005066:	1ca5      	addmi	r5, r4, #2
 8005068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800506c:	bf48      	it	mi
 800506e:	eef0 7a47 	vmovmi.f32	s15, s14
 8005072:	ed10 7a01 	vldr	s14, [r0, #-4]
 8005076:	eef4 7ac7 	vcmpe.f32	s15, s14
 800507a:	bf48      	it	mi
 800507c:	1ce5      	addmi	r5, r4, #3
 800507e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005082:	f104 0404 	add.w	r4, r4, #4
 8005086:	bf44      	itt	mi
 8005088:	eef0 7a47 	vmovmi.f32	s15, s14
 800508c:	4625      	movmi	r5, r4
 800508e:	42a6      	cmp	r6, r4
 8005090:	f100 0010 	add.w	r0, r0, #16
 8005094:	d1ce      	bne.n	8005034 <arm_max_f32+0x1c>
 8005096:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800509a:	f01c 0003 	ands.w	r0, ip, #3
 800509e:	d021      	beq.n	80050e4 <arm_max_f32+0xcc>
 80050a0:	ed97 7a00 	vldr	s14, [r7]
 80050a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ac:	bfc4      	itt	gt
 80050ae:	eef0 7a47 	vmovgt.f32	s15, s14
 80050b2:	1a0d      	subgt	r5, r1, r0
 80050b4:	3801      	subs	r0, #1
 80050b6:	d015      	beq.n	80050e4 <arm_max_f32+0xcc>
 80050b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80050bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c4:	bf44      	itt	mi
 80050c6:	eef0 7a47 	vmovmi.f32	s15, s14
 80050ca:	1a0d      	submi	r5, r1, r0
 80050cc:	2801      	cmp	r0, #1
 80050ce:	d009      	beq.n	80050e4 <arm_max_f32+0xcc>
 80050d0:	ed97 7a02 	vldr	s14, [r7, #8]
 80050d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050dc:	bfc4      	itt	gt
 80050de:	eef0 7a47 	vmovgt.f32	s15, s14
 80050e2:	4665      	movgt	r5, ip
 80050e4:	edc2 7a00 	vstr	s15, [r2]
 80050e8:	601d      	str	r5, [r3, #0]
 80050ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050ec:	4675      	mov	r5, lr
 80050ee:	e7d4      	b.n	800509a <arm_max_f32+0x82>

080050f0 <arm_cfft_radix4_init_f32>:
 80050f0:	b410      	push	{r4}
 80050f2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80050f6:	4c27      	ldr	r4, [pc, #156]	; (8005194 <arm_cfft_radix4_init_f32+0xa4>)
 80050f8:	7082      	strb	r2, [r0, #2]
 80050fa:	70c3      	strb	r3, [r0, #3]
 80050fc:	8001      	strh	r1, [r0, #0]
 80050fe:	6044      	str	r4, [r0, #4]
 8005100:	d027      	beq.n	8005152 <arm_cfft_radix4_init_f32+0x62>
 8005102:	d911      	bls.n	8005128 <arm_cfft_radix4_init_f32+0x38>
 8005104:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005108:	d02f      	beq.n	800516a <arm_cfft_radix4_init_f32+0x7a>
 800510a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800510e:	d11b      	bne.n	8005148 <arm_cfft_radix4_init_f32+0x58>
 8005110:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8005114:	4b20      	ldr	r3, [pc, #128]	; (8005198 <arm_cfft_radix4_init_f32+0xa8>)
 8005116:	6102      	str	r2, [r0, #16]
 8005118:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800511c:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8005120:	2000      	movs	r0, #0
 8005122:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	2910      	cmp	r1, #16
 800512a:	d028      	beq.n	800517e <arm_cfft_radix4_init_f32+0x8e>
 800512c:	2940      	cmp	r1, #64	; 0x40
 800512e:	d10b      	bne.n	8005148 <arm_cfft_radix4_init_f32+0x58>
 8005130:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 8005134:	4b19      	ldr	r3, [pc, #100]	; (800519c <arm_cfft_radix4_init_f32+0xac>)
 8005136:	6102      	str	r2, [r0, #16]
 8005138:	f04f 1240 	mov.w	r2, #4194368	; 0x400040
 800513c:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8005140:	2000      	movs	r0, #0
 8005142:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	f04f 30ff 	mov.w	r0, #4294967295
 800514c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	f04f 526e 	mov.w	r2, #998244352	; 0x3b800000
 8005156:	4b12      	ldr	r3, [pc, #72]	; (80051a0 <arm_cfft_radix4_init_f32+0xb0>)
 8005158:	6102      	str	r2, [r0, #16]
 800515a:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
 800515e:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8005162:	2000      	movs	r0, #0
 8005164:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 800516e:	4b0d      	ldr	r3, [pc, #52]	; (80051a4 <arm_cfft_radix4_init_f32+0xb4>)
 8005170:	6102      	str	r2, [r0, #16]
 8005172:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 8005176:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800517a:	2000      	movs	r0, #0
 800517c:	e7d1      	b.n	8005122 <arm_cfft_radix4_init_f32+0x32>
 800517e:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 8005182:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <arm_cfft_radix4_init_f32+0xb8>)
 8005184:	6102      	str	r2, [r0, #16]
 8005186:	f04f 2201 	mov.w	r2, #16777472	; 0x1000100
 800518a:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800518e:	2000      	movs	r0, #0
 8005190:	e7c7      	b.n	8005122 <arm_cfft_radix4_init_f32+0x32>
 8005192:	bf00      	nop
 8005194:	0800aef8 	.word	0x0800aef8
 8005198:	0800a6f8 	.word	0x0800a6f8
 800519c:	0800a776 	.word	0x0800a776
 80051a0:	0800a716 	.word	0x0800a716
 80051a4:	0800a6fe 	.word	0x0800a6fe
 80051a8:	0800a8f6 	.word	0x0800a8f6

080051ac <arm_radix4_butterfly_f32>:
 80051ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b0:	ed2d 8b06 	vpush	{d8-d10}
 80051b4:	088c      	lsrs	r4, r1, #2
 80051b6:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80051ba:	461d      	mov	r5, r3
 80051bc:	b08d      	sub	sp, #52	; 0x34
 80051be:	468a      	mov	sl, r1
 80051c0:	eb00 0109 	add.w	r1, r0, r9
 80051c4:	1d16      	adds	r6, r2, #4
 80051c6:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80051ca:	eb01 0209 	add.w	r2, r1, r9
 80051ce:	9402      	str	r4, [sp, #8]
 80051d0:	9009      	str	r0, [sp, #36]	; 0x24
 80051d2:	9301      	str	r3, [sp, #4]
 80051d4:	46a3      	mov	fp, r4
 80051d6:	4603      	mov	r3, r0
 80051d8:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 80051dc:	ea4f 0cc5 	mov.w	ip, r5, lsl #3
 80051e0:	960a      	str	r6, [sp, #40]	; 0x28
 80051e2:	eb02 0009 	add.w	r0, r2, r9
 80051e6:	4688      	mov	r8, r1
 80051e8:	00ff      	lsls	r7, r7, #3
 80051ea:	4634      	mov	r4, r6
 80051ec:	4635      	mov	r5, r6
 80051ee:	ed93 7a00 	vldr	s14, [r3]
 80051f2:	ed92 1a00 	vldr	s2, [r2]
 80051f6:	edd0 1a00 	vldr	s3, [r0]
 80051fa:	ed92 2a01 	vldr	s4, [r2, #4]
 80051fe:	edd0 2a01 	vldr	s5, [r0, #4]
 8005202:	edd3 3a01 	vldr	s7, [r3, #4]
 8005206:	edd1 7a00 	vldr	s15, [r1]
 800520a:	edd1 5a01 	vldr	s11, [r1, #4]
 800520e:	ed54 4a01 	vldr	s9, [r4, #-4]
 8005212:	ed94 3a00 	vldr	s6, [r4]
 8005216:	ee37 5aa1 	vadd.f32	s10, s15, s3
 800521a:	ee35 6aa2 	vadd.f32	s12, s11, s5
 800521e:	ee37 4a01 	vadd.f32	s8, s14, s2
 8005222:	ee73 6a82 	vadd.f32	s13, s7, s4
 8005226:	ee34 0a05 	vadd.f32	s0, s8, s10
 800522a:	ee76 0a86 	vadd.f32	s1, s13, s12
 800522e:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8005232:	ee37 7a41 	vsub.f32	s14, s14, s2
 8005236:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800523a:	ee75 5ae2 	vsub.f32	s11, s11, s5
 800523e:	ed83 0a00 	vstr	s0, [r3]
 8005242:	edc3 0a01 	vstr	s1, [r3, #4]
 8005246:	ed55 1a01 	vldr	s3, [r5, #-4]
 800524a:	ed96 2a00 	vldr	s4, [r6]
 800524e:	ee77 2a25 	vadd.f32	s5, s14, s11
 8005252:	ee34 4a45 	vsub.f32	s8, s8, s10
 8005256:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800525a:	ed95 5a00 	vldr	s10, [r5]
 800525e:	ed16 6a01 	vldr	s12, [r6, #-4]
 8005262:	ee37 7a65 	vsub.f32	s14, s14, s11
 8005266:	ee73 5ae7 	vsub.f32	s11, s7, s15
 800526a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800526e:	ee22 1aa1 	vmul.f32	s2, s5, s3
 8005272:	ee67 3a06 	vmul.f32	s7, s14, s12
 8005276:	ee62 2a85 	vmul.f32	s5, s5, s10
 800527a:	ee27 6a86 	vmul.f32	s12, s15, s12
 800527e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005282:	ee67 7a82 	vmul.f32	s15, s15, s4
 8005286:	ee65 5aa1 	vmul.f32	s11, s11, s3
 800528a:	ee27 7a02 	vmul.f32	s14, s14, s4
 800528e:	ee64 1a84 	vmul.f32	s3, s9, s8
 8005292:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8005296:	ee23 4a04 	vmul.f32	s8, s6, s8
 800529a:	ee63 6a26 	vmul.f32	s13, s6, s13
 800529e:	ee35 5a01 	vadd.f32	s10, s10, s2
 80052a2:	ee75 5ae2 	vsub.f32	s11, s11, s5
 80052a6:	ee76 6aa1 	vadd.f32	s13, s13, s3
 80052aa:	ee74 4ac4 	vsub.f32	s9, s9, s8
 80052ae:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80052b2:	ee36 7a47 	vsub.f32	s14, s12, s14
 80052b6:	3308      	adds	r3, #8
 80052b8:	4598      	cmp	r8, r3
 80052ba:	edc1 6a00 	vstr	s13, [r1]
 80052be:	edc1 4a01 	vstr	s9, [r1, #4]
 80052c2:	4474      	add	r4, lr
 80052c4:	ed82 5a00 	vstr	s10, [r2]
 80052c8:	edc2 5a01 	vstr	s11, [r2, #4]
 80052cc:	4465      	add	r5, ip
 80052ce:	edc0 7a00 	vstr	s15, [r0]
 80052d2:	ed80 7a01 	vstr	s14, [r0, #4]
 80052d6:	443e      	add	r6, r7
 80052d8:	f101 0108 	add.w	r1, r1, #8
 80052dc:	f102 0208 	add.w	r2, r2, #8
 80052e0:	f100 0008 	add.w	r0, r0, #8
 80052e4:	d183      	bne.n	80051ee <arm_radix4_butterfly_f32+0x42>
 80052e6:	9b01      	ldr	r3, [sp, #4]
 80052e8:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80052ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2a04      	cmp	r2, #4
 80052f4:	9307      	str	r3, [sp, #28]
 80052f6:	f240 80b6 	bls.w	8005466 <arm_radix4_butterfly_f32+0x2ba>
 80052fa:	9807      	ldr	r0, [sp, #28]
 80052fc:	9208      	str	r2, [sp, #32]
 80052fe:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005306:	9306      	str	r3, [sp, #24]
 8005308:	00c3      	lsls	r3, r0, #3
 800530a:	ea4f 029b 	mov.w	r2, fp, lsr #2
 800530e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005310:	9305      	str	r3, [sp, #20]
 8005312:	0103      	lsls	r3, r0, #4
 8005314:	9202      	str	r2, [sp, #8]
 8005316:	eb06 1802 	add.w	r8, r6, r2, lsl #4
 800531a:	9304      	str	r3, [sp, #16]
 800531c:	00d2      	lsls	r2, r2, #3
 800531e:	2300      	movs	r3, #0
 8005320:	9203      	str	r2, [sp, #12]
 8005322:	46be      	mov	lr, r7
 8005324:	46bc      	mov	ip, r7
 8005326:	9301      	str	r3, [sp, #4]
 8005328:	9b03      	ldr	r3, [sp, #12]
 800532a:	ed17 0a01 	vldr	s0, [r7, #-4]
 800532e:	edd7 0a00 	vldr	s1, [r7]
 8005332:	ed1c 1a01 	vldr	s2, [ip, #-4]
 8005336:	eddc 1a00 	vldr	s3, [ip]
 800533a:	ed1e 2a01 	vldr	s4, [lr, #-4]
 800533e:	edde 2a00 	vldr	s5, [lr]
 8005342:	9d01      	ldr	r5, [sp, #4]
 8005344:	1999      	adds	r1, r3, r6
 8005346:	eb03 0208 	add.w	r2, r3, r8
 800534a:	1d34      	adds	r4, r6, #4
 800534c:	4643      	mov	r3, r8
 800534e:	4630      	mov	r0, r6
 8005350:	ed14 7a01 	vldr	s14, [r4, #-4]
 8005354:	edd3 3a00 	vldr	s7, [r3]
 8005358:	edd2 4a00 	vldr	s9, [r2]
 800535c:	edd0 5a01 	vldr	s11, [r0, #4]
 8005360:	ed93 6a01 	vldr	s12, [r3, #4]
 8005364:	edd2 6a01 	vldr	s13, [r2, #4]
 8005368:	edd1 7a00 	vldr	s15, [r1]
 800536c:	ed91 5a01 	vldr	s10, [r1, #4]
 8005370:	ee37 4a23 	vadd.f32	s8, s14, s7
 8005374:	ee37 9aa4 	vadd.f32	s18, s15, s9
 8005378:	ee75 8a26 	vadd.f32	s17, s10, s13
 800537c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005380:	ee35 5a66 	vsub.f32	s10, s10, s13
 8005384:	ee75 4a86 	vadd.f32	s9, s11, s12
 8005388:	ee37 7a63 	vsub.f32	s14, s14, s7
 800538c:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8005390:	ee77 3a05 	vadd.f32	s7, s14, s10
 8005394:	ee75 6ae7 	vsub.f32	s13, s11, s15
 8005398:	ee34 3a49 	vsub.f32	s6, s8, s18
 800539c:	ee34 6ae8 	vsub.f32	s12, s9, s17
 80053a0:	ee37 7a45 	vsub.f32	s14, s14, s10
 80053a4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80053a8:	ee61 aa03 	vmul.f32	s21, s2, s6
 80053ac:	ee21 8a86 	vmul.f32	s16, s3, s12
 80053b0:	ee20 aa23 	vmul.f32	s20, s0, s7
 80053b4:	ee20 5aa6 	vmul.f32	s10, s1, s13
 80053b8:	ee62 9a07 	vmul.f32	s19, s4, s14
 80053bc:	ee62 5aa7 	vmul.f32	s11, s5, s15
 80053c0:	ee21 3a83 	vmul.f32	s6, s3, s6
 80053c4:	ee21 6a06 	vmul.f32	s12, s2, s12
 80053c8:	ee60 3aa3 	vmul.f32	s7, s1, s7
 80053cc:	ee60 6a26 	vmul.f32	s13, s0, s13
 80053d0:	ee22 7a87 	vmul.f32	s14, s5, s14
 80053d4:	ee62 7a27 	vmul.f32	s15, s4, s15
 80053d8:	ee34 4a09 	vadd.f32	s8, s8, s18
 80053dc:	ee74 4aa8 	vadd.f32	s9, s9, s17
 80053e0:	ee38 8a2a 	vadd.f32	s16, s16, s21
 80053e4:	ee36 6a43 	vsub.f32	s12, s12, s6
 80053e8:	ee35 5a0a 	vadd.f32	s10, s10, s20
 80053ec:	ee76 6ae3 	vsub.f32	s13, s13, s7
 80053f0:	ee75 5aa9 	vadd.f32	s11, s11, s19
 80053f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053f8:	445d      	add	r5, fp
 80053fa:	45aa      	cmp	sl, r5
 80053fc:	ed04 4a01 	vstr	s8, [r4, #-4]
 8005400:	edc0 4a01 	vstr	s9, [r0, #4]
 8005404:	444c      	add	r4, r9
 8005406:	ed81 8a00 	vstr	s16, [r1]
 800540a:	ed81 6a01 	vstr	s12, [r1, #4]
 800540e:	4448      	add	r0, r9
 8005410:	ed83 5a00 	vstr	s10, [r3]
 8005414:	edc3 6a01 	vstr	s13, [r3, #4]
 8005418:	4449      	add	r1, r9
 800541a:	edc2 5a00 	vstr	s11, [r2]
 800541e:	edc2 7a01 	vstr	s15, [r2, #4]
 8005422:	444b      	add	r3, r9
 8005424:	444a      	add	r2, r9
 8005426:	d893      	bhi.n	8005350 <arm_radix4_butterfly_f32+0x1a4>
 8005428:	9a05      	ldr	r2, [sp, #20]
 800542a:	9b01      	ldr	r3, [sp, #4]
 800542c:	4417      	add	r7, r2
 800542e:	9a04      	ldr	r2, [sp, #16]
 8005430:	4494      	add	ip, r2
 8005432:	9a06      	ldr	r2, [sp, #24]
 8005434:	4496      	add	lr, r2
 8005436:	9a02      	ldr	r2, [sp, #8]
 8005438:	3301      	adds	r3, #1
 800543a:	429a      	cmp	r2, r3
 800543c:	9301      	str	r3, [sp, #4]
 800543e:	f106 0608 	add.w	r6, r6, #8
 8005442:	f108 0808 	add.w	r8, r8, #8
 8005446:	f47f af6f 	bne.w	8005328 <arm_radix4_butterfly_f32+0x17c>
 800544a:	9b07      	ldr	r3, [sp, #28]
 800544c:	4693      	mov	fp, r2
 800544e:	9a08      	ldr	r2, [sp, #32]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	0892      	lsrs	r2, r2, #2
 8005454:	b29b      	uxth	r3, r3
 8005456:	2a04      	cmp	r2, #4
 8005458:	9208      	str	r2, [sp, #32]
 800545a:	9307      	str	r3, [sp, #28]
 800545c:	d903      	bls.n	8005466 <arm_radix4_butterfly_f32+0x2ba>
 800545e:	ea4f 09cb 	mov.w	r9, fp, lsl #3
 8005462:	4618      	mov	r0, r3
 8005464:	e74b      	b.n	80052fe <arm_radix4_butterfly_f32+0x152>
 8005466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005468:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800546a:	3320      	adds	r3, #32
 800546c:	ed13 4a04 	vldr	s8, [r3, #-16]
 8005470:	ed53 4a02 	vldr	s9, [r3, #-8]
 8005474:	ed53 5a01 	vldr	s11, [r3, #-4]
 8005478:	ed53 3a03 	vldr	s7, [r3, #-12]
 800547c:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8005480:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 8005484:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8005488:	ed53 7a07 	vldr	s15, [r3, #-28]	; 0xffffffe4
 800548c:	ee37 5a04 	vadd.f32	s10, s14, s8
 8005490:	ee37 7a44 	vsub.f32	s14, s14, s8
 8005494:	ee36 4aa4 	vadd.f32	s8, s13, s9
 8005498:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800549c:	ee76 4a65 	vsub.f32	s9, s12, s11
 80054a0:	ee36 6a25 	vadd.f32	s12, s12, s11
 80054a4:	ee77 5aa3 	vadd.f32	s11, s15, s7
 80054a8:	ee77 7ae3 	vsub.f32	s15, s15, s7
 80054ac:	ee75 3a04 	vadd.f32	s7, s10, s8
 80054b0:	ee35 5a44 	vsub.f32	s10, s10, s8
 80054b4:	ee37 4a24 	vadd.f32	s8, s14, s9
 80054b8:	ee37 7a64 	vsub.f32	s14, s14, s9
 80054bc:	ee75 4a86 	vadd.f32	s9, s11, s12
 80054c0:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80054c4:	ee77 5ae6 	vsub.f32	s11, s15, s13
 80054c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054cc:	3a01      	subs	r2, #1
 80054ce:	ed43 3a08 	vstr	s7, [r3, #-32]	; 0xffffffe0
 80054d2:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 80054d6:	ed03 4a04 	vstr	s8, [r3, #-16]
 80054da:	ed03 7a02 	vstr	s14, [r3, #-8]
 80054de:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 80054e2:	ed03 6a05 	vstr	s12, [r3, #-20]	; 0xffffffec
 80054e6:	ed43 5a03 	vstr	s11, [r3, #-12]
 80054ea:	ed43 7a01 	vstr	s15, [r3, #-4]
 80054ee:	f103 0320 	add.w	r3, r3, #32
 80054f2:	d1bb      	bne.n	800546c <arm_radix4_butterfly_f32+0x2c0>
 80054f4:	b00d      	add	sp, #52	; 0x34
 80054f6:	ecbd 8b06 	vpop	{d8-d10}
 80054fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054fe:	bf00      	nop

08005500 <arm_radix4_butterfly_inverse_f32>:
 8005500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005504:	ed2d 8b08 	vpush	{d8-d11}
 8005508:	088d      	lsrs	r5, r1, #2
 800550a:	b08d      	sub	sp, #52	; 0x34
 800550c:	012c      	lsls	r4, r5, #4
 800550e:	461e      	mov	r6, r3
 8005510:	3204      	adds	r2, #4
 8005512:	468a      	mov	sl, r1
 8005514:	900a      	str	r0, [sp, #40]	; 0x28
 8005516:	ebc5 7145 	rsb	r1, r5, r5, lsl #29
 800551a:	9301      	str	r3, [sp, #4]
 800551c:	4603      	mov	r3, r0
 800551e:	4420      	add	r0, r4
 8005520:	9209      	str	r2, [sp, #36]	; 0x24
 8005522:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8005526:	190a      	adds	r2, r1, r4
 8005528:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800552a:	9502      	str	r5, [sp, #8]
 800552c:	ea4f 09c5 	mov.w	r9, r5, lsl #3
 8005530:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8005534:	46ab      	mov	fp, r5
 8005536:	ea4f 1e06 	mov.w	lr, r6, lsl #4
 800553a:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
 800553e:	eb03 0809 	add.w	r8, r3, r9
 8005542:	00ff      	lsls	r7, r7, #3
 8005544:	4626      	mov	r6, r4
 8005546:	4625      	mov	r5, r4
 8005548:	edd3 7a00 	vldr	s15, [r3]
 800554c:	edd2 1a00 	vldr	s3, [r2]
 8005550:	ed90 2a01 	vldr	s4, [r0, #4]
 8005554:	edd2 2a01 	vldr	s5, [r2, #4]
 8005558:	ed93 7a01 	vldr	s14, [r3, #4]
 800555c:	ed90 1a00 	vldr	s2, [r0]
 8005560:	edd1 4a00 	vldr	s9, [r1]
 8005564:	ed91 4a01 	vldr	s8, [r1, #4]
 8005568:	ed14 3a01 	vldr	s6, [r4, #-4]
 800556c:	edd4 5a00 	vldr	s11, [r4]
 8005570:	ee74 3aa1 	vadd.f32	s7, s9, s3
 8005574:	ee34 6a22 	vadd.f32	s12, s8, s5
 8005578:	ee77 6a02 	vadd.f32	s13, s14, s4
 800557c:	ee37 5a81 	vadd.f32	s10, s15, s2
 8005580:	ee76 0a86 	vadd.f32	s1, s13, s12
 8005584:	ee35 8a23 	vadd.f32	s16, s10, s7
 8005588:	ee74 4ae1 	vsub.f32	s9, s9, s3
 800558c:	ee34 4a62 	vsub.f32	s8, s8, s5
 8005590:	ee37 7a42 	vsub.f32	s14, s14, s4
 8005594:	ee77 7ac1 	vsub.f32	s15, s15, s2
 8005598:	ed83 8a00 	vstr	s16, [r3]
 800559c:	edc3 0a01 	vstr	s1, [r3, #4]
 80055a0:	ed15 2a01 	vldr	s4, [r5, #-4]
 80055a4:	edd5 2a00 	vldr	s5, [r5]
 80055a8:	edd6 1a00 	vldr	s3, [r6]
 80055ac:	ee35 5a63 	vsub.f32	s10, s10, s7
 80055b0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80055b4:	ed56 3a01 	vldr	s7, [r6, #-4]
 80055b8:	ee37 6ac4 	vsub.f32	s12, s15, s8
 80055bc:	ee77 7a84 	vadd.f32	s15, s15, s8
 80055c0:	ee34 4a87 	vadd.f32	s8, s9, s14
 80055c4:	ee37 7a64 	vsub.f32	s14, s14, s9
 80055c8:	ee66 4a02 	vmul.f32	s9, s12, s4
 80055cc:	ee26 6a22 	vmul.f32	s12, s12, s5
 80055d0:	ee64 2a22 	vmul.f32	s5, s8, s5
 80055d4:	ee24 4a02 	vmul.f32	s8, s8, s4
 80055d8:	ee23 2a05 	vmul.f32	s4, s6, s10
 80055dc:	ee23 3a26 	vmul.f32	s6, s6, s13
 80055e0:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80055e4:	ee65 5a85 	vmul.f32	s11, s11, s10
 80055e8:	ee27 5aa3 	vmul.f32	s10, s15, s7
 80055ec:	ee67 3a23 	vmul.f32	s7, s14, s7
 80055f0:	ee67 7aa1 	vmul.f32	s15, s15, s3
 80055f4:	ee27 7a21 	vmul.f32	s14, s14, s3
 80055f8:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80055fc:	ee36 6a04 	vadd.f32	s12, s12, s8
 8005600:	ee72 4a66 	vsub.f32	s9, s4, s13
 8005604:	ee35 7a47 	vsub.f32	s14, s10, s14
 8005608:	ee75 6a83 	vadd.f32	s13, s11, s6
 800560c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8005610:	3308      	adds	r3, #8
 8005612:	4598      	cmp	r8, r3
 8005614:	edc1 4a00 	vstr	s9, [r1]
 8005618:	edc1 6a01 	vstr	s13, [r1, #4]
 800561c:	4474      	add	r4, lr
 800561e:	edc0 2a00 	vstr	s5, [r0]
 8005622:	ed80 6a01 	vstr	s12, [r0, #4]
 8005626:	4465      	add	r5, ip
 8005628:	ed82 7a00 	vstr	s14, [r2]
 800562c:	edc2 7a01 	vstr	s15, [r2, #4]
 8005630:	443e      	add	r6, r7
 8005632:	f101 0108 	add.w	r1, r1, #8
 8005636:	f100 0008 	add.w	r0, r0, #8
 800563a:	f102 0208 	add.w	r2, r2, #8
 800563e:	d183      	bne.n	8005548 <arm_radix4_butterfly_inverse_f32+0x48>
 8005640:	9b01      	ldr	r3, [sp, #4]
 8005642:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8005646:	920b      	str	r2, [sp, #44]	; 0x2c
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	b29b      	uxth	r3, r3
 800564c:	2a04      	cmp	r2, #4
 800564e:	9307      	str	r3, [sp, #28]
 8005650:	f240 80b6 	bls.w	80057c0 <arm_radix4_butterfly_inverse_f32+0x2c0>
 8005654:	9807      	ldr	r0, [sp, #28]
 8005656:	9208      	str	r2, [sp, #32]
 8005658:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005660:	9306      	str	r3, [sp, #24]
 8005662:	00c3      	lsls	r3, r0, #3
 8005664:	ea4f 029b 	mov.w	r2, fp, lsr #2
 8005668:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800566a:	9305      	str	r3, [sp, #20]
 800566c:	0103      	lsls	r3, r0, #4
 800566e:	9202      	str	r2, [sp, #8]
 8005670:	eb06 1802 	add.w	r8, r6, r2, lsl #4
 8005674:	9304      	str	r3, [sp, #16]
 8005676:	00d2      	lsls	r2, r2, #3
 8005678:	2300      	movs	r3, #0
 800567a:	9203      	str	r2, [sp, #12]
 800567c:	46be      	mov	lr, r7
 800567e:	46bc      	mov	ip, r7
 8005680:	9301      	str	r3, [sp, #4]
 8005682:	9b03      	ldr	r3, [sp, #12]
 8005684:	ed17 1a01 	vldr	s2, [r7, #-4]
 8005688:	edd7 1a00 	vldr	s3, [r7]
 800568c:	ed1c 2a01 	vldr	s4, [ip, #-4]
 8005690:	eddc 2a00 	vldr	s5, [ip]
 8005694:	ed1e 3a01 	vldr	s6, [lr, #-4]
 8005698:	edde 3a00 	vldr	s7, [lr]
 800569c:	9d01      	ldr	r5, [sp, #4]
 800569e:	1999      	adds	r1, r3, r6
 80056a0:	eb03 0208 	add.w	r2, r3, r8
 80056a4:	1d34      	adds	r4, r6, #4
 80056a6:	4643      	mov	r3, r8
 80056a8:	4630      	mov	r0, r6
 80056aa:	ed54 7a01 	vldr	s15, [r4, #-4]
 80056ae:	edd3 0a00 	vldr	s1, [r3]
 80056b2:	edd2 4a00 	vldr	s9, [r2]
 80056b6:	ed90 7a01 	vldr	s14, [r0, #4]
 80056ba:	ed93 6a01 	vldr	s12, [r3, #4]
 80056be:	edd2 6a01 	vldr	s13, [r2, #4]
 80056c2:	edd1 5a00 	vldr	s11, [r1]
 80056c6:	ed91 5a01 	vldr	s10, [r1, #4]
 80056ca:	ee37 4aa0 	vadd.f32	s8, s15, s1
 80056ce:	ee35 9aa4 	vadd.f32	s18, s11, s9
 80056d2:	ee75 9a26 	vadd.f32	s19, s10, s13
 80056d6:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80056da:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80056de:	ee77 4a06 	vadd.f32	s9, s14, s12
 80056e2:	ee35 5a66 	vsub.f32	s10, s10, s13
 80056e6:	ee37 7a46 	vsub.f32	s14, s14, s12
 80056ea:	ee77 6ac5 	vsub.f32	s13, s15, s10
 80056ee:	ee34 6a49 	vsub.f32	s12, s8, s18
 80056f2:	ee74 0ae9 	vsub.f32	s1, s9, s19
 80056f6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80056fa:	ee35 5a87 	vadd.f32	s10, s11, s14
 80056fe:	ee37 7a65 	vsub.f32	s14, s14, s11
 8005702:	ee62 8a06 	vmul.f32	s17, s4, s12
 8005706:	ee22 baa0 	vmul.f32	s22, s5, s1
 800570a:	ee21 8a26 	vmul.f32	s16, s2, s13
 800570e:	ee62 0a20 	vmul.f32	s1, s4, s1
 8005712:	ee61 aa85 	vmul.f32	s21, s3, s10
 8005716:	ee63 5a27 	vmul.f32	s11, s6, s15
 800571a:	ee23 aa87 	vmul.f32	s20, s7, s14
 800571e:	ee22 6a86 	vmul.f32	s12, s5, s12
 8005722:	ee61 6aa6 	vmul.f32	s13, s3, s13
 8005726:	ee21 5a05 	vmul.f32	s10, s2, s10
 800572a:	ee63 7aa7 	vmul.f32	s15, s7, s15
 800572e:	ee23 7a07 	vmul.f32	s14, s6, s14
 8005732:	ee36 6a20 	vadd.f32	s12, s12, s1
 8005736:	ee34 4a09 	vadd.f32	s8, s8, s18
 800573a:	ee74 4aa9 	vadd.f32	s9, s9, s19
 800573e:	ee78 8acb 	vsub.f32	s17, s17, s22
 8005742:	ee78 0a6a 	vsub.f32	s1, s16, s21
 8005746:	ee76 6a85 	vadd.f32	s13, s13, s10
 800574a:	ee75 5aca 	vsub.f32	s11, s11, s20
 800574e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005752:	445d      	add	r5, fp
 8005754:	45aa      	cmp	sl, r5
 8005756:	ed04 4a01 	vstr	s8, [r4, #-4]
 800575a:	edc0 4a01 	vstr	s9, [r0, #4]
 800575e:	444c      	add	r4, r9
 8005760:	edc1 8a00 	vstr	s17, [r1]
 8005764:	ed81 6a01 	vstr	s12, [r1, #4]
 8005768:	4448      	add	r0, r9
 800576a:	edc3 0a00 	vstr	s1, [r3]
 800576e:	edc3 6a01 	vstr	s13, [r3, #4]
 8005772:	4449      	add	r1, r9
 8005774:	edc2 5a00 	vstr	s11, [r2]
 8005778:	edc2 7a01 	vstr	s15, [r2, #4]
 800577c:	444b      	add	r3, r9
 800577e:	444a      	add	r2, r9
 8005780:	d893      	bhi.n	80056aa <arm_radix4_butterfly_inverse_f32+0x1aa>
 8005782:	9a05      	ldr	r2, [sp, #20]
 8005784:	9b01      	ldr	r3, [sp, #4]
 8005786:	4417      	add	r7, r2
 8005788:	9a04      	ldr	r2, [sp, #16]
 800578a:	4494      	add	ip, r2
 800578c:	9a06      	ldr	r2, [sp, #24]
 800578e:	4496      	add	lr, r2
 8005790:	9a02      	ldr	r2, [sp, #8]
 8005792:	3301      	adds	r3, #1
 8005794:	429a      	cmp	r2, r3
 8005796:	9301      	str	r3, [sp, #4]
 8005798:	f106 0608 	add.w	r6, r6, #8
 800579c:	f108 0808 	add.w	r8, r8, #8
 80057a0:	f47f af6f 	bne.w	8005682 <arm_radix4_butterfly_inverse_f32+0x182>
 80057a4:	9b07      	ldr	r3, [sp, #28]
 80057a6:	4693      	mov	fp, r2
 80057a8:	9a08      	ldr	r2, [sp, #32]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	0892      	lsrs	r2, r2, #2
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2a04      	cmp	r2, #4
 80057b2:	9208      	str	r2, [sp, #32]
 80057b4:	9307      	str	r3, [sp, #28]
 80057b6:	d903      	bls.n	80057c0 <arm_radix4_butterfly_inverse_f32+0x2c0>
 80057b8:	ea4f 09cb 	mov.w	r9, fp, lsl #3
 80057bc:	4618      	mov	r0, r3
 80057be:	e74b      	b.n	8005658 <arm_radix4_butterfly_inverse_f32+0x158>
 80057c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057c4:	3320      	adds	r3, #32
 80057c6:	ed13 4a04 	vldr	s8, [r3, #-16]
 80057ca:	ed53 4a02 	vldr	s9, [r3, #-8]
 80057ce:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 80057d2:	ed53 3a03 	vldr	s7, [r3, #-12]
 80057d6:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 80057da:	ed53 5a06 	vldr	s11, [r3, #-24]	; 0xffffffe8
 80057de:	ed13 5a01 	vldr	s10, [r3, #-4]
 80057e2:	ed53 7a07 	vldr	s15, [r3, #-28]	; 0xffffffe4
 80057e6:	ee37 6a04 	vadd.f32	s12, s14, s8
 80057ea:	ee37 7a44 	vsub.f32	s14, s14, s8
 80057ee:	ee35 4aa4 	vadd.f32	s8, s11, s9
 80057f2:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80057f6:	ee76 4ac5 	vsub.f32	s9, s13, s10
 80057fa:	ee36 5a85 	vadd.f32	s10, s13, s10
 80057fe:	ee77 6aa3 	vadd.f32	s13, s15, s7
 8005802:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8005806:	ee76 3a04 	vadd.f32	s7, s12, s8
 800580a:	ee36 6a44 	vsub.f32	s12, s12, s8
 800580e:	ee37 4a64 	vsub.f32	s8, s14, s9
 8005812:	ee37 7a24 	vadd.f32	s14, s14, s9
 8005816:	ee76 4a85 	vadd.f32	s9, s13, s10
 800581a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800581e:	ee37 5aa5 	vadd.f32	s10, s15, s11
 8005822:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005826:	ee63 3a80 	vmul.f32	s7, s7, s0
 800582a:	ee26 6a00 	vmul.f32	s12, s12, s0
 800582e:	ee24 4a00 	vmul.f32	s8, s8, s0
 8005832:	ee27 7a00 	vmul.f32	s14, s14, s0
 8005836:	ee64 4a80 	vmul.f32	s9, s9, s0
 800583a:	ee66 6a80 	vmul.f32	s13, s13, s0
 800583e:	ee65 5a00 	vmul.f32	s11, s10, s0
 8005842:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005846:	3a01      	subs	r2, #1
 8005848:	ed43 3a08 	vstr	s7, [r3, #-32]	; 0xffffffe0
 800584c:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 8005850:	ed03 4a04 	vstr	s8, [r3, #-16]
 8005854:	ed03 7a02 	vstr	s14, [r3, #-8]
 8005858:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 800585c:	ed43 6a05 	vstr	s13, [r3, #-20]	; 0xffffffec
 8005860:	ed43 5a03 	vstr	s11, [r3, #-12]
 8005864:	ed43 7a01 	vstr	s15, [r3, #-4]
 8005868:	f103 0320 	add.w	r3, r3, #32
 800586c:	d1ab      	bne.n	80057c6 <arm_radix4_butterfly_inverse_f32+0x2c6>
 800586e:	b00d      	add	sp, #52	; 0x34
 8005870:	ecbd 8b08 	vpop	{d8-d11}
 8005874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005878 <arm_cfft_radix4_f32>:
 8005878:	b570      	push	{r4, r5, r6, lr}
 800587a:	4604      	mov	r4, r0
 800587c:	7880      	ldrb	r0, [r0, #2]
 800587e:	6862      	ldr	r2, [r4, #4]
 8005880:	89a3      	ldrh	r3, [r4, #12]
 8005882:	2801      	cmp	r0, #1
 8005884:	460d      	mov	r5, r1
 8005886:	8821      	ldrh	r1, [r4, #0]
 8005888:	d006      	beq.n	8005898 <arm_cfft_radix4_f32+0x20>
 800588a:	4628      	mov	r0, r5
 800588c:	f7ff fc8e 	bl	80051ac <arm_radix4_butterfly_f32>
 8005890:	78e3      	ldrb	r3, [r4, #3]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d008      	beq.n	80058a8 <arm_cfft_radix4_f32+0x30>
 8005896:	bd70      	pop	{r4, r5, r6, pc}
 8005898:	ed94 0a04 	vldr	s0, [r4, #16]
 800589c:	4628      	mov	r0, r5
 800589e:	f7ff fe2f 	bl	8005500 <arm_radix4_butterfly_inverse_f32>
 80058a2:	78e3      	ldrb	r3, [r4, #3]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d1f6      	bne.n	8005896 <arm_cfft_radix4_f32+0x1e>
 80058a8:	4628      	mov	r0, r5
 80058aa:	68a3      	ldr	r3, [r4, #8]
 80058ac:	89e2      	ldrh	r2, [r4, #14]
 80058ae:	8821      	ldrh	r1, [r4, #0]
 80058b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80058b4:	f000 b800 	b.w	80058b8 <arm_bitreversal_f32>

080058b8 <arm_bitreversal_f32>:
 80058b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058bc:	b085      	sub	sp, #20
 80058be:	084c      	lsrs	r4, r1, #1
 80058c0:	0052      	lsls	r2, r2, #1
 80058c2:	2100      	movs	r1, #0
 80058c4:	9201      	str	r2, [sp, #4]
 80058c6:	1ea2      	subs	r2, r4, #2
 80058c8:	9402      	str	r4, [sp, #8]
 80058ca:	f104 0e01 	add.w	lr, r4, #1
 80058ce:	9203      	str	r2, [sp, #12]
 80058d0:	460c      	mov	r4, r1
 80058d2:	460a      	mov	r2, r1
 80058d4:	9d02      	ldr	r5, [sp, #8]
 80058d6:	3101      	adds	r1, #1
 80058d8:	442a      	add	r2, r5
 80058da:	00c9      	lsls	r1, r1, #3
 80058dc:	00d2      	lsls	r2, r2, #3
 80058de:	1846      	adds	r6, r0, r1
 80058e0:	1885      	adds	r5, r0, r2
 80058e2:	3104      	adds	r1, #4
 80058e4:	3204      	adds	r2, #4
 80058e6:	6837      	ldr	r7, [r6, #0]
 80058e8:	f8d5 c000 	ldr.w	ip, [r5]
 80058ec:	f8c6 c000 	str.w	ip, [r6]
 80058f0:	4401      	add	r1, r0
 80058f2:	4402      	add	r2, r0
 80058f4:	602f      	str	r7, [r5, #0]
 80058f6:	3402      	adds	r4, #2
 80058f8:	680e      	ldr	r6, [r1, #0]
 80058fa:	f8d2 9000 	ldr.w	r9, [r2]
 80058fe:	f8c1 9000 	str.w	r9, [r1]
 8005902:	b2a4      	uxth	r4, r4
 8005904:	6016      	str	r6, [r2, #0]
 8005906:	eb04 050e 	add.w	r5, r4, lr
 800590a:	881a      	ldrh	r2, [r3, #0]
 800590c:	00ed      	lsls	r5, r5, #3
 800590e:	eb00 0c05 	add.w	ip, r0, r5
 8005912:	3504      	adds	r5, #4
 8005914:	9500      	str	r5, [sp, #0]
 8005916:	eb02 010e 	add.w	r1, r2, lr
 800591a:	9d03      	ldr	r5, [sp, #12]
 800591c:	00c9      	lsls	r1, r1, #3
 800591e:	00e7      	lsls	r7, r4, #3
 8005920:	00d6      	lsls	r6, r2, #3
 8005922:	f101 0b04 	add.w	fp, r1, #4
 8005926:	eb00 0901 	add.w	r9, r0, r1
 800592a:	42ac      	cmp	r4, r5
 800592c:	9901      	ldr	r1, [sp, #4]
 800592e:	9d00      	ldr	r5, [sp, #0]
 8005930:	eb00 0807 	add.w	r8, r0, r7
 8005934:	eb00 0a06 	add.w	sl, r0, r6
 8005938:	f107 0704 	add.w	r7, r7, #4
 800593c:	f106 0604 	add.w	r6, r6, #4
 8005940:	440b      	add	r3, r1
 8005942:	4407      	add	r7, r0
 8005944:	4406      	add	r6, r0
 8005946:	4621      	mov	r1, r4
 8005948:	4405      	add	r5, r0
 800594a:	4483      	add	fp, r0
 800594c:	d820      	bhi.n	8005990 <arm_bitreversal_f32+0xd8>
 800594e:	42a2      	cmp	r2, r4
 8005950:	d9c0      	bls.n	80058d4 <arm_bitreversal_f32+0x1c>
 8005952:	edd8 7a00 	vldr	s15, [r8]
 8005956:	ed9a 7a00 	vldr	s14, [sl]
 800595a:	ed88 7a00 	vstr	s14, [r8]
 800595e:	edca 7a00 	vstr	s15, [sl]
 8005962:	f8d7 8000 	ldr.w	r8, [r7]
 8005966:	f8d6 a000 	ldr.w	sl, [r6]
 800596a:	f8c7 a000 	str.w	sl, [r7]
 800596e:	f8c6 8000 	str.w	r8, [r6]
 8005972:	f8dc 6000 	ldr.w	r6, [ip]
 8005976:	f8d9 7000 	ldr.w	r7, [r9]
 800597a:	f8cc 7000 	str.w	r7, [ip]
 800597e:	f8c9 6000 	str.w	r6, [r9]
 8005982:	682e      	ldr	r6, [r5, #0]
 8005984:	f8db 7000 	ldr.w	r7, [fp]
 8005988:	602f      	str	r7, [r5, #0]
 800598a:	f8cb 6000 	str.w	r6, [fp]
 800598e:	e7a1      	b.n	80058d4 <arm_bitreversal_f32+0x1c>
 8005990:	b005      	add	sp, #20
 8005992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005996:	bf00      	nop

08005998 <arm_cmplx_mag_f32>:
 8005998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800599c:	ed2d 8b02 	vpush	{d8}
 80059a0:	0897      	lsrs	r7, r2, #2
 80059a2:	b084      	sub	sp, #16
 80059a4:	d077      	beq.n	8005a96 <arm_cmplx_mag_f32+0xfe>
 80059a6:	f04f 0800 	mov.w	r8, #0
 80059aa:	f100 0420 	add.w	r4, r0, #32
 80059ae:	f101 0510 	add.w	r5, r1, #16
 80059b2:	463e      	mov	r6, r7
 80059b4:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 80059b8:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 80059bc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80059c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80059c4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80059c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80059cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059d0:	f2c0 80c5 	blt.w	8005b5e <arm_cmplx_mag_f32+0x1c6>
 80059d4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80059d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059dc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80059e0:	f100 80cb 	bmi.w	8005b7a <arm_cmplx_mag_f32+0x1e2>
 80059e4:	ed05 8a04 	vstr	s16, [r5, #-16]
 80059e8:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 80059ec:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 80059f0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80059f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80059f8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80059fc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a04:	f2c0 80a8 	blt.w	8005b58 <arm_cmplx_mag_f32+0x1c0>
 8005a08:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a10:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8005a14:	f100 80a8 	bmi.w	8005b68 <arm_cmplx_mag_f32+0x1d0>
 8005a18:	ed05 8a03 	vstr	s16, [r5, #-12]
 8005a1c:	ed14 0a04 	vldr	s0, [r4, #-16]
 8005a20:	ed54 7a03 	vldr	s15, [r4, #-12]
 8005a24:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005a28:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005a2c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005a30:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a38:	f2c0 808b 	blt.w	8005b52 <arm_cmplx_mag_f32+0x1ba>
 8005a3c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a44:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8005a48:	f100 80a9 	bmi.w	8005b9e <arm_cmplx_mag_f32+0x206>
 8005a4c:	ed05 8a02 	vstr	s16, [r5, #-8]
 8005a50:	ed14 0a02 	vldr	s0, [r4, #-8]
 8005a54:	ed54 7a01 	vldr	s15, [r4, #-4]
 8005a58:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005a5c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005a60:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005a64:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a6c:	db6e      	blt.n	8005b4c <arm_cmplx_mag_f32+0x1b4>
 8005a6e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a76:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8005a7a:	f100 8087 	bmi.w	8005b8c <arm_cmplx_mag_f32+0x1f4>
 8005a7e:	ed05 8a01 	vstr	s16, [r5, #-4]
 8005a82:	3e01      	subs	r6, #1
 8005a84:	f104 0420 	add.w	r4, r4, #32
 8005a88:	f105 0510 	add.w	r5, r5, #16
 8005a8c:	d192      	bne.n	80059b4 <arm_cmplx_mag_f32+0x1c>
 8005a8e:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8005a92:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8005a96:	f012 0203 	ands.w	r2, r2, #3
 8005a9a:	d052      	beq.n	8005b42 <arm_cmplx_mag_f32+0x1aa>
 8005a9c:	ed90 0a00 	vldr	s0, [r0]
 8005aa0:	edd0 7a01 	vldr	s15, [r0, #4]
 8005aa4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005aa8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005aac:	2300      	movs	r3, #0
 8005aae:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005ab2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aba:	bfb8      	it	lt
 8005abc:	600b      	strlt	r3, [r1, #0]
 8005abe:	db08      	blt.n	8005ad2 <arm_cmplx_mag_f32+0x13a>
 8005ac0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ac8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8005acc:	d479      	bmi.n	8005bc2 <arm_cmplx_mag_f32+0x22a>
 8005ace:	ed81 8a00 	vstr	s16, [r1]
 8005ad2:	3a01      	subs	r2, #1
 8005ad4:	d035      	beq.n	8005b42 <arm_cmplx_mag_f32+0x1aa>
 8005ad6:	ed90 0a02 	vldr	s0, [r0, #8]
 8005ada:	edd0 7a03 	vldr	s15, [r0, #12]
 8005ade:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005ae2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005aec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005af4:	bfb8      	it	lt
 8005af6:	604b      	strlt	r3, [r1, #4]
 8005af8:	db08      	blt.n	8005b0c <arm_cmplx_mag_f32+0x174>
 8005afa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b02:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8005b06:	d453      	bmi.n	8005bb0 <arm_cmplx_mag_f32+0x218>
 8005b08:	ed81 8a01 	vstr	s16, [r1, #4]
 8005b0c:	2a01      	cmp	r2, #1
 8005b0e:	d018      	beq.n	8005b42 <arm_cmplx_mag_f32+0x1aa>
 8005b10:	ed90 0a04 	vldr	s0, [r0, #16]
 8005b14:	edd0 7a05 	vldr	s15, [r0, #20]
 8005b18:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005b1c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005b20:	2300      	movs	r3, #0
 8005b22:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005b26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b2e:	db19      	blt.n	8005b64 <arm_cmplx_mag_f32+0x1cc>
 8005b30:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b38:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8005b3c:	d44a      	bmi.n	8005bd4 <arm_cmplx_mag_f32+0x23c>
 8005b3e:	ed81 8a02 	vstr	s16, [r1, #8]
 8005b42:	b004      	add	sp, #16
 8005b44:	ecbd 8b02 	vpop	{d8}
 8005b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b4c:	f845 8c04 	str.w	r8, [r5, #-4]
 8005b50:	e797      	b.n	8005a82 <arm_cmplx_mag_f32+0xea>
 8005b52:	f845 8c08 	str.w	r8, [r5, #-8]
 8005b56:	e77b      	b.n	8005a50 <arm_cmplx_mag_f32+0xb8>
 8005b58:	f845 8c0c 	str.w	r8, [r5, #-12]
 8005b5c:	e75e      	b.n	8005a1c <arm_cmplx_mag_f32+0x84>
 8005b5e:	f845 8c10 	str.w	r8, [r5, #-16]
 8005b62:	e741      	b.n	80059e8 <arm_cmplx_mag_f32+0x50>
 8005b64:	608b      	str	r3, [r1, #8]
 8005b66:	e7ec      	b.n	8005b42 <arm_cmplx_mag_f32+0x1aa>
 8005b68:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005b6c:	9001      	str	r0, [sp, #4]
 8005b6e:	f004 fd65 	bl	800a63c <sqrtf>
 8005b72:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8005b76:	9801      	ldr	r0, [sp, #4]
 8005b78:	e74e      	b.n	8005a18 <arm_cmplx_mag_f32+0x80>
 8005b7a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005b7e:	9001      	str	r0, [sp, #4]
 8005b80:	f004 fd5c 	bl	800a63c <sqrtf>
 8005b84:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8005b88:	9801      	ldr	r0, [sp, #4]
 8005b8a:	e72b      	b.n	80059e4 <arm_cmplx_mag_f32+0x4c>
 8005b8c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005b90:	9001      	str	r0, [sp, #4]
 8005b92:	f004 fd53 	bl	800a63c <sqrtf>
 8005b96:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8005b9a:	9801      	ldr	r0, [sp, #4]
 8005b9c:	e76f      	b.n	8005a7e <arm_cmplx_mag_f32+0xe6>
 8005b9e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005ba2:	9001      	str	r0, [sp, #4]
 8005ba4:	f004 fd4a 	bl	800a63c <sqrtf>
 8005ba8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8005bac:	9801      	ldr	r0, [sp, #4]
 8005bae:	e74d      	b.n	8005a4c <arm_cmplx_mag_f32+0xb4>
 8005bb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bb4:	9201      	str	r2, [sp, #4]
 8005bb6:	f004 fd41 	bl	800a63c <sqrtf>
 8005bba:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8005bbe:	9903      	ldr	r1, [sp, #12]
 8005bc0:	e7a2      	b.n	8005b08 <arm_cmplx_mag_f32+0x170>
 8005bc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bc6:	9201      	str	r2, [sp, #4]
 8005bc8:	f004 fd38 	bl	800a63c <sqrtf>
 8005bcc:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8005bd0:	9903      	ldr	r1, [sp, #12]
 8005bd2:	e77c      	b.n	8005ace <arm_cmplx_mag_f32+0x136>
 8005bd4:	9101      	str	r1, [sp, #4]
 8005bd6:	f004 fd31 	bl	800a63c <sqrtf>
 8005bda:	9901      	ldr	r1, [sp, #4]
 8005bdc:	e7af      	b.n	8005b3e <arm_cmplx_mag_f32+0x1a6>
 8005bde:	bf00      	nop

08005be0 <__errno>:
 8005be0:	4b01      	ldr	r3, [pc, #4]	; (8005be8 <__errno+0x8>)
 8005be2:	6818      	ldr	r0, [r3, #0]
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	2000041c 	.word	0x2000041c

08005bec <__libc_init_array>:
 8005bec:	b570      	push	{r4, r5, r6, lr}
 8005bee:	4d0d      	ldr	r5, [pc, #52]	; (8005c24 <__libc_init_array+0x38>)
 8005bf0:	4c0d      	ldr	r4, [pc, #52]	; (8005c28 <__libc_init_array+0x3c>)
 8005bf2:	1b64      	subs	r4, r4, r5
 8005bf4:	10a4      	asrs	r4, r4, #2
 8005bf6:	2600      	movs	r6, #0
 8005bf8:	42a6      	cmp	r6, r4
 8005bfa:	d109      	bne.n	8005c10 <__libc_init_array+0x24>
 8005bfc:	4d0b      	ldr	r5, [pc, #44]	; (8005c2c <__libc_init_array+0x40>)
 8005bfe:	4c0c      	ldr	r4, [pc, #48]	; (8005c30 <__libc_init_array+0x44>)
 8005c00:	f004 fd3e 	bl	800a680 <_init>
 8005c04:	1b64      	subs	r4, r4, r5
 8005c06:	10a4      	asrs	r4, r4, #2
 8005c08:	2600      	movs	r6, #0
 8005c0a:	42a6      	cmp	r6, r4
 8005c0c:	d105      	bne.n	8005c1a <__libc_init_array+0x2e>
 8005c0e:	bd70      	pop	{r4, r5, r6, pc}
 8005c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c14:	4798      	blx	r3
 8005c16:	3601      	adds	r6, #1
 8005c18:	e7ee      	b.n	8005bf8 <__libc_init_array+0xc>
 8005c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c1e:	4798      	blx	r3
 8005c20:	3601      	adds	r6, #1
 8005c22:	e7f2      	b.n	8005c0a <__libc_init_array+0x1e>
 8005c24:	080133ac 	.word	0x080133ac
 8005c28:	080133ac 	.word	0x080133ac
 8005c2c:	080133ac 	.word	0x080133ac
 8005c30:	080133b0 	.word	0x080133b0

08005c34 <memset>:
 8005c34:	4402      	add	r2, r0
 8005c36:	4603      	mov	r3, r0
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d100      	bne.n	8005c3e <memset+0xa>
 8005c3c:	4770      	bx	lr
 8005c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c42:	e7f9      	b.n	8005c38 <memset+0x4>

08005c44 <__cvt>:
 8005c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c48:	ec55 4b10 	vmov	r4, r5, d0
 8005c4c:	2d00      	cmp	r5, #0
 8005c4e:	460e      	mov	r6, r1
 8005c50:	4619      	mov	r1, r3
 8005c52:	462b      	mov	r3, r5
 8005c54:	bfbb      	ittet	lt
 8005c56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005c5a:	461d      	movlt	r5, r3
 8005c5c:	2300      	movge	r3, #0
 8005c5e:	232d      	movlt	r3, #45	; 0x2d
 8005c60:	700b      	strb	r3, [r1, #0]
 8005c62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005c68:	4691      	mov	r9, r2
 8005c6a:	f023 0820 	bic.w	r8, r3, #32
 8005c6e:	bfbc      	itt	lt
 8005c70:	4622      	movlt	r2, r4
 8005c72:	4614      	movlt	r4, r2
 8005c74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c78:	d005      	beq.n	8005c86 <__cvt+0x42>
 8005c7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005c7e:	d100      	bne.n	8005c82 <__cvt+0x3e>
 8005c80:	3601      	adds	r6, #1
 8005c82:	2102      	movs	r1, #2
 8005c84:	e000      	b.n	8005c88 <__cvt+0x44>
 8005c86:	2103      	movs	r1, #3
 8005c88:	ab03      	add	r3, sp, #12
 8005c8a:	9301      	str	r3, [sp, #4]
 8005c8c:	ab02      	add	r3, sp, #8
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	ec45 4b10 	vmov	d0, r4, r5
 8005c94:	4653      	mov	r3, sl
 8005c96:	4632      	mov	r2, r6
 8005c98:	f001 fefa 	bl	8007a90 <_dtoa_r>
 8005c9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ca0:	4607      	mov	r7, r0
 8005ca2:	d102      	bne.n	8005caa <__cvt+0x66>
 8005ca4:	f019 0f01 	tst.w	r9, #1
 8005ca8:	d022      	beq.n	8005cf0 <__cvt+0xac>
 8005caa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cae:	eb07 0906 	add.w	r9, r7, r6
 8005cb2:	d110      	bne.n	8005cd6 <__cvt+0x92>
 8005cb4:	783b      	ldrb	r3, [r7, #0]
 8005cb6:	2b30      	cmp	r3, #48	; 0x30
 8005cb8:	d10a      	bne.n	8005cd0 <__cvt+0x8c>
 8005cba:	2200      	movs	r2, #0
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	f7fa ff21 	bl	8000b08 <__aeabi_dcmpeq>
 8005cc6:	b918      	cbnz	r0, 8005cd0 <__cvt+0x8c>
 8005cc8:	f1c6 0601 	rsb	r6, r6, #1
 8005ccc:	f8ca 6000 	str.w	r6, [sl]
 8005cd0:	f8da 3000 	ldr.w	r3, [sl]
 8005cd4:	4499      	add	r9, r3
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	2300      	movs	r3, #0
 8005cda:	4620      	mov	r0, r4
 8005cdc:	4629      	mov	r1, r5
 8005cde:	f7fa ff13 	bl	8000b08 <__aeabi_dcmpeq>
 8005ce2:	b108      	cbz	r0, 8005ce8 <__cvt+0xa4>
 8005ce4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ce8:	2230      	movs	r2, #48	; 0x30
 8005cea:	9b03      	ldr	r3, [sp, #12]
 8005cec:	454b      	cmp	r3, r9
 8005cee:	d307      	bcc.n	8005d00 <__cvt+0xbc>
 8005cf0:	9b03      	ldr	r3, [sp, #12]
 8005cf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cf4:	1bdb      	subs	r3, r3, r7
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	b004      	add	sp, #16
 8005cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d00:	1c59      	adds	r1, r3, #1
 8005d02:	9103      	str	r1, [sp, #12]
 8005d04:	701a      	strb	r2, [r3, #0]
 8005d06:	e7f0      	b.n	8005cea <__cvt+0xa6>

08005d08 <__exponent>:
 8005d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2900      	cmp	r1, #0
 8005d0e:	bfb8      	it	lt
 8005d10:	4249      	neglt	r1, r1
 8005d12:	f803 2b02 	strb.w	r2, [r3], #2
 8005d16:	bfb4      	ite	lt
 8005d18:	222d      	movlt	r2, #45	; 0x2d
 8005d1a:	222b      	movge	r2, #43	; 0x2b
 8005d1c:	2909      	cmp	r1, #9
 8005d1e:	7042      	strb	r2, [r0, #1]
 8005d20:	dd2a      	ble.n	8005d78 <__exponent+0x70>
 8005d22:	f10d 0407 	add.w	r4, sp, #7
 8005d26:	46a4      	mov	ip, r4
 8005d28:	270a      	movs	r7, #10
 8005d2a:	46a6      	mov	lr, r4
 8005d2c:	460a      	mov	r2, r1
 8005d2e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005d32:	fb07 1516 	mls	r5, r7, r6, r1
 8005d36:	3530      	adds	r5, #48	; 0x30
 8005d38:	2a63      	cmp	r2, #99	; 0x63
 8005d3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005d3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005d42:	4631      	mov	r1, r6
 8005d44:	dcf1      	bgt.n	8005d2a <__exponent+0x22>
 8005d46:	3130      	adds	r1, #48	; 0x30
 8005d48:	f1ae 0502 	sub.w	r5, lr, #2
 8005d4c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005d50:	1c44      	adds	r4, r0, #1
 8005d52:	4629      	mov	r1, r5
 8005d54:	4561      	cmp	r1, ip
 8005d56:	d30a      	bcc.n	8005d6e <__exponent+0x66>
 8005d58:	f10d 0209 	add.w	r2, sp, #9
 8005d5c:	eba2 020e 	sub.w	r2, r2, lr
 8005d60:	4565      	cmp	r5, ip
 8005d62:	bf88      	it	hi
 8005d64:	2200      	movhi	r2, #0
 8005d66:	4413      	add	r3, r2
 8005d68:	1a18      	subs	r0, r3, r0
 8005d6a:	b003      	add	sp, #12
 8005d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d72:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005d76:	e7ed      	b.n	8005d54 <__exponent+0x4c>
 8005d78:	2330      	movs	r3, #48	; 0x30
 8005d7a:	3130      	adds	r1, #48	; 0x30
 8005d7c:	7083      	strb	r3, [r0, #2]
 8005d7e:	70c1      	strb	r1, [r0, #3]
 8005d80:	1d03      	adds	r3, r0, #4
 8005d82:	e7f1      	b.n	8005d68 <__exponent+0x60>

08005d84 <_printf_float>:
 8005d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d88:	ed2d 8b02 	vpush	{d8}
 8005d8c:	b08d      	sub	sp, #52	; 0x34
 8005d8e:	460c      	mov	r4, r1
 8005d90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005d94:	4616      	mov	r6, r2
 8005d96:	461f      	mov	r7, r3
 8005d98:	4605      	mov	r5, r0
 8005d9a:	f003 f98d 	bl	80090b8 <_localeconv_r>
 8005d9e:	f8d0 a000 	ldr.w	sl, [r0]
 8005da2:	4650      	mov	r0, sl
 8005da4:	f7fa fa34 	bl	8000210 <strlen>
 8005da8:	2300      	movs	r3, #0
 8005daa:	930a      	str	r3, [sp, #40]	; 0x28
 8005dac:	6823      	ldr	r3, [r4, #0]
 8005dae:	9305      	str	r3, [sp, #20]
 8005db0:	f8d8 3000 	ldr.w	r3, [r8]
 8005db4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005db8:	3307      	adds	r3, #7
 8005dba:	f023 0307 	bic.w	r3, r3, #7
 8005dbe:	f103 0208 	add.w	r2, r3, #8
 8005dc2:	f8c8 2000 	str.w	r2, [r8]
 8005dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005dce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005dd2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005dd6:	9307      	str	r3, [sp, #28]
 8005dd8:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ddc:	ee08 0a10 	vmov	s16, r0
 8005de0:	4b9f      	ldr	r3, [pc, #636]	; (8006060 <_printf_float+0x2dc>)
 8005de2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005de6:	f04f 32ff 	mov.w	r2, #4294967295
 8005dea:	f7fa febf 	bl	8000b6c <__aeabi_dcmpun>
 8005dee:	bb88      	cbnz	r0, 8005e54 <_printf_float+0xd0>
 8005df0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005df4:	4b9a      	ldr	r3, [pc, #616]	; (8006060 <_printf_float+0x2dc>)
 8005df6:	f04f 32ff 	mov.w	r2, #4294967295
 8005dfa:	f7fa fe99 	bl	8000b30 <__aeabi_dcmple>
 8005dfe:	bb48      	cbnz	r0, 8005e54 <_printf_float+0xd0>
 8005e00:	2200      	movs	r2, #0
 8005e02:	2300      	movs	r3, #0
 8005e04:	4640      	mov	r0, r8
 8005e06:	4649      	mov	r1, r9
 8005e08:	f7fa fe88 	bl	8000b1c <__aeabi_dcmplt>
 8005e0c:	b110      	cbz	r0, 8005e14 <_printf_float+0x90>
 8005e0e:	232d      	movs	r3, #45	; 0x2d
 8005e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e14:	4b93      	ldr	r3, [pc, #588]	; (8006064 <_printf_float+0x2e0>)
 8005e16:	4894      	ldr	r0, [pc, #592]	; (8006068 <_printf_float+0x2e4>)
 8005e18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005e1c:	bf94      	ite	ls
 8005e1e:	4698      	movls	r8, r3
 8005e20:	4680      	movhi	r8, r0
 8005e22:	2303      	movs	r3, #3
 8005e24:	6123      	str	r3, [r4, #16]
 8005e26:	9b05      	ldr	r3, [sp, #20]
 8005e28:	f023 0204 	bic.w	r2, r3, #4
 8005e2c:	6022      	str	r2, [r4, #0]
 8005e2e:	f04f 0900 	mov.w	r9, #0
 8005e32:	9700      	str	r7, [sp, #0]
 8005e34:	4633      	mov	r3, r6
 8005e36:	aa0b      	add	r2, sp, #44	; 0x2c
 8005e38:	4621      	mov	r1, r4
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	f000 f9d8 	bl	80061f0 <_printf_common>
 8005e40:	3001      	adds	r0, #1
 8005e42:	f040 8090 	bne.w	8005f66 <_printf_float+0x1e2>
 8005e46:	f04f 30ff 	mov.w	r0, #4294967295
 8005e4a:	b00d      	add	sp, #52	; 0x34
 8005e4c:	ecbd 8b02 	vpop	{d8}
 8005e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e54:	4642      	mov	r2, r8
 8005e56:	464b      	mov	r3, r9
 8005e58:	4640      	mov	r0, r8
 8005e5a:	4649      	mov	r1, r9
 8005e5c:	f7fa fe86 	bl	8000b6c <__aeabi_dcmpun>
 8005e60:	b140      	cbz	r0, 8005e74 <_printf_float+0xf0>
 8005e62:	464b      	mov	r3, r9
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	bfbc      	itt	lt
 8005e68:	232d      	movlt	r3, #45	; 0x2d
 8005e6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005e6e:	487f      	ldr	r0, [pc, #508]	; (800606c <_printf_float+0x2e8>)
 8005e70:	4b7f      	ldr	r3, [pc, #508]	; (8006070 <_printf_float+0x2ec>)
 8005e72:	e7d1      	b.n	8005e18 <_printf_float+0x94>
 8005e74:	6863      	ldr	r3, [r4, #4]
 8005e76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005e7a:	9206      	str	r2, [sp, #24]
 8005e7c:	1c5a      	adds	r2, r3, #1
 8005e7e:	d13f      	bne.n	8005f00 <_printf_float+0x17c>
 8005e80:	2306      	movs	r3, #6
 8005e82:	6063      	str	r3, [r4, #4]
 8005e84:	9b05      	ldr	r3, [sp, #20]
 8005e86:	6861      	ldr	r1, [r4, #4]
 8005e88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	9303      	str	r3, [sp, #12]
 8005e90:	ab0a      	add	r3, sp, #40	; 0x28
 8005e92:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005e96:	ab09      	add	r3, sp, #36	; 0x24
 8005e98:	ec49 8b10 	vmov	d0, r8, r9
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	6022      	str	r2, [r4, #0]
 8005ea0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	f7ff fecd 	bl	8005c44 <__cvt>
 8005eaa:	9b06      	ldr	r3, [sp, #24]
 8005eac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005eae:	2b47      	cmp	r3, #71	; 0x47
 8005eb0:	4680      	mov	r8, r0
 8005eb2:	d108      	bne.n	8005ec6 <_printf_float+0x142>
 8005eb4:	1cc8      	adds	r0, r1, #3
 8005eb6:	db02      	blt.n	8005ebe <_printf_float+0x13a>
 8005eb8:	6863      	ldr	r3, [r4, #4]
 8005eba:	4299      	cmp	r1, r3
 8005ebc:	dd41      	ble.n	8005f42 <_printf_float+0x1be>
 8005ebe:	f1ab 0b02 	sub.w	fp, fp, #2
 8005ec2:	fa5f fb8b 	uxtb.w	fp, fp
 8005ec6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005eca:	d820      	bhi.n	8005f0e <_printf_float+0x18a>
 8005ecc:	3901      	subs	r1, #1
 8005ece:	465a      	mov	r2, fp
 8005ed0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ed4:	9109      	str	r1, [sp, #36]	; 0x24
 8005ed6:	f7ff ff17 	bl	8005d08 <__exponent>
 8005eda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005edc:	1813      	adds	r3, r2, r0
 8005ede:	2a01      	cmp	r2, #1
 8005ee0:	4681      	mov	r9, r0
 8005ee2:	6123      	str	r3, [r4, #16]
 8005ee4:	dc02      	bgt.n	8005eec <_printf_float+0x168>
 8005ee6:	6822      	ldr	r2, [r4, #0]
 8005ee8:	07d2      	lsls	r2, r2, #31
 8005eea:	d501      	bpl.n	8005ef0 <_printf_float+0x16c>
 8005eec:	3301      	adds	r3, #1
 8005eee:	6123      	str	r3, [r4, #16]
 8005ef0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d09c      	beq.n	8005e32 <_printf_float+0xae>
 8005ef8:	232d      	movs	r3, #45	; 0x2d
 8005efa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005efe:	e798      	b.n	8005e32 <_printf_float+0xae>
 8005f00:	9a06      	ldr	r2, [sp, #24]
 8005f02:	2a47      	cmp	r2, #71	; 0x47
 8005f04:	d1be      	bne.n	8005e84 <_printf_float+0x100>
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1bc      	bne.n	8005e84 <_printf_float+0x100>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e7b9      	b.n	8005e82 <_printf_float+0xfe>
 8005f0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005f12:	d118      	bne.n	8005f46 <_printf_float+0x1c2>
 8005f14:	2900      	cmp	r1, #0
 8005f16:	6863      	ldr	r3, [r4, #4]
 8005f18:	dd0b      	ble.n	8005f32 <_printf_float+0x1ae>
 8005f1a:	6121      	str	r1, [r4, #16]
 8005f1c:	b913      	cbnz	r3, 8005f24 <_printf_float+0x1a0>
 8005f1e:	6822      	ldr	r2, [r4, #0]
 8005f20:	07d0      	lsls	r0, r2, #31
 8005f22:	d502      	bpl.n	8005f2a <_printf_float+0x1a6>
 8005f24:	3301      	adds	r3, #1
 8005f26:	440b      	add	r3, r1
 8005f28:	6123      	str	r3, [r4, #16]
 8005f2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f2c:	f04f 0900 	mov.w	r9, #0
 8005f30:	e7de      	b.n	8005ef0 <_printf_float+0x16c>
 8005f32:	b913      	cbnz	r3, 8005f3a <_printf_float+0x1b6>
 8005f34:	6822      	ldr	r2, [r4, #0]
 8005f36:	07d2      	lsls	r2, r2, #31
 8005f38:	d501      	bpl.n	8005f3e <_printf_float+0x1ba>
 8005f3a:	3302      	adds	r3, #2
 8005f3c:	e7f4      	b.n	8005f28 <_printf_float+0x1a4>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e7f2      	b.n	8005f28 <_printf_float+0x1a4>
 8005f42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f48:	4299      	cmp	r1, r3
 8005f4a:	db05      	blt.n	8005f58 <_printf_float+0x1d4>
 8005f4c:	6823      	ldr	r3, [r4, #0]
 8005f4e:	6121      	str	r1, [r4, #16]
 8005f50:	07d8      	lsls	r0, r3, #31
 8005f52:	d5ea      	bpl.n	8005f2a <_printf_float+0x1a6>
 8005f54:	1c4b      	adds	r3, r1, #1
 8005f56:	e7e7      	b.n	8005f28 <_printf_float+0x1a4>
 8005f58:	2900      	cmp	r1, #0
 8005f5a:	bfd4      	ite	le
 8005f5c:	f1c1 0202 	rsble	r2, r1, #2
 8005f60:	2201      	movgt	r2, #1
 8005f62:	4413      	add	r3, r2
 8005f64:	e7e0      	b.n	8005f28 <_printf_float+0x1a4>
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	055a      	lsls	r2, r3, #21
 8005f6a:	d407      	bmi.n	8005f7c <_printf_float+0x1f8>
 8005f6c:	6923      	ldr	r3, [r4, #16]
 8005f6e:	4642      	mov	r2, r8
 8005f70:	4631      	mov	r1, r6
 8005f72:	4628      	mov	r0, r5
 8005f74:	47b8      	blx	r7
 8005f76:	3001      	adds	r0, #1
 8005f78:	d12c      	bne.n	8005fd4 <_printf_float+0x250>
 8005f7a:	e764      	b.n	8005e46 <_printf_float+0xc2>
 8005f7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f80:	f240 80e0 	bls.w	8006144 <_printf_float+0x3c0>
 8005f84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f88:	2200      	movs	r2, #0
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	f7fa fdbc 	bl	8000b08 <__aeabi_dcmpeq>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d034      	beq.n	8005ffe <_printf_float+0x27a>
 8005f94:	4a37      	ldr	r2, [pc, #220]	; (8006074 <_printf_float+0x2f0>)
 8005f96:	2301      	movs	r3, #1
 8005f98:	4631      	mov	r1, r6
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	47b8      	blx	r7
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	f43f af51 	beq.w	8005e46 <_printf_float+0xc2>
 8005fa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	db02      	blt.n	8005fb2 <_printf_float+0x22e>
 8005fac:	6823      	ldr	r3, [r4, #0]
 8005fae:	07d8      	lsls	r0, r3, #31
 8005fb0:	d510      	bpl.n	8005fd4 <_printf_float+0x250>
 8005fb2:	ee18 3a10 	vmov	r3, s16
 8005fb6:	4652      	mov	r2, sl
 8005fb8:	4631      	mov	r1, r6
 8005fba:	4628      	mov	r0, r5
 8005fbc:	47b8      	blx	r7
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	f43f af41 	beq.w	8005e46 <_printf_float+0xc2>
 8005fc4:	f04f 0800 	mov.w	r8, #0
 8005fc8:	f104 091a 	add.w	r9, r4, #26
 8005fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	4543      	cmp	r3, r8
 8005fd2:	dc09      	bgt.n	8005fe8 <_printf_float+0x264>
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	079b      	lsls	r3, r3, #30
 8005fd8:	f100 8105 	bmi.w	80061e6 <_printf_float+0x462>
 8005fdc:	68e0      	ldr	r0, [r4, #12]
 8005fde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fe0:	4298      	cmp	r0, r3
 8005fe2:	bfb8      	it	lt
 8005fe4:	4618      	movlt	r0, r3
 8005fe6:	e730      	b.n	8005e4a <_printf_float+0xc6>
 8005fe8:	2301      	movs	r3, #1
 8005fea:	464a      	mov	r2, r9
 8005fec:	4631      	mov	r1, r6
 8005fee:	4628      	mov	r0, r5
 8005ff0:	47b8      	blx	r7
 8005ff2:	3001      	adds	r0, #1
 8005ff4:	f43f af27 	beq.w	8005e46 <_printf_float+0xc2>
 8005ff8:	f108 0801 	add.w	r8, r8, #1
 8005ffc:	e7e6      	b.n	8005fcc <_printf_float+0x248>
 8005ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006000:	2b00      	cmp	r3, #0
 8006002:	dc39      	bgt.n	8006078 <_printf_float+0x2f4>
 8006004:	4a1b      	ldr	r2, [pc, #108]	; (8006074 <_printf_float+0x2f0>)
 8006006:	2301      	movs	r3, #1
 8006008:	4631      	mov	r1, r6
 800600a:	4628      	mov	r0, r5
 800600c:	47b8      	blx	r7
 800600e:	3001      	adds	r0, #1
 8006010:	f43f af19 	beq.w	8005e46 <_printf_float+0xc2>
 8006014:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006018:	4313      	orrs	r3, r2
 800601a:	d102      	bne.n	8006022 <_printf_float+0x29e>
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	07d9      	lsls	r1, r3, #31
 8006020:	d5d8      	bpl.n	8005fd4 <_printf_float+0x250>
 8006022:	ee18 3a10 	vmov	r3, s16
 8006026:	4652      	mov	r2, sl
 8006028:	4631      	mov	r1, r6
 800602a:	4628      	mov	r0, r5
 800602c:	47b8      	blx	r7
 800602e:	3001      	adds	r0, #1
 8006030:	f43f af09 	beq.w	8005e46 <_printf_float+0xc2>
 8006034:	f04f 0900 	mov.w	r9, #0
 8006038:	f104 0a1a 	add.w	sl, r4, #26
 800603c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800603e:	425b      	negs	r3, r3
 8006040:	454b      	cmp	r3, r9
 8006042:	dc01      	bgt.n	8006048 <_printf_float+0x2c4>
 8006044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006046:	e792      	b.n	8005f6e <_printf_float+0x1ea>
 8006048:	2301      	movs	r3, #1
 800604a:	4652      	mov	r2, sl
 800604c:	4631      	mov	r1, r6
 800604e:	4628      	mov	r0, r5
 8006050:	47b8      	blx	r7
 8006052:	3001      	adds	r0, #1
 8006054:	f43f aef7 	beq.w	8005e46 <_printf_float+0xc2>
 8006058:	f109 0901 	add.w	r9, r9, #1
 800605c:	e7ee      	b.n	800603c <_printf_float+0x2b8>
 800605e:	bf00      	nop
 8006060:	7fefffff 	.word	0x7fefffff
 8006064:	08012efc 	.word	0x08012efc
 8006068:	08012f00 	.word	0x08012f00
 800606c:	08012f08 	.word	0x08012f08
 8006070:	08012f04 	.word	0x08012f04
 8006074:	08012f0c 	.word	0x08012f0c
 8006078:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800607a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800607c:	429a      	cmp	r2, r3
 800607e:	bfa8      	it	ge
 8006080:	461a      	movge	r2, r3
 8006082:	2a00      	cmp	r2, #0
 8006084:	4691      	mov	r9, r2
 8006086:	dc37      	bgt.n	80060f8 <_printf_float+0x374>
 8006088:	f04f 0b00 	mov.w	fp, #0
 800608c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006090:	f104 021a 	add.w	r2, r4, #26
 8006094:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006096:	9305      	str	r3, [sp, #20]
 8006098:	eba3 0309 	sub.w	r3, r3, r9
 800609c:	455b      	cmp	r3, fp
 800609e:	dc33      	bgt.n	8006108 <_printf_float+0x384>
 80060a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060a4:	429a      	cmp	r2, r3
 80060a6:	db3b      	blt.n	8006120 <_printf_float+0x39c>
 80060a8:	6823      	ldr	r3, [r4, #0]
 80060aa:	07da      	lsls	r2, r3, #31
 80060ac:	d438      	bmi.n	8006120 <_printf_float+0x39c>
 80060ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060b0:	9a05      	ldr	r2, [sp, #20]
 80060b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060b4:	1a9a      	subs	r2, r3, r2
 80060b6:	eba3 0901 	sub.w	r9, r3, r1
 80060ba:	4591      	cmp	r9, r2
 80060bc:	bfa8      	it	ge
 80060be:	4691      	movge	r9, r2
 80060c0:	f1b9 0f00 	cmp.w	r9, #0
 80060c4:	dc35      	bgt.n	8006132 <_printf_float+0x3ae>
 80060c6:	f04f 0800 	mov.w	r8, #0
 80060ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060ce:	f104 0a1a 	add.w	sl, r4, #26
 80060d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060d6:	1a9b      	subs	r3, r3, r2
 80060d8:	eba3 0309 	sub.w	r3, r3, r9
 80060dc:	4543      	cmp	r3, r8
 80060de:	f77f af79 	ble.w	8005fd4 <_printf_float+0x250>
 80060e2:	2301      	movs	r3, #1
 80060e4:	4652      	mov	r2, sl
 80060e6:	4631      	mov	r1, r6
 80060e8:	4628      	mov	r0, r5
 80060ea:	47b8      	blx	r7
 80060ec:	3001      	adds	r0, #1
 80060ee:	f43f aeaa 	beq.w	8005e46 <_printf_float+0xc2>
 80060f2:	f108 0801 	add.w	r8, r8, #1
 80060f6:	e7ec      	b.n	80060d2 <_printf_float+0x34e>
 80060f8:	4613      	mov	r3, r2
 80060fa:	4631      	mov	r1, r6
 80060fc:	4642      	mov	r2, r8
 80060fe:	4628      	mov	r0, r5
 8006100:	47b8      	blx	r7
 8006102:	3001      	adds	r0, #1
 8006104:	d1c0      	bne.n	8006088 <_printf_float+0x304>
 8006106:	e69e      	b.n	8005e46 <_printf_float+0xc2>
 8006108:	2301      	movs	r3, #1
 800610a:	4631      	mov	r1, r6
 800610c:	4628      	mov	r0, r5
 800610e:	9205      	str	r2, [sp, #20]
 8006110:	47b8      	blx	r7
 8006112:	3001      	adds	r0, #1
 8006114:	f43f ae97 	beq.w	8005e46 <_printf_float+0xc2>
 8006118:	9a05      	ldr	r2, [sp, #20]
 800611a:	f10b 0b01 	add.w	fp, fp, #1
 800611e:	e7b9      	b.n	8006094 <_printf_float+0x310>
 8006120:	ee18 3a10 	vmov	r3, s16
 8006124:	4652      	mov	r2, sl
 8006126:	4631      	mov	r1, r6
 8006128:	4628      	mov	r0, r5
 800612a:	47b8      	blx	r7
 800612c:	3001      	adds	r0, #1
 800612e:	d1be      	bne.n	80060ae <_printf_float+0x32a>
 8006130:	e689      	b.n	8005e46 <_printf_float+0xc2>
 8006132:	9a05      	ldr	r2, [sp, #20]
 8006134:	464b      	mov	r3, r9
 8006136:	4442      	add	r2, r8
 8006138:	4631      	mov	r1, r6
 800613a:	4628      	mov	r0, r5
 800613c:	47b8      	blx	r7
 800613e:	3001      	adds	r0, #1
 8006140:	d1c1      	bne.n	80060c6 <_printf_float+0x342>
 8006142:	e680      	b.n	8005e46 <_printf_float+0xc2>
 8006144:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006146:	2a01      	cmp	r2, #1
 8006148:	dc01      	bgt.n	800614e <_printf_float+0x3ca>
 800614a:	07db      	lsls	r3, r3, #31
 800614c:	d538      	bpl.n	80061c0 <_printf_float+0x43c>
 800614e:	2301      	movs	r3, #1
 8006150:	4642      	mov	r2, r8
 8006152:	4631      	mov	r1, r6
 8006154:	4628      	mov	r0, r5
 8006156:	47b8      	blx	r7
 8006158:	3001      	adds	r0, #1
 800615a:	f43f ae74 	beq.w	8005e46 <_printf_float+0xc2>
 800615e:	ee18 3a10 	vmov	r3, s16
 8006162:	4652      	mov	r2, sl
 8006164:	4631      	mov	r1, r6
 8006166:	4628      	mov	r0, r5
 8006168:	47b8      	blx	r7
 800616a:	3001      	adds	r0, #1
 800616c:	f43f ae6b 	beq.w	8005e46 <_printf_float+0xc2>
 8006170:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006174:	2200      	movs	r2, #0
 8006176:	2300      	movs	r3, #0
 8006178:	f7fa fcc6 	bl	8000b08 <__aeabi_dcmpeq>
 800617c:	b9d8      	cbnz	r0, 80061b6 <_printf_float+0x432>
 800617e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006180:	f108 0201 	add.w	r2, r8, #1
 8006184:	3b01      	subs	r3, #1
 8006186:	4631      	mov	r1, r6
 8006188:	4628      	mov	r0, r5
 800618a:	47b8      	blx	r7
 800618c:	3001      	adds	r0, #1
 800618e:	d10e      	bne.n	80061ae <_printf_float+0x42a>
 8006190:	e659      	b.n	8005e46 <_printf_float+0xc2>
 8006192:	2301      	movs	r3, #1
 8006194:	4652      	mov	r2, sl
 8006196:	4631      	mov	r1, r6
 8006198:	4628      	mov	r0, r5
 800619a:	47b8      	blx	r7
 800619c:	3001      	adds	r0, #1
 800619e:	f43f ae52 	beq.w	8005e46 <_printf_float+0xc2>
 80061a2:	f108 0801 	add.w	r8, r8, #1
 80061a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061a8:	3b01      	subs	r3, #1
 80061aa:	4543      	cmp	r3, r8
 80061ac:	dcf1      	bgt.n	8006192 <_printf_float+0x40e>
 80061ae:	464b      	mov	r3, r9
 80061b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80061b4:	e6dc      	b.n	8005f70 <_printf_float+0x1ec>
 80061b6:	f04f 0800 	mov.w	r8, #0
 80061ba:	f104 0a1a 	add.w	sl, r4, #26
 80061be:	e7f2      	b.n	80061a6 <_printf_float+0x422>
 80061c0:	2301      	movs	r3, #1
 80061c2:	4642      	mov	r2, r8
 80061c4:	e7df      	b.n	8006186 <_printf_float+0x402>
 80061c6:	2301      	movs	r3, #1
 80061c8:	464a      	mov	r2, r9
 80061ca:	4631      	mov	r1, r6
 80061cc:	4628      	mov	r0, r5
 80061ce:	47b8      	blx	r7
 80061d0:	3001      	adds	r0, #1
 80061d2:	f43f ae38 	beq.w	8005e46 <_printf_float+0xc2>
 80061d6:	f108 0801 	add.w	r8, r8, #1
 80061da:	68e3      	ldr	r3, [r4, #12]
 80061dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061de:	1a5b      	subs	r3, r3, r1
 80061e0:	4543      	cmp	r3, r8
 80061e2:	dcf0      	bgt.n	80061c6 <_printf_float+0x442>
 80061e4:	e6fa      	b.n	8005fdc <_printf_float+0x258>
 80061e6:	f04f 0800 	mov.w	r8, #0
 80061ea:	f104 0919 	add.w	r9, r4, #25
 80061ee:	e7f4      	b.n	80061da <_printf_float+0x456>

080061f0 <_printf_common>:
 80061f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061f4:	4616      	mov	r6, r2
 80061f6:	4699      	mov	r9, r3
 80061f8:	688a      	ldr	r2, [r1, #8]
 80061fa:	690b      	ldr	r3, [r1, #16]
 80061fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006200:	4293      	cmp	r3, r2
 8006202:	bfb8      	it	lt
 8006204:	4613      	movlt	r3, r2
 8006206:	6033      	str	r3, [r6, #0]
 8006208:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800620c:	4607      	mov	r7, r0
 800620e:	460c      	mov	r4, r1
 8006210:	b10a      	cbz	r2, 8006216 <_printf_common+0x26>
 8006212:	3301      	adds	r3, #1
 8006214:	6033      	str	r3, [r6, #0]
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	0699      	lsls	r1, r3, #26
 800621a:	bf42      	ittt	mi
 800621c:	6833      	ldrmi	r3, [r6, #0]
 800621e:	3302      	addmi	r3, #2
 8006220:	6033      	strmi	r3, [r6, #0]
 8006222:	6825      	ldr	r5, [r4, #0]
 8006224:	f015 0506 	ands.w	r5, r5, #6
 8006228:	d106      	bne.n	8006238 <_printf_common+0x48>
 800622a:	f104 0a19 	add.w	sl, r4, #25
 800622e:	68e3      	ldr	r3, [r4, #12]
 8006230:	6832      	ldr	r2, [r6, #0]
 8006232:	1a9b      	subs	r3, r3, r2
 8006234:	42ab      	cmp	r3, r5
 8006236:	dc26      	bgt.n	8006286 <_printf_common+0x96>
 8006238:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800623c:	1e13      	subs	r3, r2, #0
 800623e:	6822      	ldr	r2, [r4, #0]
 8006240:	bf18      	it	ne
 8006242:	2301      	movne	r3, #1
 8006244:	0692      	lsls	r2, r2, #26
 8006246:	d42b      	bmi.n	80062a0 <_printf_common+0xb0>
 8006248:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800624c:	4649      	mov	r1, r9
 800624e:	4638      	mov	r0, r7
 8006250:	47c0      	blx	r8
 8006252:	3001      	adds	r0, #1
 8006254:	d01e      	beq.n	8006294 <_printf_common+0xa4>
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	68e5      	ldr	r5, [r4, #12]
 800625a:	6832      	ldr	r2, [r6, #0]
 800625c:	f003 0306 	and.w	r3, r3, #6
 8006260:	2b04      	cmp	r3, #4
 8006262:	bf08      	it	eq
 8006264:	1aad      	subeq	r5, r5, r2
 8006266:	68a3      	ldr	r3, [r4, #8]
 8006268:	6922      	ldr	r2, [r4, #16]
 800626a:	bf0c      	ite	eq
 800626c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006270:	2500      	movne	r5, #0
 8006272:	4293      	cmp	r3, r2
 8006274:	bfc4      	itt	gt
 8006276:	1a9b      	subgt	r3, r3, r2
 8006278:	18ed      	addgt	r5, r5, r3
 800627a:	2600      	movs	r6, #0
 800627c:	341a      	adds	r4, #26
 800627e:	42b5      	cmp	r5, r6
 8006280:	d11a      	bne.n	80062b8 <_printf_common+0xc8>
 8006282:	2000      	movs	r0, #0
 8006284:	e008      	b.n	8006298 <_printf_common+0xa8>
 8006286:	2301      	movs	r3, #1
 8006288:	4652      	mov	r2, sl
 800628a:	4649      	mov	r1, r9
 800628c:	4638      	mov	r0, r7
 800628e:	47c0      	blx	r8
 8006290:	3001      	adds	r0, #1
 8006292:	d103      	bne.n	800629c <_printf_common+0xac>
 8006294:	f04f 30ff 	mov.w	r0, #4294967295
 8006298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800629c:	3501      	adds	r5, #1
 800629e:	e7c6      	b.n	800622e <_printf_common+0x3e>
 80062a0:	18e1      	adds	r1, r4, r3
 80062a2:	1c5a      	adds	r2, r3, #1
 80062a4:	2030      	movs	r0, #48	; 0x30
 80062a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062aa:	4422      	add	r2, r4
 80062ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062b4:	3302      	adds	r3, #2
 80062b6:	e7c7      	b.n	8006248 <_printf_common+0x58>
 80062b8:	2301      	movs	r3, #1
 80062ba:	4622      	mov	r2, r4
 80062bc:	4649      	mov	r1, r9
 80062be:	4638      	mov	r0, r7
 80062c0:	47c0      	blx	r8
 80062c2:	3001      	adds	r0, #1
 80062c4:	d0e6      	beq.n	8006294 <_printf_common+0xa4>
 80062c6:	3601      	adds	r6, #1
 80062c8:	e7d9      	b.n	800627e <_printf_common+0x8e>
	...

080062cc <_printf_i>:
 80062cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062d0:	7e0f      	ldrb	r7, [r1, #24]
 80062d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062d4:	2f78      	cmp	r7, #120	; 0x78
 80062d6:	4691      	mov	r9, r2
 80062d8:	4680      	mov	r8, r0
 80062da:	460c      	mov	r4, r1
 80062dc:	469a      	mov	sl, r3
 80062de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062e2:	d807      	bhi.n	80062f4 <_printf_i+0x28>
 80062e4:	2f62      	cmp	r7, #98	; 0x62
 80062e6:	d80a      	bhi.n	80062fe <_printf_i+0x32>
 80062e8:	2f00      	cmp	r7, #0
 80062ea:	f000 80d8 	beq.w	800649e <_printf_i+0x1d2>
 80062ee:	2f58      	cmp	r7, #88	; 0x58
 80062f0:	f000 80a3 	beq.w	800643a <_printf_i+0x16e>
 80062f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062fc:	e03a      	b.n	8006374 <_printf_i+0xa8>
 80062fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006302:	2b15      	cmp	r3, #21
 8006304:	d8f6      	bhi.n	80062f4 <_printf_i+0x28>
 8006306:	a101      	add	r1, pc, #4	; (adr r1, 800630c <_printf_i+0x40>)
 8006308:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800630c:	08006365 	.word	0x08006365
 8006310:	08006379 	.word	0x08006379
 8006314:	080062f5 	.word	0x080062f5
 8006318:	080062f5 	.word	0x080062f5
 800631c:	080062f5 	.word	0x080062f5
 8006320:	080062f5 	.word	0x080062f5
 8006324:	08006379 	.word	0x08006379
 8006328:	080062f5 	.word	0x080062f5
 800632c:	080062f5 	.word	0x080062f5
 8006330:	080062f5 	.word	0x080062f5
 8006334:	080062f5 	.word	0x080062f5
 8006338:	08006485 	.word	0x08006485
 800633c:	080063a9 	.word	0x080063a9
 8006340:	08006467 	.word	0x08006467
 8006344:	080062f5 	.word	0x080062f5
 8006348:	080062f5 	.word	0x080062f5
 800634c:	080064a7 	.word	0x080064a7
 8006350:	080062f5 	.word	0x080062f5
 8006354:	080063a9 	.word	0x080063a9
 8006358:	080062f5 	.word	0x080062f5
 800635c:	080062f5 	.word	0x080062f5
 8006360:	0800646f 	.word	0x0800646f
 8006364:	682b      	ldr	r3, [r5, #0]
 8006366:	1d1a      	adds	r2, r3, #4
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	602a      	str	r2, [r5, #0]
 800636c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006370:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006374:	2301      	movs	r3, #1
 8006376:	e0a3      	b.n	80064c0 <_printf_i+0x1f4>
 8006378:	6820      	ldr	r0, [r4, #0]
 800637a:	6829      	ldr	r1, [r5, #0]
 800637c:	0606      	lsls	r6, r0, #24
 800637e:	f101 0304 	add.w	r3, r1, #4
 8006382:	d50a      	bpl.n	800639a <_printf_i+0xce>
 8006384:	680e      	ldr	r6, [r1, #0]
 8006386:	602b      	str	r3, [r5, #0]
 8006388:	2e00      	cmp	r6, #0
 800638a:	da03      	bge.n	8006394 <_printf_i+0xc8>
 800638c:	232d      	movs	r3, #45	; 0x2d
 800638e:	4276      	negs	r6, r6
 8006390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006394:	485e      	ldr	r0, [pc, #376]	; (8006510 <_printf_i+0x244>)
 8006396:	230a      	movs	r3, #10
 8006398:	e019      	b.n	80063ce <_printf_i+0x102>
 800639a:	680e      	ldr	r6, [r1, #0]
 800639c:	602b      	str	r3, [r5, #0]
 800639e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80063a2:	bf18      	it	ne
 80063a4:	b236      	sxthne	r6, r6
 80063a6:	e7ef      	b.n	8006388 <_printf_i+0xbc>
 80063a8:	682b      	ldr	r3, [r5, #0]
 80063aa:	6820      	ldr	r0, [r4, #0]
 80063ac:	1d19      	adds	r1, r3, #4
 80063ae:	6029      	str	r1, [r5, #0]
 80063b0:	0601      	lsls	r1, r0, #24
 80063b2:	d501      	bpl.n	80063b8 <_printf_i+0xec>
 80063b4:	681e      	ldr	r6, [r3, #0]
 80063b6:	e002      	b.n	80063be <_printf_i+0xf2>
 80063b8:	0646      	lsls	r6, r0, #25
 80063ba:	d5fb      	bpl.n	80063b4 <_printf_i+0xe8>
 80063bc:	881e      	ldrh	r6, [r3, #0]
 80063be:	4854      	ldr	r0, [pc, #336]	; (8006510 <_printf_i+0x244>)
 80063c0:	2f6f      	cmp	r7, #111	; 0x6f
 80063c2:	bf0c      	ite	eq
 80063c4:	2308      	moveq	r3, #8
 80063c6:	230a      	movne	r3, #10
 80063c8:	2100      	movs	r1, #0
 80063ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063ce:	6865      	ldr	r5, [r4, #4]
 80063d0:	60a5      	str	r5, [r4, #8]
 80063d2:	2d00      	cmp	r5, #0
 80063d4:	bfa2      	ittt	ge
 80063d6:	6821      	ldrge	r1, [r4, #0]
 80063d8:	f021 0104 	bicge.w	r1, r1, #4
 80063dc:	6021      	strge	r1, [r4, #0]
 80063de:	b90e      	cbnz	r6, 80063e4 <_printf_i+0x118>
 80063e0:	2d00      	cmp	r5, #0
 80063e2:	d04d      	beq.n	8006480 <_printf_i+0x1b4>
 80063e4:	4615      	mov	r5, r2
 80063e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80063ea:	fb03 6711 	mls	r7, r3, r1, r6
 80063ee:	5dc7      	ldrb	r7, [r0, r7]
 80063f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063f4:	4637      	mov	r7, r6
 80063f6:	42bb      	cmp	r3, r7
 80063f8:	460e      	mov	r6, r1
 80063fa:	d9f4      	bls.n	80063e6 <_printf_i+0x11a>
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d10b      	bne.n	8006418 <_printf_i+0x14c>
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	07de      	lsls	r6, r3, #31
 8006404:	d508      	bpl.n	8006418 <_printf_i+0x14c>
 8006406:	6923      	ldr	r3, [r4, #16]
 8006408:	6861      	ldr	r1, [r4, #4]
 800640a:	4299      	cmp	r1, r3
 800640c:	bfde      	ittt	le
 800640e:	2330      	movle	r3, #48	; 0x30
 8006410:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006414:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006418:	1b52      	subs	r2, r2, r5
 800641a:	6122      	str	r2, [r4, #16]
 800641c:	f8cd a000 	str.w	sl, [sp]
 8006420:	464b      	mov	r3, r9
 8006422:	aa03      	add	r2, sp, #12
 8006424:	4621      	mov	r1, r4
 8006426:	4640      	mov	r0, r8
 8006428:	f7ff fee2 	bl	80061f0 <_printf_common>
 800642c:	3001      	adds	r0, #1
 800642e:	d14c      	bne.n	80064ca <_printf_i+0x1fe>
 8006430:	f04f 30ff 	mov.w	r0, #4294967295
 8006434:	b004      	add	sp, #16
 8006436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800643a:	4835      	ldr	r0, [pc, #212]	; (8006510 <_printf_i+0x244>)
 800643c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006440:	6829      	ldr	r1, [r5, #0]
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	f851 6b04 	ldr.w	r6, [r1], #4
 8006448:	6029      	str	r1, [r5, #0]
 800644a:	061d      	lsls	r5, r3, #24
 800644c:	d514      	bpl.n	8006478 <_printf_i+0x1ac>
 800644e:	07df      	lsls	r7, r3, #31
 8006450:	bf44      	itt	mi
 8006452:	f043 0320 	orrmi.w	r3, r3, #32
 8006456:	6023      	strmi	r3, [r4, #0]
 8006458:	b91e      	cbnz	r6, 8006462 <_printf_i+0x196>
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	f023 0320 	bic.w	r3, r3, #32
 8006460:	6023      	str	r3, [r4, #0]
 8006462:	2310      	movs	r3, #16
 8006464:	e7b0      	b.n	80063c8 <_printf_i+0xfc>
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	f043 0320 	orr.w	r3, r3, #32
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	2378      	movs	r3, #120	; 0x78
 8006470:	4828      	ldr	r0, [pc, #160]	; (8006514 <_printf_i+0x248>)
 8006472:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006476:	e7e3      	b.n	8006440 <_printf_i+0x174>
 8006478:	0659      	lsls	r1, r3, #25
 800647a:	bf48      	it	mi
 800647c:	b2b6      	uxthmi	r6, r6
 800647e:	e7e6      	b.n	800644e <_printf_i+0x182>
 8006480:	4615      	mov	r5, r2
 8006482:	e7bb      	b.n	80063fc <_printf_i+0x130>
 8006484:	682b      	ldr	r3, [r5, #0]
 8006486:	6826      	ldr	r6, [r4, #0]
 8006488:	6961      	ldr	r1, [r4, #20]
 800648a:	1d18      	adds	r0, r3, #4
 800648c:	6028      	str	r0, [r5, #0]
 800648e:	0635      	lsls	r5, r6, #24
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	d501      	bpl.n	8006498 <_printf_i+0x1cc>
 8006494:	6019      	str	r1, [r3, #0]
 8006496:	e002      	b.n	800649e <_printf_i+0x1d2>
 8006498:	0670      	lsls	r0, r6, #25
 800649a:	d5fb      	bpl.n	8006494 <_printf_i+0x1c8>
 800649c:	8019      	strh	r1, [r3, #0]
 800649e:	2300      	movs	r3, #0
 80064a0:	6123      	str	r3, [r4, #16]
 80064a2:	4615      	mov	r5, r2
 80064a4:	e7ba      	b.n	800641c <_printf_i+0x150>
 80064a6:	682b      	ldr	r3, [r5, #0]
 80064a8:	1d1a      	adds	r2, r3, #4
 80064aa:	602a      	str	r2, [r5, #0]
 80064ac:	681d      	ldr	r5, [r3, #0]
 80064ae:	6862      	ldr	r2, [r4, #4]
 80064b0:	2100      	movs	r1, #0
 80064b2:	4628      	mov	r0, r5
 80064b4:	f7f9 feb4 	bl	8000220 <memchr>
 80064b8:	b108      	cbz	r0, 80064be <_printf_i+0x1f2>
 80064ba:	1b40      	subs	r0, r0, r5
 80064bc:	6060      	str	r0, [r4, #4]
 80064be:	6863      	ldr	r3, [r4, #4]
 80064c0:	6123      	str	r3, [r4, #16]
 80064c2:	2300      	movs	r3, #0
 80064c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064c8:	e7a8      	b.n	800641c <_printf_i+0x150>
 80064ca:	6923      	ldr	r3, [r4, #16]
 80064cc:	462a      	mov	r2, r5
 80064ce:	4649      	mov	r1, r9
 80064d0:	4640      	mov	r0, r8
 80064d2:	47d0      	blx	sl
 80064d4:	3001      	adds	r0, #1
 80064d6:	d0ab      	beq.n	8006430 <_printf_i+0x164>
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	079b      	lsls	r3, r3, #30
 80064dc:	d413      	bmi.n	8006506 <_printf_i+0x23a>
 80064de:	68e0      	ldr	r0, [r4, #12]
 80064e0:	9b03      	ldr	r3, [sp, #12]
 80064e2:	4298      	cmp	r0, r3
 80064e4:	bfb8      	it	lt
 80064e6:	4618      	movlt	r0, r3
 80064e8:	e7a4      	b.n	8006434 <_printf_i+0x168>
 80064ea:	2301      	movs	r3, #1
 80064ec:	4632      	mov	r2, r6
 80064ee:	4649      	mov	r1, r9
 80064f0:	4640      	mov	r0, r8
 80064f2:	47d0      	blx	sl
 80064f4:	3001      	adds	r0, #1
 80064f6:	d09b      	beq.n	8006430 <_printf_i+0x164>
 80064f8:	3501      	adds	r5, #1
 80064fa:	68e3      	ldr	r3, [r4, #12]
 80064fc:	9903      	ldr	r1, [sp, #12]
 80064fe:	1a5b      	subs	r3, r3, r1
 8006500:	42ab      	cmp	r3, r5
 8006502:	dcf2      	bgt.n	80064ea <_printf_i+0x21e>
 8006504:	e7eb      	b.n	80064de <_printf_i+0x212>
 8006506:	2500      	movs	r5, #0
 8006508:	f104 0619 	add.w	r6, r4, #25
 800650c:	e7f5      	b.n	80064fa <_printf_i+0x22e>
 800650e:	bf00      	nop
 8006510:	08012f0e 	.word	0x08012f0e
 8006514:	08012f1f 	.word	0x08012f1f

08006518 <_scanf_float>:
 8006518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651c:	b087      	sub	sp, #28
 800651e:	4617      	mov	r7, r2
 8006520:	9303      	str	r3, [sp, #12]
 8006522:	688b      	ldr	r3, [r1, #8]
 8006524:	1e5a      	subs	r2, r3, #1
 8006526:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800652a:	bf83      	ittte	hi
 800652c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006530:	195b      	addhi	r3, r3, r5
 8006532:	9302      	strhi	r3, [sp, #8]
 8006534:	2300      	movls	r3, #0
 8006536:	bf86      	itte	hi
 8006538:	f240 135d 	movwhi	r3, #349	; 0x15d
 800653c:	608b      	strhi	r3, [r1, #8]
 800653e:	9302      	strls	r3, [sp, #8]
 8006540:	680b      	ldr	r3, [r1, #0]
 8006542:	468b      	mov	fp, r1
 8006544:	2500      	movs	r5, #0
 8006546:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800654a:	f84b 3b1c 	str.w	r3, [fp], #28
 800654e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006552:	4680      	mov	r8, r0
 8006554:	460c      	mov	r4, r1
 8006556:	465e      	mov	r6, fp
 8006558:	46aa      	mov	sl, r5
 800655a:	46a9      	mov	r9, r5
 800655c:	9501      	str	r5, [sp, #4]
 800655e:	68a2      	ldr	r2, [r4, #8]
 8006560:	b152      	cbz	r2, 8006578 <_scanf_float+0x60>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	2b4e      	cmp	r3, #78	; 0x4e
 8006568:	d864      	bhi.n	8006634 <_scanf_float+0x11c>
 800656a:	2b40      	cmp	r3, #64	; 0x40
 800656c:	d83c      	bhi.n	80065e8 <_scanf_float+0xd0>
 800656e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006572:	b2c8      	uxtb	r0, r1
 8006574:	280e      	cmp	r0, #14
 8006576:	d93a      	bls.n	80065ee <_scanf_float+0xd6>
 8006578:	f1b9 0f00 	cmp.w	r9, #0
 800657c:	d003      	beq.n	8006586 <_scanf_float+0x6e>
 800657e:	6823      	ldr	r3, [r4, #0]
 8006580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006584:	6023      	str	r3, [r4, #0]
 8006586:	f10a 3aff 	add.w	sl, sl, #4294967295
 800658a:	f1ba 0f01 	cmp.w	sl, #1
 800658e:	f200 8113 	bhi.w	80067b8 <_scanf_float+0x2a0>
 8006592:	455e      	cmp	r6, fp
 8006594:	f200 8105 	bhi.w	80067a2 <_scanf_float+0x28a>
 8006598:	2501      	movs	r5, #1
 800659a:	4628      	mov	r0, r5
 800659c:	b007      	add	sp, #28
 800659e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80065a6:	2a0d      	cmp	r2, #13
 80065a8:	d8e6      	bhi.n	8006578 <_scanf_float+0x60>
 80065aa:	a101      	add	r1, pc, #4	; (adr r1, 80065b0 <_scanf_float+0x98>)
 80065ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80065b0:	080066ef 	.word	0x080066ef
 80065b4:	08006579 	.word	0x08006579
 80065b8:	08006579 	.word	0x08006579
 80065bc:	08006579 	.word	0x08006579
 80065c0:	0800674f 	.word	0x0800674f
 80065c4:	08006727 	.word	0x08006727
 80065c8:	08006579 	.word	0x08006579
 80065cc:	08006579 	.word	0x08006579
 80065d0:	080066fd 	.word	0x080066fd
 80065d4:	08006579 	.word	0x08006579
 80065d8:	08006579 	.word	0x08006579
 80065dc:	08006579 	.word	0x08006579
 80065e0:	08006579 	.word	0x08006579
 80065e4:	080066b5 	.word	0x080066b5
 80065e8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80065ec:	e7db      	b.n	80065a6 <_scanf_float+0x8e>
 80065ee:	290e      	cmp	r1, #14
 80065f0:	d8c2      	bhi.n	8006578 <_scanf_float+0x60>
 80065f2:	a001      	add	r0, pc, #4	; (adr r0, 80065f8 <_scanf_float+0xe0>)
 80065f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80065f8:	080066a7 	.word	0x080066a7
 80065fc:	08006579 	.word	0x08006579
 8006600:	080066a7 	.word	0x080066a7
 8006604:	0800673b 	.word	0x0800673b
 8006608:	08006579 	.word	0x08006579
 800660c:	08006655 	.word	0x08006655
 8006610:	08006691 	.word	0x08006691
 8006614:	08006691 	.word	0x08006691
 8006618:	08006691 	.word	0x08006691
 800661c:	08006691 	.word	0x08006691
 8006620:	08006691 	.word	0x08006691
 8006624:	08006691 	.word	0x08006691
 8006628:	08006691 	.word	0x08006691
 800662c:	08006691 	.word	0x08006691
 8006630:	08006691 	.word	0x08006691
 8006634:	2b6e      	cmp	r3, #110	; 0x6e
 8006636:	d809      	bhi.n	800664c <_scanf_float+0x134>
 8006638:	2b60      	cmp	r3, #96	; 0x60
 800663a:	d8b2      	bhi.n	80065a2 <_scanf_float+0x8a>
 800663c:	2b54      	cmp	r3, #84	; 0x54
 800663e:	d077      	beq.n	8006730 <_scanf_float+0x218>
 8006640:	2b59      	cmp	r3, #89	; 0x59
 8006642:	d199      	bne.n	8006578 <_scanf_float+0x60>
 8006644:	2d07      	cmp	r5, #7
 8006646:	d197      	bne.n	8006578 <_scanf_float+0x60>
 8006648:	2508      	movs	r5, #8
 800664a:	e029      	b.n	80066a0 <_scanf_float+0x188>
 800664c:	2b74      	cmp	r3, #116	; 0x74
 800664e:	d06f      	beq.n	8006730 <_scanf_float+0x218>
 8006650:	2b79      	cmp	r3, #121	; 0x79
 8006652:	e7f6      	b.n	8006642 <_scanf_float+0x12a>
 8006654:	6821      	ldr	r1, [r4, #0]
 8006656:	05c8      	lsls	r0, r1, #23
 8006658:	d51a      	bpl.n	8006690 <_scanf_float+0x178>
 800665a:	9b02      	ldr	r3, [sp, #8]
 800665c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006660:	6021      	str	r1, [r4, #0]
 8006662:	f109 0901 	add.w	r9, r9, #1
 8006666:	b11b      	cbz	r3, 8006670 <_scanf_float+0x158>
 8006668:	3b01      	subs	r3, #1
 800666a:	3201      	adds	r2, #1
 800666c:	9302      	str	r3, [sp, #8]
 800666e:	60a2      	str	r2, [r4, #8]
 8006670:	68a3      	ldr	r3, [r4, #8]
 8006672:	3b01      	subs	r3, #1
 8006674:	60a3      	str	r3, [r4, #8]
 8006676:	6923      	ldr	r3, [r4, #16]
 8006678:	3301      	adds	r3, #1
 800667a:	6123      	str	r3, [r4, #16]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	3b01      	subs	r3, #1
 8006680:	2b00      	cmp	r3, #0
 8006682:	607b      	str	r3, [r7, #4]
 8006684:	f340 8084 	ble.w	8006790 <_scanf_float+0x278>
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	3301      	adds	r3, #1
 800668c:	603b      	str	r3, [r7, #0]
 800668e:	e766      	b.n	800655e <_scanf_float+0x46>
 8006690:	eb1a 0f05 	cmn.w	sl, r5
 8006694:	f47f af70 	bne.w	8006578 <_scanf_float+0x60>
 8006698:	6822      	ldr	r2, [r4, #0]
 800669a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800669e:	6022      	str	r2, [r4, #0]
 80066a0:	f806 3b01 	strb.w	r3, [r6], #1
 80066a4:	e7e4      	b.n	8006670 <_scanf_float+0x158>
 80066a6:	6822      	ldr	r2, [r4, #0]
 80066a8:	0610      	lsls	r0, r2, #24
 80066aa:	f57f af65 	bpl.w	8006578 <_scanf_float+0x60>
 80066ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066b2:	e7f4      	b.n	800669e <_scanf_float+0x186>
 80066b4:	f1ba 0f00 	cmp.w	sl, #0
 80066b8:	d10e      	bne.n	80066d8 <_scanf_float+0x1c0>
 80066ba:	f1b9 0f00 	cmp.w	r9, #0
 80066be:	d10e      	bne.n	80066de <_scanf_float+0x1c6>
 80066c0:	6822      	ldr	r2, [r4, #0]
 80066c2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80066c6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80066ca:	d108      	bne.n	80066de <_scanf_float+0x1c6>
 80066cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80066d0:	6022      	str	r2, [r4, #0]
 80066d2:	f04f 0a01 	mov.w	sl, #1
 80066d6:	e7e3      	b.n	80066a0 <_scanf_float+0x188>
 80066d8:	f1ba 0f02 	cmp.w	sl, #2
 80066dc:	d055      	beq.n	800678a <_scanf_float+0x272>
 80066de:	2d01      	cmp	r5, #1
 80066e0:	d002      	beq.n	80066e8 <_scanf_float+0x1d0>
 80066e2:	2d04      	cmp	r5, #4
 80066e4:	f47f af48 	bne.w	8006578 <_scanf_float+0x60>
 80066e8:	3501      	adds	r5, #1
 80066ea:	b2ed      	uxtb	r5, r5
 80066ec:	e7d8      	b.n	80066a0 <_scanf_float+0x188>
 80066ee:	f1ba 0f01 	cmp.w	sl, #1
 80066f2:	f47f af41 	bne.w	8006578 <_scanf_float+0x60>
 80066f6:	f04f 0a02 	mov.w	sl, #2
 80066fa:	e7d1      	b.n	80066a0 <_scanf_float+0x188>
 80066fc:	b97d      	cbnz	r5, 800671e <_scanf_float+0x206>
 80066fe:	f1b9 0f00 	cmp.w	r9, #0
 8006702:	f47f af3c 	bne.w	800657e <_scanf_float+0x66>
 8006706:	6822      	ldr	r2, [r4, #0]
 8006708:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800670c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006710:	f47f af39 	bne.w	8006586 <_scanf_float+0x6e>
 8006714:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006718:	6022      	str	r2, [r4, #0]
 800671a:	2501      	movs	r5, #1
 800671c:	e7c0      	b.n	80066a0 <_scanf_float+0x188>
 800671e:	2d03      	cmp	r5, #3
 8006720:	d0e2      	beq.n	80066e8 <_scanf_float+0x1d0>
 8006722:	2d05      	cmp	r5, #5
 8006724:	e7de      	b.n	80066e4 <_scanf_float+0x1cc>
 8006726:	2d02      	cmp	r5, #2
 8006728:	f47f af26 	bne.w	8006578 <_scanf_float+0x60>
 800672c:	2503      	movs	r5, #3
 800672e:	e7b7      	b.n	80066a0 <_scanf_float+0x188>
 8006730:	2d06      	cmp	r5, #6
 8006732:	f47f af21 	bne.w	8006578 <_scanf_float+0x60>
 8006736:	2507      	movs	r5, #7
 8006738:	e7b2      	b.n	80066a0 <_scanf_float+0x188>
 800673a:	6822      	ldr	r2, [r4, #0]
 800673c:	0591      	lsls	r1, r2, #22
 800673e:	f57f af1b 	bpl.w	8006578 <_scanf_float+0x60>
 8006742:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006746:	6022      	str	r2, [r4, #0]
 8006748:	f8cd 9004 	str.w	r9, [sp, #4]
 800674c:	e7a8      	b.n	80066a0 <_scanf_float+0x188>
 800674e:	6822      	ldr	r2, [r4, #0]
 8006750:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006754:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006758:	d006      	beq.n	8006768 <_scanf_float+0x250>
 800675a:	0550      	lsls	r0, r2, #21
 800675c:	f57f af0c 	bpl.w	8006578 <_scanf_float+0x60>
 8006760:	f1b9 0f00 	cmp.w	r9, #0
 8006764:	f43f af0f 	beq.w	8006586 <_scanf_float+0x6e>
 8006768:	0591      	lsls	r1, r2, #22
 800676a:	bf58      	it	pl
 800676c:	9901      	ldrpl	r1, [sp, #4]
 800676e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006772:	bf58      	it	pl
 8006774:	eba9 0101 	subpl.w	r1, r9, r1
 8006778:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800677c:	bf58      	it	pl
 800677e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006782:	6022      	str	r2, [r4, #0]
 8006784:	f04f 0900 	mov.w	r9, #0
 8006788:	e78a      	b.n	80066a0 <_scanf_float+0x188>
 800678a:	f04f 0a03 	mov.w	sl, #3
 800678e:	e787      	b.n	80066a0 <_scanf_float+0x188>
 8006790:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006794:	4639      	mov	r1, r7
 8006796:	4640      	mov	r0, r8
 8006798:	4798      	blx	r3
 800679a:	2800      	cmp	r0, #0
 800679c:	f43f aedf 	beq.w	800655e <_scanf_float+0x46>
 80067a0:	e6ea      	b.n	8006578 <_scanf_float+0x60>
 80067a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067aa:	463a      	mov	r2, r7
 80067ac:	4640      	mov	r0, r8
 80067ae:	4798      	blx	r3
 80067b0:	6923      	ldr	r3, [r4, #16]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	6123      	str	r3, [r4, #16]
 80067b6:	e6ec      	b.n	8006592 <_scanf_float+0x7a>
 80067b8:	1e6b      	subs	r3, r5, #1
 80067ba:	2b06      	cmp	r3, #6
 80067bc:	d825      	bhi.n	800680a <_scanf_float+0x2f2>
 80067be:	2d02      	cmp	r5, #2
 80067c0:	d836      	bhi.n	8006830 <_scanf_float+0x318>
 80067c2:	455e      	cmp	r6, fp
 80067c4:	f67f aee8 	bls.w	8006598 <_scanf_float+0x80>
 80067c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067cc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067d0:	463a      	mov	r2, r7
 80067d2:	4640      	mov	r0, r8
 80067d4:	4798      	blx	r3
 80067d6:	6923      	ldr	r3, [r4, #16]
 80067d8:	3b01      	subs	r3, #1
 80067da:	6123      	str	r3, [r4, #16]
 80067dc:	e7f1      	b.n	80067c2 <_scanf_float+0x2aa>
 80067de:	9802      	ldr	r0, [sp, #8]
 80067e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067e4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80067e8:	9002      	str	r0, [sp, #8]
 80067ea:	463a      	mov	r2, r7
 80067ec:	4640      	mov	r0, r8
 80067ee:	4798      	blx	r3
 80067f0:	6923      	ldr	r3, [r4, #16]
 80067f2:	3b01      	subs	r3, #1
 80067f4:	6123      	str	r3, [r4, #16]
 80067f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067fa:	fa5f fa8a 	uxtb.w	sl, sl
 80067fe:	f1ba 0f02 	cmp.w	sl, #2
 8006802:	d1ec      	bne.n	80067de <_scanf_float+0x2c6>
 8006804:	3d03      	subs	r5, #3
 8006806:	b2ed      	uxtb	r5, r5
 8006808:	1b76      	subs	r6, r6, r5
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	05da      	lsls	r2, r3, #23
 800680e:	d52f      	bpl.n	8006870 <_scanf_float+0x358>
 8006810:	055b      	lsls	r3, r3, #21
 8006812:	d510      	bpl.n	8006836 <_scanf_float+0x31e>
 8006814:	455e      	cmp	r6, fp
 8006816:	f67f aebf 	bls.w	8006598 <_scanf_float+0x80>
 800681a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800681e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006822:	463a      	mov	r2, r7
 8006824:	4640      	mov	r0, r8
 8006826:	4798      	blx	r3
 8006828:	6923      	ldr	r3, [r4, #16]
 800682a:	3b01      	subs	r3, #1
 800682c:	6123      	str	r3, [r4, #16]
 800682e:	e7f1      	b.n	8006814 <_scanf_float+0x2fc>
 8006830:	46aa      	mov	sl, r5
 8006832:	9602      	str	r6, [sp, #8]
 8006834:	e7df      	b.n	80067f6 <_scanf_float+0x2de>
 8006836:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800683a:	6923      	ldr	r3, [r4, #16]
 800683c:	2965      	cmp	r1, #101	; 0x65
 800683e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006842:	f106 35ff 	add.w	r5, r6, #4294967295
 8006846:	6123      	str	r3, [r4, #16]
 8006848:	d00c      	beq.n	8006864 <_scanf_float+0x34c>
 800684a:	2945      	cmp	r1, #69	; 0x45
 800684c:	d00a      	beq.n	8006864 <_scanf_float+0x34c>
 800684e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006852:	463a      	mov	r2, r7
 8006854:	4640      	mov	r0, r8
 8006856:	4798      	blx	r3
 8006858:	6923      	ldr	r3, [r4, #16]
 800685a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800685e:	3b01      	subs	r3, #1
 8006860:	1eb5      	subs	r5, r6, #2
 8006862:	6123      	str	r3, [r4, #16]
 8006864:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006868:	463a      	mov	r2, r7
 800686a:	4640      	mov	r0, r8
 800686c:	4798      	blx	r3
 800686e:	462e      	mov	r6, r5
 8006870:	6825      	ldr	r5, [r4, #0]
 8006872:	f015 0510 	ands.w	r5, r5, #16
 8006876:	d159      	bne.n	800692c <_scanf_float+0x414>
 8006878:	7035      	strb	r5, [r6, #0]
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006884:	d11b      	bne.n	80068be <_scanf_float+0x3a6>
 8006886:	9b01      	ldr	r3, [sp, #4]
 8006888:	454b      	cmp	r3, r9
 800688a:	eba3 0209 	sub.w	r2, r3, r9
 800688e:	d123      	bne.n	80068d8 <_scanf_float+0x3c0>
 8006890:	2200      	movs	r2, #0
 8006892:	4659      	mov	r1, fp
 8006894:	4640      	mov	r0, r8
 8006896:	f000 ff25 	bl	80076e4 <_strtod_r>
 800689a:	6822      	ldr	r2, [r4, #0]
 800689c:	9b03      	ldr	r3, [sp, #12]
 800689e:	f012 0f02 	tst.w	r2, #2
 80068a2:	ec57 6b10 	vmov	r6, r7, d0
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	d021      	beq.n	80068ee <_scanf_float+0x3d6>
 80068aa:	9903      	ldr	r1, [sp, #12]
 80068ac:	1d1a      	adds	r2, r3, #4
 80068ae:	600a      	str	r2, [r1, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	e9c3 6700 	strd	r6, r7, [r3]
 80068b6:	68e3      	ldr	r3, [r4, #12]
 80068b8:	3301      	adds	r3, #1
 80068ba:	60e3      	str	r3, [r4, #12]
 80068bc:	e66d      	b.n	800659a <_scanf_float+0x82>
 80068be:	9b04      	ldr	r3, [sp, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d0e5      	beq.n	8006890 <_scanf_float+0x378>
 80068c4:	9905      	ldr	r1, [sp, #20]
 80068c6:	230a      	movs	r3, #10
 80068c8:	462a      	mov	r2, r5
 80068ca:	3101      	adds	r1, #1
 80068cc:	4640      	mov	r0, r8
 80068ce:	f000 ff91 	bl	80077f4 <_strtol_r>
 80068d2:	9b04      	ldr	r3, [sp, #16]
 80068d4:	9e05      	ldr	r6, [sp, #20]
 80068d6:	1ac2      	subs	r2, r0, r3
 80068d8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80068dc:	429e      	cmp	r6, r3
 80068de:	bf28      	it	cs
 80068e0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80068e4:	4912      	ldr	r1, [pc, #72]	; (8006930 <_scanf_float+0x418>)
 80068e6:	4630      	mov	r0, r6
 80068e8:	f000 f8ba 	bl	8006a60 <siprintf>
 80068ec:	e7d0      	b.n	8006890 <_scanf_float+0x378>
 80068ee:	9903      	ldr	r1, [sp, #12]
 80068f0:	f012 0f04 	tst.w	r2, #4
 80068f4:	f103 0204 	add.w	r2, r3, #4
 80068f8:	600a      	str	r2, [r1, #0]
 80068fa:	d1d9      	bne.n	80068b0 <_scanf_float+0x398>
 80068fc:	f8d3 8000 	ldr.w	r8, [r3]
 8006900:	ee10 2a10 	vmov	r2, s0
 8006904:	ee10 0a10 	vmov	r0, s0
 8006908:	463b      	mov	r3, r7
 800690a:	4639      	mov	r1, r7
 800690c:	f7fa f92e 	bl	8000b6c <__aeabi_dcmpun>
 8006910:	b128      	cbz	r0, 800691e <_scanf_float+0x406>
 8006912:	4808      	ldr	r0, [pc, #32]	; (8006934 <_scanf_float+0x41c>)
 8006914:	f000 f89e 	bl	8006a54 <nanf>
 8006918:	ed88 0a00 	vstr	s0, [r8]
 800691c:	e7cb      	b.n	80068b6 <_scanf_float+0x39e>
 800691e:	4630      	mov	r0, r6
 8006920:	4639      	mov	r1, r7
 8006922:	f7fa f981 	bl	8000c28 <__aeabi_d2f>
 8006926:	f8c8 0000 	str.w	r0, [r8]
 800692a:	e7c4      	b.n	80068b6 <_scanf_float+0x39e>
 800692c:	2500      	movs	r5, #0
 800692e:	e634      	b.n	800659a <_scanf_float+0x82>
 8006930:	08012f30 	.word	0x08012f30
 8006934:	080133a0 	.word	0x080133a0

08006938 <iprintf>:
 8006938:	b40f      	push	{r0, r1, r2, r3}
 800693a:	4b0a      	ldr	r3, [pc, #40]	; (8006964 <iprintf+0x2c>)
 800693c:	b513      	push	{r0, r1, r4, lr}
 800693e:	681c      	ldr	r4, [r3, #0]
 8006940:	b124      	cbz	r4, 800694c <iprintf+0x14>
 8006942:	69a3      	ldr	r3, [r4, #24]
 8006944:	b913      	cbnz	r3, 800694c <iprintf+0x14>
 8006946:	4620      	mov	r0, r4
 8006948:	f001 ffaa 	bl	80088a0 <__sinit>
 800694c:	ab05      	add	r3, sp, #20
 800694e:	9a04      	ldr	r2, [sp, #16]
 8006950:	68a1      	ldr	r1, [r4, #8]
 8006952:	9301      	str	r3, [sp, #4]
 8006954:	4620      	mov	r0, r4
 8006956:	f003 fb81 	bl	800a05c <_vfiprintf_r>
 800695a:	b002      	add	sp, #8
 800695c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006960:	b004      	add	sp, #16
 8006962:	4770      	bx	lr
 8006964:	2000041c 	.word	0x2000041c

08006968 <_puts_r>:
 8006968:	b570      	push	{r4, r5, r6, lr}
 800696a:	460e      	mov	r6, r1
 800696c:	4605      	mov	r5, r0
 800696e:	b118      	cbz	r0, 8006978 <_puts_r+0x10>
 8006970:	6983      	ldr	r3, [r0, #24]
 8006972:	b90b      	cbnz	r3, 8006978 <_puts_r+0x10>
 8006974:	f001 ff94 	bl	80088a0 <__sinit>
 8006978:	69ab      	ldr	r3, [r5, #24]
 800697a:	68ac      	ldr	r4, [r5, #8]
 800697c:	b913      	cbnz	r3, 8006984 <_puts_r+0x1c>
 800697e:	4628      	mov	r0, r5
 8006980:	f001 ff8e 	bl	80088a0 <__sinit>
 8006984:	4b2c      	ldr	r3, [pc, #176]	; (8006a38 <_puts_r+0xd0>)
 8006986:	429c      	cmp	r4, r3
 8006988:	d120      	bne.n	80069cc <_puts_r+0x64>
 800698a:	686c      	ldr	r4, [r5, #4]
 800698c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800698e:	07db      	lsls	r3, r3, #31
 8006990:	d405      	bmi.n	800699e <_puts_r+0x36>
 8006992:	89a3      	ldrh	r3, [r4, #12]
 8006994:	0598      	lsls	r0, r3, #22
 8006996:	d402      	bmi.n	800699e <_puts_r+0x36>
 8006998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800699a:	f002 fb92 	bl	80090c2 <__retarget_lock_acquire_recursive>
 800699e:	89a3      	ldrh	r3, [r4, #12]
 80069a0:	0719      	lsls	r1, r3, #28
 80069a2:	d51d      	bpl.n	80069e0 <_puts_r+0x78>
 80069a4:	6923      	ldr	r3, [r4, #16]
 80069a6:	b1db      	cbz	r3, 80069e0 <_puts_r+0x78>
 80069a8:	3e01      	subs	r6, #1
 80069aa:	68a3      	ldr	r3, [r4, #8]
 80069ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80069b0:	3b01      	subs	r3, #1
 80069b2:	60a3      	str	r3, [r4, #8]
 80069b4:	bb39      	cbnz	r1, 8006a06 <_puts_r+0x9e>
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	da38      	bge.n	8006a2c <_puts_r+0xc4>
 80069ba:	4622      	mov	r2, r4
 80069bc:	210a      	movs	r1, #10
 80069be:	4628      	mov	r0, r5
 80069c0:	f000 ff1a 	bl	80077f8 <__swbuf_r>
 80069c4:	3001      	adds	r0, #1
 80069c6:	d011      	beq.n	80069ec <_puts_r+0x84>
 80069c8:	250a      	movs	r5, #10
 80069ca:	e011      	b.n	80069f0 <_puts_r+0x88>
 80069cc:	4b1b      	ldr	r3, [pc, #108]	; (8006a3c <_puts_r+0xd4>)
 80069ce:	429c      	cmp	r4, r3
 80069d0:	d101      	bne.n	80069d6 <_puts_r+0x6e>
 80069d2:	68ac      	ldr	r4, [r5, #8]
 80069d4:	e7da      	b.n	800698c <_puts_r+0x24>
 80069d6:	4b1a      	ldr	r3, [pc, #104]	; (8006a40 <_puts_r+0xd8>)
 80069d8:	429c      	cmp	r4, r3
 80069da:	bf08      	it	eq
 80069dc:	68ec      	ldreq	r4, [r5, #12]
 80069de:	e7d5      	b.n	800698c <_puts_r+0x24>
 80069e0:	4621      	mov	r1, r4
 80069e2:	4628      	mov	r0, r5
 80069e4:	f000 ff5a 	bl	800789c <__swsetup_r>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	d0dd      	beq.n	80069a8 <_puts_r+0x40>
 80069ec:	f04f 35ff 	mov.w	r5, #4294967295
 80069f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069f2:	07da      	lsls	r2, r3, #31
 80069f4:	d405      	bmi.n	8006a02 <_puts_r+0x9a>
 80069f6:	89a3      	ldrh	r3, [r4, #12]
 80069f8:	059b      	lsls	r3, r3, #22
 80069fa:	d402      	bmi.n	8006a02 <_puts_r+0x9a>
 80069fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069fe:	f002 fb61 	bl	80090c4 <__retarget_lock_release_recursive>
 8006a02:	4628      	mov	r0, r5
 8006a04:	bd70      	pop	{r4, r5, r6, pc}
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	da04      	bge.n	8006a14 <_puts_r+0xac>
 8006a0a:	69a2      	ldr	r2, [r4, #24]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	dc06      	bgt.n	8006a1e <_puts_r+0xb6>
 8006a10:	290a      	cmp	r1, #10
 8006a12:	d004      	beq.n	8006a1e <_puts_r+0xb6>
 8006a14:	6823      	ldr	r3, [r4, #0]
 8006a16:	1c5a      	adds	r2, r3, #1
 8006a18:	6022      	str	r2, [r4, #0]
 8006a1a:	7019      	strb	r1, [r3, #0]
 8006a1c:	e7c5      	b.n	80069aa <_puts_r+0x42>
 8006a1e:	4622      	mov	r2, r4
 8006a20:	4628      	mov	r0, r5
 8006a22:	f000 fee9 	bl	80077f8 <__swbuf_r>
 8006a26:	3001      	adds	r0, #1
 8006a28:	d1bf      	bne.n	80069aa <_puts_r+0x42>
 8006a2a:	e7df      	b.n	80069ec <_puts_r+0x84>
 8006a2c:	6823      	ldr	r3, [r4, #0]
 8006a2e:	250a      	movs	r5, #10
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	6022      	str	r2, [r4, #0]
 8006a34:	701d      	strb	r5, [r3, #0]
 8006a36:	e7db      	b.n	80069f0 <_puts_r+0x88>
 8006a38:	0801313c 	.word	0x0801313c
 8006a3c:	0801315c 	.word	0x0801315c
 8006a40:	0801311c 	.word	0x0801311c

08006a44 <puts>:
 8006a44:	4b02      	ldr	r3, [pc, #8]	; (8006a50 <puts+0xc>)
 8006a46:	4601      	mov	r1, r0
 8006a48:	6818      	ldr	r0, [r3, #0]
 8006a4a:	f7ff bf8d 	b.w	8006968 <_puts_r>
 8006a4e:	bf00      	nop
 8006a50:	2000041c 	.word	0x2000041c

08006a54 <nanf>:
 8006a54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006a5c <nanf+0x8>
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	7fc00000 	.word	0x7fc00000

08006a60 <siprintf>:
 8006a60:	b40e      	push	{r1, r2, r3}
 8006a62:	b500      	push	{lr}
 8006a64:	b09c      	sub	sp, #112	; 0x70
 8006a66:	ab1d      	add	r3, sp, #116	; 0x74
 8006a68:	9002      	str	r0, [sp, #8]
 8006a6a:	9006      	str	r0, [sp, #24]
 8006a6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a70:	4809      	ldr	r0, [pc, #36]	; (8006a98 <siprintf+0x38>)
 8006a72:	9107      	str	r1, [sp, #28]
 8006a74:	9104      	str	r1, [sp, #16]
 8006a76:	4909      	ldr	r1, [pc, #36]	; (8006a9c <siprintf+0x3c>)
 8006a78:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a7c:	9105      	str	r1, [sp, #20]
 8006a7e:	6800      	ldr	r0, [r0, #0]
 8006a80:	9301      	str	r3, [sp, #4]
 8006a82:	a902      	add	r1, sp, #8
 8006a84:	f003 f9c0 	bl	8009e08 <_svfiprintf_r>
 8006a88:	9b02      	ldr	r3, [sp, #8]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	701a      	strb	r2, [r3, #0]
 8006a8e:	b01c      	add	sp, #112	; 0x70
 8006a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a94:	b003      	add	sp, #12
 8006a96:	4770      	bx	lr
 8006a98:	2000041c 	.word	0x2000041c
 8006a9c:	ffff0208 	.word	0xffff0208

08006aa0 <sulp>:
 8006aa0:	b570      	push	{r4, r5, r6, lr}
 8006aa2:	4604      	mov	r4, r0
 8006aa4:	460d      	mov	r5, r1
 8006aa6:	ec45 4b10 	vmov	d0, r4, r5
 8006aaa:	4616      	mov	r6, r2
 8006aac:	f002 ff0a 	bl	80098c4 <__ulp>
 8006ab0:	ec51 0b10 	vmov	r0, r1, d0
 8006ab4:	b17e      	cbz	r6, 8006ad6 <sulp+0x36>
 8006ab6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006aba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	dd09      	ble.n	8006ad6 <sulp+0x36>
 8006ac2:	051b      	lsls	r3, r3, #20
 8006ac4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006ac8:	2400      	movs	r4, #0
 8006aca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006ace:	4622      	mov	r2, r4
 8006ad0:	462b      	mov	r3, r5
 8006ad2:	f7f9 fdb1 	bl	8000638 <__aeabi_dmul>
 8006ad6:	bd70      	pop	{r4, r5, r6, pc}

08006ad8 <_strtod_l>:
 8006ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006adc:	ed2d 8b02 	vpush	{d8}
 8006ae0:	b09d      	sub	sp, #116	; 0x74
 8006ae2:	461f      	mov	r7, r3
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	9318      	str	r3, [sp, #96]	; 0x60
 8006ae8:	4ba2      	ldr	r3, [pc, #648]	; (8006d74 <_strtod_l+0x29c>)
 8006aea:	9213      	str	r2, [sp, #76]	; 0x4c
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	9305      	str	r3, [sp, #20]
 8006af0:	4604      	mov	r4, r0
 8006af2:	4618      	mov	r0, r3
 8006af4:	4688      	mov	r8, r1
 8006af6:	f7f9 fb8b 	bl	8000210 <strlen>
 8006afa:	f04f 0a00 	mov.w	sl, #0
 8006afe:	4605      	mov	r5, r0
 8006b00:	f04f 0b00 	mov.w	fp, #0
 8006b04:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006b08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b0a:	781a      	ldrb	r2, [r3, #0]
 8006b0c:	2a2b      	cmp	r2, #43	; 0x2b
 8006b0e:	d04e      	beq.n	8006bae <_strtod_l+0xd6>
 8006b10:	d83b      	bhi.n	8006b8a <_strtod_l+0xb2>
 8006b12:	2a0d      	cmp	r2, #13
 8006b14:	d834      	bhi.n	8006b80 <_strtod_l+0xa8>
 8006b16:	2a08      	cmp	r2, #8
 8006b18:	d834      	bhi.n	8006b84 <_strtod_l+0xac>
 8006b1a:	2a00      	cmp	r2, #0
 8006b1c:	d03e      	beq.n	8006b9c <_strtod_l+0xc4>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	930a      	str	r3, [sp, #40]	; 0x28
 8006b22:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006b24:	7833      	ldrb	r3, [r6, #0]
 8006b26:	2b30      	cmp	r3, #48	; 0x30
 8006b28:	f040 80b0 	bne.w	8006c8c <_strtod_l+0x1b4>
 8006b2c:	7873      	ldrb	r3, [r6, #1]
 8006b2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006b32:	2b58      	cmp	r3, #88	; 0x58
 8006b34:	d168      	bne.n	8006c08 <_strtod_l+0x130>
 8006b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b38:	9301      	str	r3, [sp, #4]
 8006b3a:	ab18      	add	r3, sp, #96	; 0x60
 8006b3c:	9702      	str	r7, [sp, #8]
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	4a8d      	ldr	r2, [pc, #564]	; (8006d78 <_strtod_l+0x2a0>)
 8006b42:	ab19      	add	r3, sp, #100	; 0x64
 8006b44:	a917      	add	r1, sp, #92	; 0x5c
 8006b46:	4620      	mov	r0, r4
 8006b48:	f001 ffae 	bl	8008aa8 <__gethex>
 8006b4c:	f010 0707 	ands.w	r7, r0, #7
 8006b50:	4605      	mov	r5, r0
 8006b52:	d005      	beq.n	8006b60 <_strtod_l+0x88>
 8006b54:	2f06      	cmp	r7, #6
 8006b56:	d12c      	bne.n	8006bb2 <_strtod_l+0xda>
 8006b58:	3601      	adds	r6, #1
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	9617      	str	r6, [sp, #92]	; 0x5c
 8006b5e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f040 8590 	bne.w	8007688 <_strtod_l+0xbb0>
 8006b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b6a:	b1eb      	cbz	r3, 8006ba8 <_strtod_l+0xd0>
 8006b6c:	4652      	mov	r2, sl
 8006b6e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006b72:	ec43 2b10 	vmov	d0, r2, r3
 8006b76:	b01d      	add	sp, #116	; 0x74
 8006b78:	ecbd 8b02 	vpop	{d8}
 8006b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b80:	2a20      	cmp	r2, #32
 8006b82:	d1cc      	bne.n	8006b1e <_strtod_l+0x46>
 8006b84:	3301      	adds	r3, #1
 8006b86:	9317      	str	r3, [sp, #92]	; 0x5c
 8006b88:	e7be      	b.n	8006b08 <_strtod_l+0x30>
 8006b8a:	2a2d      	cmp	r2, #45	; 0x2d
 8006b8c:	d1c7      	bne.n	8006b1e <_strtod_l+0x46>
 8006b8e:	2201      	movs	r2, #1
 8006b90:	920a      	str	r2, [sp, #40]	; 0x28
 8006b92:	1c5a      	adds	r2, r3, #1
 8006b94:	9217      	str	r2, [sp, #92]	; 0x5c
 8006b96:	785b      	ldrb	r3, [r3, #1]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1c2      	bne.n	8006b22 <_strtod_l+0x4a>
 8006b9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b9e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f040 856e 	bne.w	8007684 <_strtod_l+0xbac>
 8006ba8:	4652      	mov	r2, sl
 8006baa:	465b      	mov	r3, fp
 8006bac:	e7e1      	b.n	8006b72 <_strtod_l+0x9a>
 8006bae:	2200      	movs	r2, #0
 8006bb0:	e7ee      	b.n	8006b90 <_strtod_l+0xb8>
 8006bb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006bb4:	b13a      	cbz	r2, 8006bc6 <_strtod_l+0xee>
 8006bb6:	2135      	movs	r1, #53	; 0x35
 8006bb8:	a81a      	add	r0, sp, #104	; 0x68
 8006bba:	f002 ff8e 	bl	8009ada <__copybits>
 8006bbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	f002 fb4d 	bl	8009260 <_Bfree>
 8006bc6:	3f01      	subs	r7, #1
 8006bc8:	2f04      	cmp	r7, #4
 8006bca:	d806      	bhi.n	8006bda <_strtod_l+0x102>
 8006bcc:	e8df f007 	tbb	[pc, r7]
 8006bd0:	1714030a 	.word	0x1714030a
 8006bd4:	0a          	.byte	0x0a
 8006bd5:	00          	.byte	0x00
 8006bd6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006bda:	0728      	lsls	r0, r5, #28
 8006bdc:	d5c0      	bpl.n	8006b60 <_strtod_l+0x88>
 8006bde:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006be2:	e7bd      	b.n	8006b60 <_strtod_l+0x88>
 8006be4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006be8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006bea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006bee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006bf2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006bf6:	e7f0      	b.n	8006bda <_strtod_l+0x102>
 8006bf8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006d7c <_strtod_l+0x2a4>
 8006bfc:	e7ed      	b.n	8006bda <_strtod_l+0x102>
 8006bfe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006c02:	f04f 3aff 	mov.w	sl, #4294967295
 8006c06:	e7e8      	b.n	8006bda <_strtod_l+0x102>
 8006c08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c0a:	1c5a      	adds	r2, r3, #1
 8006c0c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c0e:	785b      	ldrb	r3, [r3, #1]
 8006c10:	2b30      	cmp	r3, #48	; 0x30
 8006c12:	d0f9      	beq.n	8006c08 <_strtod_l+0x130>
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d0a3      	beq.n	8006b60 <_strtod_l+0x88>
 8006c18:	2301      	movs	r3, #1
 8006c1a:	f04f 0900 	mov.w	r9, #0
 8006c1e:	9304      	str	r3, [sp, #16]
 8006c20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c22:	9308      	str	r3, [sp, #32]
 8006c24:	f8cd 901c 	str.w	r9, [sp, #28]
 8006c28:	464f      	mov	r7, r9
 8006c2a:	220a      	movs	r2, #10
 8006c2c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006c2e:	7806      	ldrb	r6, [r0, #0]
 8006c30:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006c34:	b2d9      	uxtb	r1, r3
 8006c36:	2909      	cmp	r1, #9
 8006c38:	d92a      	bls.n	8006c90 <_strtod_l+0x1b8>
 8006c3a:	9905      	ldr	r1, [sp, #20]
 8006c3c:	462a      	mov	r2, r5
 8006c3e:	f003 fb9a 	bl	800a376 <strncmp>
 8006c42:	b398      	cbz	r0, 8006cac <_strtod_l+0x1d4>
 8006c44:	2000      	movs	r0, #0
 8006c46:	4632      	mov	r2, r6
 8006c48:	463d      	mov	r5, r7
 8006c4a:	9005      	str	r0, [sp, #20]
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2a65      	cmp	r2, #101	; 0x65
 8006c50:	d001      	beq.n	8006c56 <_strtod_l+0x17e>
 8006c52:	2a45      	cmp	r2, #69	; 0x45
 8006c54:	d118      	bne.n	8006c88 <_strtod_l+0x1b0>
 8006c56:	b91d      	cbnz	r5, 8006c60 <_strtod_l+0x188>
 8006c58:	9a04      	ldr	r2, [sp, #16]
 8006c5a:	4302      	orrs	r2, r0
 8006c5c:	d09e      	beq.n	8006b9c <_strtod_l+0xc4>
 8006c5e:	2500      	movs	r5, #0
 8006c60:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006c64:	f108 0201 	add.w	r2, r8, #1
 8006c68:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c6a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006c6e:	2a2b      	cmp	r2, #43	; 0x2b
 8006c70:	d075      	beq.n	8006d5e <_strtod_l+0x286>
 8006c72:	2a2d      	cmp	r2, #45	; 0x2d
 8006c74:	d07b      	beq.n	8006d6e <_strtod_l+0x296>
 8006c76:	f04f 0c00 	mov.w	ip, #0
 8006c7a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006c7e:	2909      	cmp	r1, #9
 8006c80:	f240 8082 	bls.w	8006d88 <_strtod_l+0x2b0>
 8006c84:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006c88:	2600      	movs	r6, #0
 8006c8a:	e09d      	b.n	8006dc8 <_strtod_l+0x2f0>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	e7c4      	b.n	8006c1a <_strtod_l+0x142>
 8006c90:	2f08      	cmp	r7, #8
 8006c92:	bfd8      	it	le
 8006c94:	9907      	ldrle	r1, [sp, #28]
 8006c96:	f100 0001 	add.w	r0, r0, #1
 8006c9a:	bfda      	itte	le
 8006c9c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006ca0:	9307      	strle	r3, [sp, #28]
 8006ca2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006ca6:	3701      	adds	r7, #1
 8006ca8:	9017      	str	r0, [sp, #92]	; 0x5c
 8006caa:	e7bf      	b.n	8006c2c <_strtod_l+0x154>
 8006cac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cae:	195a      	adds	r2, r3, r5
 8006cb0:	9217      	str	r2, [sp, #92]	; 0x5c
 8006cb2:	5d5a      	ldrb	r2, [r3, r5]
 8006cb4:	2f00      	cmp	r7, #0
 8006cb6:	d037      	beq.n	8006d28 <_strtod_l+0x250>
 8006cb8:	9005      	str	r0, [sp, #20]
 8006cba:	463d      	mov	r5, r7
 8006cbc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006cc0:	2b09      	cmp	r3, #9
 8006cc2:	d912      	bls.n	8006cea <_strtod_l+0x212>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e7c2      	b.n	8006c4e <_strtod_l+0x176>
 8006cc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	9217      	str	r2, [sp, #92]	; 0x5c
 8006cce:	785a      	ldrb	r2, [r3, #1]
 8006cd0:	3001      	adds	r0, #1
 8006cd2:	2a30      	cmp	r2, #48	; 0x30
 8006cd4:	d0f8      	beq.n	8006cc8 <_strtod_l+0x1f0>
 8006cd6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006cda:	2b08      	cmp	r3, #8
 8006cdc:	f200 84d9 	bhi.w	8007692 <_strtod_l+0xbba>
 8006ce0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ce2:	9005      	str	r0, [sp, #20]
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	9308      	str	r3, [sp, #32]
 8006ce8:	4605      	mov	r5, r0
 8006cea:	3a30      	subs	r2, #48	; 0x30
 8006cec:	f100 0301 	add.w	r3, r0, #1
 8006cf0:	d014      	beq.n	8006d1c <_strtod_l+0x244>
 8006cf2:	9905      	ldr	r1, [sp, #20]
 8006cf4:	4419      	add	r1, r3
 8006cf6:	9105      	str	r1, [sp, #20]
 8006cf8:	462b      	mov	r3, r5
 8006cfa:	eb00 0e05 	add.w	lr, r0, r5
 8006cfe:	210a      	movs	r1, #10
 8006d00:	4573      	cmp	r3, lr
 8006d02:	d113      	bne.n	8006d2c <_strtod_l+0x254>
 8006d04:	182b      	adds	r3, r5, r0
 8006d06:	2b08      	cmp	r3, #8
 8006d08:	f105 0501 	add.w	r5, r5, #1
 8006d0c:	4405      	add	r5, r0
 8006d0e:	dc1c      	bgt.n	8006d4a <_strtod_l+0x272>
 8006d10:	9907      	ldr	r1, [sp, #28]
 8006d12:	230a      	movs	r3, #10
 8006d14:	fb03 2301 	mla	r3, r3, r1, r2
 8006d18:	9307      	str	r3, [sp, #28]
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006d1e:	1c51      	adds	r1, r2, #1
 8006d20:	9117      	str	r1, [sp, #92]	; 0x5c
 8006d22:	7852      	ldrb	r2, [r2, #1]
 8006d24:	4618      	mov	r0, r3
 8006d26:	e7c9      	b.n	8006cbc <_strtod_l+0x1e4>
 8006d28:	4638      	mov	r0, r7
 8006d2a:	e7d2      	b.n	8006cd2 <_strtod_l+0x1fa>
 8006d2c:	2b08      	cmp	r3, #8
 8006d2e:	dc04      	bgt.n	8006d3a <_strtod_l+0x262>
 8006d30:	9e07      	ldr	r6, [sp, #28]
 8006d32:	434e      	muls	r6, r1
 8006d34:	9607      	str	r6, [sp, #28]
 8006d36:	3301      	adds	r3, #1
 8006d38:	e7e2      	b.n	8006d00 <_strtod_l+0x228>
 8006d3a:	f103 0c01 	add.w	ip, r3, #1
 8006d3e:	f1bc 0f10 	cmp.w	ip, #16
 8006d42:	bfd8      	it	le
 8006d44:	fb01 f909 	mulle.w	r9, r1, r9
 8006d48:	e7f5      	b.n	8006d36 <_strtod_l+0x25e>
 8006d4a:	2d10      	cmp	r5, #16
 8006d4c:	bfdc      	itt	le
 8006d4e:	230a      	movle	r3, #10
 8006d50:	fb03 2909 	mlale	r9, r3, r9, r2
 8006d54:	e7e1      	b.n	8006d1a <_strtod_l+0x242>
 8006d56:	2300      	movs	r3, #0
 8006d58:	9305      	str	r3, [sp, #20]
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e77c      	b.n	8006c58 <_strtod_l+0x180>
 8006d5e:	f04f 0c00 	mov.w	ip, #0
 8006d62:	f108 0202 	add.w	r2, r8, #2
 8006d66:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d68:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006d6c:	e785      	b.n	8006c7a <_strtod_l+0x1a2>
 8006d6e:	f04f 0c01 	mov.w	ip, #1
 8006d72:	e7f6      	b.n	8006d62 <_strtod_l+0x28a>
 8006d74:	080131e4 	.word	0x080131e4
 8006d78:	08012f38 	.word	0x08012f38
 8006d7c:	7ff00000 	.word	0x7ff00000
 8006d80:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006d82:	1c51      	adds	r1, r2, #1
 8006d84:	9117      	str	r1, [sp, #92]	; 0x5c
 8006d86:	7852      	ldrb	r2, [r2, #1]
 8006d88:	2a30      	cmp	r2, #48	; 0x30
 8006d8a:	d0f9      	beq.n	8006d80 <_strtod_l+0x2a8>
 8006d8c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006d90:	2908      	cmp	r1, #8
 8006d92:	f63f af79 	bhi.w	8006c88 <_strtod_l+0x1b0>
 8006d96:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006d9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006d9c:	9206      	str	r2, [sp, #24]
 8006d9e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006da0:	1c51      	adds	r1, r2, #1
 8006da2:	9117      	str	r1, [sp, #92]	; 0x5c
 8006da4:	7852      	ldrb	r2, [r2, #1]
 8006da6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006daa:	2e09      	cmp	r6, #9
 8006dac:	d937      	bls.n	8006e1e <_strtod_l+0x346>
 8006dae:	9e06      	ldr	r6, [sp, #24]
 8006db0:	1b89      	subs	r1, r1, r6
 8006db2:	2908      	cmp	r1, #8
 8006db4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006db8:	dc02      	bgt.n	8006dc0 <_strtod_l+0x2e8>
 8006dba:	4576      	cmp	r6, lr
 8006dbc:	bfa8      	it	ge
 8006dbe:	4676      	movge	r6, lr
 8006dc0:	f1bc 0f00 	cmp.w	ip, #0
 8006dc4:	d000      	beq.n	8006dc8 <_strtod_l+0x2f0>
 8006dc6:	4276      	negs	r6, r6
 8006dc8:	2d00      	cmp	r5, #0
 8006dca:	d14d      	bne.n	8006e68 <_strtod_l+0x390>
 8006dcc:	9904      	ldr	r1, [sp, #16]
 8006dce:	4301      	orrs	r1, r0
 8006dd0:	f47f aec6 	bne.w	8006b60 <_strtod_l+0x88>
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f47f aee1 	bne.w	8006b9c <_strtod_l+0xc4>
 8006dda:	2a69      	cmp	r2, #105	; 0x69
 8006ddc:	d027      	beq.n	8006e2e <_strtod_l+0x356>
 8006dde:	dc24      	bgt.n	8006e2a <_strtod_l+0x352>
 8006de0:	2a49      	cmp	r2, #73	; 0x49
 8006de2:	d024      	beq.n	8006e2e <_strtod_l+0x356>
 8006de4:	2a4e      	cmp	r2, #78	; 0x4e
 8006de6:	f47f aed9 	bne.w	8006b9c <_strtod_l+0xc4>
 8006dea:	499f      	ldr	r1, [pc, #636]	; (8007068 <_strtod_l+0x590>)
 8006dec:	a817      	add	r0, sp, #92	; 0x5c
 8006dee:	f002 f8b3 	bl	8008f58 <__match>
 8006df2:	2800      	cmp	r0, #0
 8006df4:	f43f aed2 	beq.w	8006b9c <_strtod_l+0xc4>
 8006df8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	2b28      	cmp	r3, #40	; 0x28
 8006dfe:	d12d      	bne.n	8006e5c <_strtod_l+0x384>
 8006e00:	499a      	ldr	r1, [pc, #616]	; (800706c <_strtod_l+0x594>)
 8006e02:	aa1a      	add	r2, sp, #104	; 0x68
 8006e04:	a817      	add	r0, sp, #92	; 0x5c
 8006e06:	f002 f8bb 	bl	8008f80 <__hexnan>
 8006e0a:	2805      	cmp	r0, #5
 8006e0c:	d126      	bne.n	8006e5c <_strtod_l+0x384>
 8006e0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e10:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006e14:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006e18:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006e1c:	e6a0      	b.n	8006b60 <_strtod_l+0x88>
 8006e1e:	210a      	movs	r1, #10
 8006e20:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006e24:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006e28:	e7b9      	b.n	8006d9e <_strtod_l+0x2c6>
 8006e2a:	2a6e      	cmp	r2, #110	; 0x6e
 8006e2c:	e7db      	b.n	8006de6 <_strtod_l+0x30e>
 8006e2e:	4990      	ldr	r1, [pc, #576]	; (8007070 <_strtod_l+0x598>)
 8006e30:	a817      	add	r0, sp, #92	; 0x5c
 8006e32:	f002 f891 	bl	8008f58 <__match>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	f43f aeb0 	beq.w	8006b9c <_strtod_l+0xc4>
 8006e3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e3e:	498d      	ldr	r1, [pc, #564]	; (8007074 <_strtod_l+0x59c>)
 8006e40:	3b01      	subs	r3, #1
 8006e42:	a817      	add	r0, sp, #92	; 0x5c
 8006e44:	9317      	str	r3, [sp, #92]	; 0x5c
 8006e46:	f002 f887 	bl	8008f58 <__match>
 8006e4a:	b910      	cbnz	r0, 8006e52 <_strtod_l+0x37a>
 8006e4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e4e:	3301      	adds	r3, #1
 8006e50:	9317      	str	r3, [sp, #92]	; 0x5c
 8006e52:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007084 <_strtod_l+0x5ac>
 8006e56:	f04f 0a00 	mov.w	sl, #0
 8006e5a:	e681      	b.n	8006b60 <_strtod_l+0x88>
 8006e5c:	4886      	ldr	r0, [pc, #536]	; (8007078 <_strtod_l+0x5a0>)
 8006e5e:	f003 fa2f 	bl	800a2c0 <nan>
 8006e62:	ec5b ab10 	vmov	sl, fp, d0
 8006e66:	e67b      	b.n	8006b60 <_strtod_l+0x88>
 8006e68:	9b05      	ldr	r3, [sp, #20]
 8006e6a:	9807      	ldr	r0, [sp, #28]
 8006e6c:	1af3      	subs	r3, r6, r3
 8006e6e:	2f00      	cmp	r7, #0
 8006e70:	bf08      	it	eq
 8006e72:	462f      	moveq	r7, r5
 8006e74:	2d10      	cmp	r5, #16
 8006e76:	9306      	str	r3, [sp, #24]
 8006e78:	46a8      	mov	r8, r5
 8006e7a:	bfa8      	it	ge
 8006e7c:	f04f 0810 	movge.w	r8, #16
 8006e80:	f7f9 fb60 	bl	8000544 <__aeabi_ui2d>
 8006e84:	2d09      	cmp	r5, #9
 8006e86:	4682      	mov	sl, r0
 8006e88:	468b      	mov	fp, r1
 8006e8a:	dd13      	ble.n	8006eb4 <_strtod_l+0x3dc>
 8006e8c:	4b7b      	ldr	r3, [pc, #492]	; (800707c <_strtod_l+0x5a4>)
 8006e8e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006e92:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006e96:	f7f9 fbcf 	bl	8000638 <__aeabi_dmul>
 8006e9a:	4682      	mov	sl, r0
 8006e9c:	4648      	mov	r0, r9
 8006e9e:	468b      	mov	fp, r1
 8006ea0:	f7f9 fb50 	bl	8000544 <__aeabi_ui2d>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	4650      	mov	r0, sl
 8006eaa:	4659      	mov	r1, fp
 8006eac:	f7f9 fa0e 	bl	80002cc <__adddf3>
 8006eb0:	4682      	mov	sl, r0
 8006eb2:	468b      	mov	fp, r1
 8006eb4:	2d0f      	cmp	r5, #15
 8006eb6:	dc38      	bgt.n	8006f2a <_strtod_l+0x452>
 8006eb8:	9b06      	ldr	r3, [sp, #24]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f43f ae50 	beq.w	8006b60 <_strtod_l+0x88>
 8006ec0:	dd24      	ble.n	8006f0c <_strtod_l+0x434>
 8006ec2:	2b16      	cmp	r3, #22
 8006ec4:	dc0b      	bgt.n	8006ede <_strtod_l+0x406>
 8006ec6:	496d      	ldr	r1, [pc, #436]	; (800707c <_strtod_l+0x5a4>)
 8006ec8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ecc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ed0:	4652      	mov	r2, sl
 8006ed2:	465b      	mov	r3, fp
 8006ed4:	f7f9 fbb0 	bl	8000638 <__aeabi_dmul>
 8006ed8:	4682      	mov	sl, r0
 8006eda:	468b      	mov	fp, r1
 8006edc:	e640      	b.n	8006b60 <_strtod_l+0x88>
 8006ede:	9a06      	ldr	r2, [sp, #24]
 8006ee0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	db20      	blt.n	8006f2a <_strtod_l+0x452>
 8006ee8:	4c64      	ldr	r4, [pc, #400]	; (800707c <_strtod_l+0x5a4>)
 8006eea:	f1c5 050f 	rsb	r5, r5, #15
 8006eee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006ef2:	4652      	mov	r2, sl
 8006ef4:	465b      	mov	r3, fp
 8006ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006efa:	f7f9 fb9d 	bl	8000638 <__aeabi_dmul>
 8006efe:	9b06      	ldr	r3, [sp, #24]
 8006f00:	1b5d      	subs	r5, r3, r5
 8006f02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006f06:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006f0a:	e7e3      	b.n	8006ed4 <_strtod_l+0x3fc>
 8006f0c:	9b06      	ldr	r3, [sp, #24]
 8006f0e:	3316      	adds	r3, #22
 8006f10:	db0b      	blt.n	8006f2a <_strtod_l+0x452>
 8006f12:	9b05      	ldr	r3, [sp, #20]
 8006f14:	1b9e      	subs	r6, r3, r6
 8006f16:	4b59      	ldr	r3, [pc, #356]	; (800707c <_strtod_l+0x5a4>)
 8006f18:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006f1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f20:	4650      	mov	r0, sl
 8006f22:	4659      	mov	r1, fp
 8006f24:	f7f9 fcb2 	bl	800088c <__aeabi_ddiv>
 8006f28:	e7d6      	b.n	8006ed8 <_strtod_l+0x400>
 8006f2a:	9b06      	ldr	r3, [sp, #24]
 8006f2c:	eba5 0808 	sub.w	r8, r5, r8
 8006f30:	4498      	add	r8, r3
 8006f32:	f1b8 0f00 	cmp.w	r8, #0
 8006f36:	dd74      	ble.n	8007022 <_strtod_l+0x54a>
 8006f38:	f018 030f 	ands.w	r3, r8, #15
 8006f3c:	d00a      	beq.n	8006f54 <_strtod_l+0x47c>
 8006f3e:	494f      	ldr	r1, [pc, #316]	; (800707c <_strtod_l+0x5a4>)
 8006f40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f44:	4652      	mov	r2, sl
 8006f46:	465b      	mov	r3, fp
 8006f48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f4c:	f7f9 fb74 	bl	8000638 <__aeabi_dmul>
 8006f50:	4682      	mov	sl, r0
 8006f52:	468b      	mov	fp, r1
 8006f54:	f038 080f 	bics.w	r8, r8, #15
 8006f58:	d04f      	beq.n	8006ffa <_strtod_l+0x522>
 8006f5a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006f5e:	dd22      	ble.n	8006fa6 <_strtod_l+0x4ce>
 8006f60:	2500      	movs	r5, #0
 8006f62:	462e      	mov	r6, r5
 8006f64:	9507      	str	r5, [sp, #28]
 8006f66:	9505      	str	r5, [sp, #20]
 8006f68:	2322      	movs	r3, #34	; 0x22
 8006f6a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007084 <_strtod_l+0x5ac>
 8006f6e:	6023      	str	r3, [r4, #0]
 8006f70:	f04f 0a00 	mov.w	sl, #0
 8006f74:	9b07      	ldr	r3, [sp, #28]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f43f adf2 	beq.w	8006b60 <_strtod_l+0x88>
 8006f7c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f002 f96e 	bl	8009260 <_Bfree>
 8006f84:	9905      	ldr	r1, [sp, #20]
 8006f86:	4620      	mov	r0, r4
 8006f88:	f002 f96a 	bl	8009260 <_Bfree>
 8006f8c:	4631      	mov	r1, r6
 8006f8e:	4620      	mov	r0, r4
 8006f90:	f002 f966 	bl	8009260 <_Bfree>
 8006f94:	9907      	ldr	r1, [sp, #28]
 8006f96:	4620      	mov	r0, r4
 8006f98:	f002 f962 	bl	8009260 <_Bfree>
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f002 f95e 	bl	8009260 <_Bfree>
 8006fa4:	e5dc      	b.n	8006b60 <_strtod_l+0x88>
 8006fa6:	4b36      	ldr	r3, [pc, #216]	; (8007080 <_strtod_l+0x5a8>)
 8006fa8:	9304      	str	r3, [sp, #16]
 8006faa:	2300      	movs	r3, #0
 8006fac:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006fb0:	4650      	mov	r0, sl
 8006fb2:	4659      	mov	r1, fp
 8006fb4:	4699      	mov	r9, r3
 8006fb6:	f1b8 0f01 	cmp.w	r8, #1
 8006fba:	dc21      	bgt.n	8007000 <_strtod_l+0x528>
 8006fbc:	b10b      	cbz	r3, 8006fc2 <_strtod_l+0x4ea>
 8006fbe:	4682      	mov	sl, r0
 8006fc0:	468b      	mov	fp, r1
 8006fc2:	4b2f      	ldr	r3, [pc, #188]	; (8007080 <_strtod_l+0x5a8>)
 8006fc4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006fc8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006fcc:	4652      	mov	r2, sl
 8006fce:	465b      	mov	r3, fp
 8006fd0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006fd4:	f7f9 fb30 	bl	8000638 <__aeabi_dmul>
 8006fd8:	4b2a      	ldr	r3, [pc, #168]	; (8007084 <_strtod_l+0x5ac>)
 8006fda:	460a      	mov	r2, r1
 8006fdc:	400b      	ands	r3, r1
 8006fde:	492a      	ldr	r1, [pc, #168]	; (8007088 <_strtod_l+0x5b0>)
 8006fe0:	428b      	cmp	r3, r1
 8006fe2:	4682      	mov	sl, r0
 8006fe4:	d8bc      	bhi.n	8006f60 <_strtod_l+0x488>
 8006fe6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006fea:	428b      	cmp	r3, r1
 8006fec:	bf86      	itte	hi
 8006fee:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800708c <_strtod_l+0x5b4>
 8006ff2:	f04f 3aff 	movhi.w	sl, #4294967295
 8006ff6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	9304      	str	r3, [sp, #16]
 8006ffe:	e084      	b.n	800710a <_strtod_l+0x632>
 8007000:	f018 0f01 	tst.w	r8, #1
 8007004:	d005      	beq.n	8007012 <_strtod_l+0x53a>
 8007006:	9b04      	ldr	r3, [sp, #16]
 8007008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700c:	f7f9 fb14 	bl	8000638 <__aeabi_dmul>
 8007010:	2301      	movs	r3, #1
 8007012:	9a04      	ldr	r2, [sp, #16]
 8007014:	3208      	adds	r2, #8
 8007016:	f109 0901 	add.w	r9, r9, #1
 800701a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800701e:	9204      	str	r2, [sp, #16]
 8007020:	e7c9      	b.n	8006fb6 <_strtod_l+0x4de>
 8007022:	d0ea      	beq.n	8006ffa <_strtod_l+0x522>
 8007024:	f1c8 0800 	rsb	r8, r8, #0
 8007028:	f018 020f 	ands.w	r2, r8, #15
 800702c:	d00a      	beq.n	8007044 <_strtod_l+0x56c>
 800702e:	4b13      	ldr	r3, [pc, #76]	; (800707c <_strtod_l+0x5a4>)
 8007030:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007034:	4650      	mov	r0, sl
 8007036:	4659      	mov	r1, fp
 8007038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703c:	f7f9 fc26 	bl	800088c <__aeabi_ddiv>
 8007040:	4682      	mov	sl, r0
 8007042:	468b      	mov	fp, r1
 8007044:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007048:	d0d7      	beq.n	8006ffa <_strtod_l+0x522>
 800704a:	f1b8 0f1f 	cmp.w	r8, #31
 800704e:	dd1f      	ble.n	8007090 <_strtod_l+0x5b8>
 8007050:	2500      	movs	r5, #0
 8007052:	462e      	mov	r6, r5
 8007054:	9507      	str	r5, [sp, #28]
 8007056:	9505      	str	r5, [sp, #20]
 8007058:	2322      	movs	r3, #34	; 0x22
 800705a:	f04f 0a00 	mov.w	sl, #0
 800705e:	f04f 0b00 	mov.w	fp, #0
 8007062:	6023      	str	r3, [r4, #0]
 8007064:	e786      	b.n	8006f74 <_strtod_l+0x49c>
 8007066:	bf00      	nop
 8007068:	08012f09 	.word	0x08012f09
 800706c:	08012f4c 	.word	0x08012f4c
 8007070:	08012f01 	.word	0x08012f01
 8007074:	0801308c 	.word	0x0801308c
 8007078:	080133a0 	.word	0x080133a0
 800707c:	08013280 	.word	0x08013280
 8007080:	08013258 	.word	0x08013258
 8007084:	7ff00000 	.word	0x7ff00000
 8007088:	7ca00000 	.word	0x7ca00000
 800708c:	7fefffff 	.word	0x7fefffff
 8007090:	f018 0310 	ands.w	r3, r8, #16
 8007094:	bf18      	it	ne
 8007096:	236a      	movne	r3, #106	; 0x6a
 8007098:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007448 <_strtod_l+0x970>
 800709c:	9304      	str	r3, [sp, #16]
 800709e:	4650      	mov	r0, sl
 80070a0:	4659      	mov	r1, fp
 80070a2:	2300      	movs	r3, #0
 80070a4:	f018 0f01 	tst.w	r8, #1
 80070a8:	d004      	beq.n	80070b4 <_strtod_l+0x5dc>
 80070aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80070ae:	f7f9 fac3 	bl	8000638 <__aeabi_dmul>
 80070b2:	2301      	movs	r3, #1
 80070b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80070b8:	f109 0908 	add.w	r9, r9, #8
 80070bc:	d1f2      	bne.n	80070a4 <_strtod_l+0x5cc>
 80070be:	b10b      	cbz	r3, 80070c4 <_strtod_l+0x5ec>
 80070c0:	4682      	mov	sl, r0
 80070c2:	468b      	mov	fp, r1
 80070c4:	9b04      	ldr	r3, [sp, #16]
 80070c6:	b1c3      	cbz	r3, 80070fa <_strtod_l+0x622>
 80070c8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80070cc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	4659      	mov	r1, fp
 80070d4:	dd11      	ble.n	80070fa <_strtod_l+0x622>
 80070d6:	2b1f      	cmp	r3, #31
 80070d8:	f340 8124 	ble.w	8007324 <_strtod_l+0x84c>
 80070dc:	2b34      	cmp	r3, #52	; 0x34
 80070de:	bfde      	ittt	le
 80070e0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80070e4:	f04f 33ff 	movle.w	r3, #4294967295
 80070e8:	fa03 f202 	lslle.w	r2, r3, r2
 80070ec:	f04f 0a00 	mov.w	sl, #0
 80070f0:	bfcc      	ite	gt
 80070f2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80070f6:	ea02 0b01 	andle.w	fp, r2, r1
 80070fa:	2200      	movs	r2, #0
 80070fc:	2300      	movs	r3, #0
 80070fe:	4650      	mov	r0, sl
 8007100:	4659      	mov	r1, fp
 8007102:	f7f9 fd01 	bl	8000b08 <__aeabi_dcmpeq>
 8007106:	2800      	cmp	r0, #0
 8007108:	d1a2      	bne.n	8007050 <_strtod_l+0x578>
 800710a:	9b07      	ldr	r3, [sp, #28]
 800710c:	9300      	str	r3, [sp, #0]
 800710e:	9908      	ldr	r1, [sp, #32]
 8007110:	462b      	mov	r3, r5
 8007112:	463a      	mov	r2, r7
 8007114:	4620      	mov	r0, r4
 8007116:	f002 f90b 	bl	8009330 <__s2b>
 800711a:	9007      	str	r0, [sp, #28]
 800711c:	2800      	cmp	r0, #0
 800711e:	f43f af1f 	beq.w	8006f60 <_strtod_l+0x488>
 8007122:	9b05      	ldr	r3, [sp, #20]
 8007124:	1b9e      	subs	r6, r3, r6
 8007126:	9b06      	ldr	r3, [sp, #24]
 8007128:	2b00      	cmp	r3, #0
 800712a:	bfb4      	ite	lt
 800712c:	4633      	movlt	r3, r6
 800712e:	2300      	movge	r3, #0
 8007130:	930c      	str	r3, [sp, #48]	; 0x30
 8007132:	9b06      	ldr	r3, [sp, #24]
 8007134:	2500      	movs	r5, #0
 8007136:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800713a:	9312      	str	r3, [sp, #72]	; 0x48
 800713c:	462e      	mov	r6, r5
 800713e:	9b07      	ldr	r3, [sp, #28]
 8007140:	4620      	mov	r0, r4
 8007142:	6859      	ldr	r1, [r3, #4]
 8007144:	f002 f84c 	bl	80091e0 <_Balloc>
 8007148:	9005      	str	r0, [sp, #20]
 800714a:	2800      	cmp	r0, #0
 800714c:	f43f af0c 	beq.w	8006f68 <_strtod_l+0x490>
 8007150:	9b07      	ldr	r3, [sp, #28]
 8007152:	691a      	ldr	r2, [r3, #16]
 8007154:	3202      	adds	r2, #2
 8007156:	f103 010c 	add.w	r1, r3, #12
 800715a:	0092      	lsls	r2, r2, #2
 800715c:	300c      	adds	r0, #12
 800715e:	f002 f831 	bl	80091c4 <memcpy>
 8007162:	ec4b ab10 	vmov	d0, sl, fp
 8007166:	aa1a      	add	r2, sp, #104	; 0x68
 8007168:	a919      	add	r1, sp, #100	; 0x64
 800716a:	4620      	mov	r0, r4
 800716c:	f002 fc26 	bl	80099bc <__d2b>
 8007170:	ec4b ab18 	vmov	d8, sl, fp
 8007174:	9018      	str	r0, [sp, #96]	; 0x60
 8007176:	2800      	cmp	r0, #0
 8007178:	f43f aef6 	beq.w	8006f68 <_strtod_l+0x490>
 800717c:	2101      	movs	r1, #1
 800717e:	4620      	mov	r0, r4
 8007180:	f002 f970 	bl	8009464 <__i2b>
 8007184:	4606      	mov	r6, r0
 8007186:	2800      	cmp	r0, #0
 8007188:	f43f aeee 	beq.w	8006f68 <_strtod_l+0x490>
 800718c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800718e:	9904      	ldr	r1, [sp, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	bfab      	itete	ge
 8007194:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007196:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007198:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800719a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800719e:	bfac      	ite	ge
 80071a0:	eb03 0902 	addge.w	r9, r3, r2
 80071a4:	1ad7      	sublt	r7, r2, r3
 80071a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80071a8:	eba3 0801 	sub.w	r8, r3, r1
 80071ac:	4490      	add	r8, r2
 80071ae:	4ba1      	ldr	r3, [pc, #644]	; (8007434 <_strtod_l+0x95c>)
 80071b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80071b4:	4598      	cmp	r8, r3
 80071b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80071ba:	f280 80c7 	bge.w	800734c <_strtod_l+0x874>
 80071be:	eba3 0308 	sub.w	r3, r3, r8
 80071c2:	2b1f      	cmp	r3, #31
 80071c4:	eba2 0203 	sub.w	r2, r2, r3
 80071c8:	f04f 0101 	mov.w	r1, #1
 80071cc:	f300 80b1 	bgt.w	8007332 <_strtod_l+0x85a>
 80071d0:	fa01 f303 	lsl.w	r3, r1, r3
 80071d4:	930d      	str	r3, [sp, #52]	; 0x34
 80071d6:	2300      	movs	r3, #0
 80071d8:	9308      	str	r3, [sp, #32]
 80071da:	eb09 0802 	add.w	r8, r9, r2
 80071de:	9b04      	ldr	r3, [sp, #16]
 80071e0:	45c1      	cmp	r9, r8
 80071e2:	4417      	add	r7, r2
 80071e4:	441f      	add	r7, r3
 80071e6:	464b      	mov	r3, r9
 80071e8:	bfa8      	it	ge
 80071ea:	4643      	movge	r3, r8
 80071ec:	42bb      	cmp	r3, r7
 80071ee:	bfa8      	it	ge
 80071f0:	463b      	movge	r3, r7
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	bfc2      	ittt	gt
 80071f6:	eba8 0803 	subgt.w	r8, r8, r3
 80071fa:	1aff      	subgt	r7, r7, r3
 80071fc:	eba9 0903 	subgt.w	r9, r9, r3
 8007200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007202:	2b00      	cmp	r3, #0
 8007204:	dd17      	ble.n	8007236 <_strtod_l+0x75e>
 8007206:	4631      	mov	r1, r6
 8007208:	461a      	mov	r2, r3
 800720a:	4620      	mov	r0, r4
 800720c:	f002 f9ea 	bl	80095e4 <__pow5mult>
 8007210:	4606      	mov	r6, r0
 8007212:	2800      	cmp	r0, #0
 8007214:	f43f aea8 	beq.w	8006f68 <_strtod_l+0x490>
 8007218:	4601      	mov	r1, r0
 800721a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800721c:	4620      	mov	r0, r4
 800721e:	f002 f937 	bl	8009490 <__multiply>
 8007222:	900b      	str	r0, [sp, #44]	; 0x2c
 8007224:	2800      	cmp	r0, #0
 8007226:	f43f ae9f 	beq.w	8006f68 <_strtod_l+0x490>
 800722a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800722c:	4620      	mov	r0, r4
 800722e:	f002 f817 	bl	8009260 <_Bfree>
 8007232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007234:	9318      	str	r3, [sp, #96]	; 0x60
 8007236:	f1b8 0f00 	cmp.w	r8, #0
 800723a:	f300 808c 	bgt.w	8007356 <_strtod_l+0x87e>
 800723e:	9b06      	ldr	r3, [sp, #24]
 8007240:	2b00      	cmp	r3, #0
 8007242:	dd08      	ble.n	8007256 <_strtod_l+0x77e>
 8007244:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007246:	9905      	ldr	r1, [sp, #20]
 8007248:	4620      	mov	r0, r4
 800724a:	f002 f9cb 	bl	80095e4 <__pow5mult>
 800724e:	9005      	str	r0, [sp, #20]
 8007250:	2800      	cmp	r0, #0
 8007252:	f43f ae89 	beq.w	8006f68 <_strtod_l+0x490>
 8007256:	2f00      	cmp	r7, #0
 8007258:	dd08      	ble.n	800726c <_strtod_l+0x794>
 800725a:	9905      	ldr	r1, [sp, #20]
 800725c:	463a      	mov	r2, r7
 800725e:	4620      	mov	r0, r4
 8007260:	f002 fa1a 	bl	8009698 <__lshift>
 8007264:	9005      	str	r0, [sp, #20]
 8007266:	2800      	cmp	r0, #0
 8007268:	f43f ae7e 	beq.w	8006f68 <_strtod_l+0x490>
 800726c:	f1b9 0f00 	cmp.w	r9, #0
 8007270:	dd08      	ble.n	8007284 <_strtod_l+0x7ac>
 8007272:	4631      	mov	r1, r6
 8007274:	464a      	mov	r2, r9
 8007276:	4620      	mov	r0, r4
 8007278:	f002 fa0e 	bl	8009698 <__lshift>
 800727c:	4606      	mov	r6, r0
 800727e:	2800      	cmp	r0, #0
 8007280:	f43f ae72 	beq.w	8006f68 <_strtod_l+0x490>
 8007284:	9a05      	ldr	r2, [sp, #20]
 8007286:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007288:	4620      	mov	r0, r4
 800728a:	f002 fa91 	bl	80097b0 <__mdiff>
 800728e:	4605      	mov	r5, r0
 8007290:	2800      	cmp	r0, #0
 8007292:	f43f ae69 	beq.w	8006f68 <_strtod_l+0x490>
 8007296:	68c3      	ldr	r3, [r0, #12]
 8007298:	930b      	str	r3, [sp, #44]	; 0x2c
 800729a:	2300      	movs	r3, #0
 800729c:	60c3      	str	r3, [r0, #12]
 800729e:	4631      	mov	r1, r6
 80072a0:	f002 fa6a 	bl	8009778 <__mcmp>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	da60      	bge.n	800736a <_strtod_l+0x892>
 80072a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072aa:	ea53 030a 	orrs.w	r3, r3, sl
 80072ae:	f040 8082 	bne.w	80073b6 <_strtod_l+0x8de>
 80072b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d17d      	bne.n	80073b6 <_strtod_l+0x8de>
 80072ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80072be:	0d1b      	lsrs	r3, r3, #20
 80072c0:	051b      	lsls	r3, r3, #20
 80072c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80072c6:	d976      	bls.n	80073b6 <_strtod_l+0x8de>
 80072c8:	696b      	ldr	r3, [r5, #20]
 80072ca:	b913      	cbnz	r3, 80072d2 <_strtod_l+0x7fa>
 80072cc:	692b      	ldr	r3, [r5, #16]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	dd71      	ble.n	80073b6 <_strtod_l+0x8de>
 80072d2:	4629      	mov	r1, r5
 80072d4:	2201      	movs	r2, #1
 80072d6:	4620      	mov	r0, r4
 80072d8:	f002 f9de 	bl	8009698 <__lshift>
 80072dc:	4631      	mov	r1, r6
 80072de:	4605      	mov	r5, r0
 80072e0:	f002 fa4a 	bl	8009778 <__mcmp>
 80072e4:	2800      	cmp	r0, #0
 80072e6:	dd66      	ble.n	80073b6 <_strtod_l+0x8de>
 80072e8:	9904      	ldr	r1, [sp, #16]
 80072ea:	4a53      	ldr	r2, [pc, #332]	; (8007438 <_strtod_l+0x960>)
 80072ec:	465b      	mov	r3, fp
 80072ee:	2900      	cmp	r1, #0
 80072f0:	f000 8081 	beq.w	80073f6 <_strtod_l+0x91e>
 80072f4:	ea02 010b 	and.w	r1, r2, fp
 80072f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80072fc:	dc7b      	bgt.n	80073f6 <_strtod_l+0x91e>
 80072fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007302:	f77f aea9 	ble.w	8007058 <_strtod_l+0x580>
 8007306:	4b4d      	ldr	r3, [pc, #308]	; (800743c <_strtod_l+0x964>)
 8007308:	4650      	mov	r0, sl
 800730a:	4659      	mov	r1, fp
 800730c:	2200      	movs	r2, #0
 800730e:	f7f9 f993 	bl	8000638 <__aeabi_dmul>
 8007312:	460b      	mov	r3, r1
 8007314:	4303      	orrs	r3, r0
 8007316:	bf08      	it	eq
 8007318:	2322      	moveq	r3, #34	; 0x22
 800731a:	4682      	mov	sl, r0
 800731c:	468b      	mov	fp, r1
 800731e:	bf08      	it	eq
 8007320:	6023      	streq	r3, [r4, #0]
 8007322:	e62b      	b.n	8006f7c <_strtod_l+0x4a4>
 8007324:	f04f 32ff 	mov.w	r2, #4294967295
 8007328:	fa02 f303 	lsl.w	r3, r2, r3
 800732c:	ea03 0a0a 	and.w	sl, r3, sl
 8007330:	e6e3      	b.n	80070fa <_strtod_l+0x622>
 8007332:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007336:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800733a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800733e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007342:	fa01 f308 	lsl.w	r3, r1, r8
 8007346:	9308      	str	r3, [sp, #32]
 8007348:	910d      	str	r1, [sp, #52]	; 0x34
 800734a:	e746      	b.n	80071da <_strtod_l+0x702>
 800734c:	2300      	movs	r3, #0
 800734e:	9308      	str	r3, [sp, #32]
 8007350:	2301      	movs	r3, #1
 8007352:	930d      	str	r3, [sp, #52]	; 0x34
 8007354:	e741      	b.n	80071da <_strtod_l+0x702>
 8007356:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007358:	4642      	mov	r2, r8
 800735a:	4620      	mov	r0, r4
 800735c:	f002 f99c 	bl	8009698 <__lshift>
 8007360:	9018      	str	r0, [sp, #96]	; 0x60
 8007362:	2800      	cmp	r0, #0
 8007364:	f47f af6b 	bne.w	800723e <_strtod_l+0x766>
 8007368:	e5fe      	b.n	8006f68 <_strtod_l+0x490>
 800736a:	465f      	mov	r7, fp
 800736c:	d16e      	bne.n	800744c <_strtod_l+0x974>
 800736e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007370:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007374:	b342      	cbz	r2, 80073c8 <_strtod_l+0x8f0>
 8007376:	4a32      	ldr	r2, [pc, #200]	; (8007440 <_strtod_l+0x968>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d128      	bne.n	80073ce <_strtod_l+0x8f6>
 800737c:	9b04      	ldr	r3, [sp, #16]
 800737e:	4651      	mov	r1, sl
 8007380:	b1eb      	cbz	r3, 80073be <_strtod_l+0x8e6>
 8007382:	4b2d      	ldr	r3, [pc, #180]	; (8007438 <_strtod_l+0x960>)
 8007384:	403b      	ands	r3, r7
 8007386:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800738a:	f04f 32ff 	mov.w	r2, #4294967295
 800738e:	d819      	bhi.n	80073c4 <_strtod_l+0x8ec>
 8007390:	0d1b      	lsrs	r3, r3, #20
 8007392:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007396:	fa02 f303 	lsl.w	r3, r2, r3
 800739a:	4299      	cmp	r1, r3
 800739c:	d117      	bne.n	80073ce <_strtod_l+0x8f6>
 800739e:	4b29      	ldr	r3, [pc, #164]	; (8007444 <_strtod_l+0x96c>)
 80073a0:	429f      	cmp	r7, r3
 80073a2:	d102      	bne.n	80073aa <_strtod_l+0x8d2>
 80073a4:	3101      	adds	r1, #1
 80073a6:	f43f addf 	beq.w	8006f68 <_strtod_l+0x490>
 80073aa:	4b23      	ldr	r3, [pc, #140]	; (8007438 <_strtod_l+0x960>)
 80073ac:	403b      	ands	r3, r7
 80073ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80073b2:	f04f 0a00 	mov.w	sl, #0
 80073b6:	9b04      	ldr	r3, [sp, #16]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1a4      	bne.n	8007306 <_strtod_l+0x82e>
 80073bc:	e5de      	b.n	8006f7c <_strtod_l+0x4a4>
 80073be:	f04f 33ff 	mov.w	r3, #4294967295
 80073c2:	e7ea      	b.n	800739a <_strtod_l+0x8c2>
 80073c4:	4613      	mov	r3, r2
 80073c6:	e7e8      	b.n	800739a <_strtod_l+0x8c2>
 80073c8:	ea53 030a 	orrs.w	r3, r3, sl
 80073cc:	d08c      	beq.n	80072e8 <_strtod_l+0x810>
 80073ce:	9b08      	ldr	r3, [sp, #32]
 80073d0:	b1db      	cbz	r3, 800740a <_strtod_l+0x932>
 80073d2:	423b      	tst	r3, r7
 80073d4:	d0ef      	beq.n	80073b6 <_strtod_l+0x8de>
 80073d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073d8:	9a04      	ldr	r2, [sp, #16]
 80073da:	4650      	mov	r0, sl
 80073dc:	4659      	mov	r1, fp
 80073de:	b1c3      	cbz	r3, 8007412 <_strtod_l+0x93a>
 80073e0:	f7ff fb5e 	bl	8006aa0 <sulp>
 80073e4:	4602      	mov	r2, r0
 80073e6:	460b      	mov	r3, r1
 80073e8:	ec51 0b18 	vmov	r0, r1, d8
 80073ec:	f7f8 ff6e 	bl	80002cc <__adddf3>
 80073f0:	4682      	mov	sl, r0
 80073f2:	468b      	mov	fp, r1
 80073f4:	e7df      	b.n	80073b6 <_strtod_l+0x8de>
 80073f6:	4013      	ands	r3, r2
 80073f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80073fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007400:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007404:	f04f 3aff 	mov.w	sl, #4294967295
 8007408:	e7d5      	b.n	80073b6 <_strtod_l+0x8de>
 800740a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800740c:	ea13 0f0a 	tst.w	r3, sl
 8007410:	e7e0      	b.n	80073d4 <_strtod_l+0x8fc>
 8007412:	f7ff fb45 	bl	8006aa0 <sulp>
 8007416:	4602      	mov	r2, r0
 8007418:	460b      	mov	r3, r1
 800741a:	ec51 0b18 	vmov	r0, r1, d8
 800741e:	f7f8 ff53 	bl	80002c8 <__aeabi_dsub>
 8007422:	2200      	movs	r2, #0
 8007424:	2300      	movs	r3, #0
 8007426:	4682      	mov	sl, r0
 8007428:	468b      	mov	fp, r1
 800742a:	f7f9 fb6d 	bl	8000b08 <__aeabi_dcmpeq>
 800742e:	2800      	cmp	r0, #0
 8007430:	d0c1      	beq.n	80073b6 <_strtod_l+0x8de>
 8007432:	e611      	b.n	8007058 <_strtod_l+0x580>
 8007434:	fffffc02 	.word	0xfffffc02
 8007438:	7ff00000 	.word	0x7ff00000
 800743c:	39500000 	.word	0x39500000
 8007440:	000fffff 	.word	0x000fffff
 8007444:	7fefffff 	.word	0x7fefffff
 8007448:	08012f60 	.word	0x08012f60
 800744c:	4631      	mov	r1, r6
 800744e:	4628      	mov	r0, r5
 8007450:	f002 fb10 	bl	8009a74 <__ratio>
 8007454:	ec59 8b10 	vmov	r8, r9, d0
 8007458:	ee10 0a10 	vmov	r0, s0
 800745c:	2200      	movs	r2, #0
 800745e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007462:	4649      	mov	r1, r9
 8007464:	f7f9 fb64 	bl	8000b30 <__aeabi_dcmple>
 8007468:	2800      	cmp	r0, #0
 800746a:	d07a      	beq.n	8007562 <_strtod_l+0xa8a>
 800746c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800746e:	2b00      	cmp	r3, #0
 8007470:	d04a      	beq.n	8007508 <_strtod_l+0xa30>
 8007472:	4b95      	ldr	r3, [pc, #596]	; (80076c8 <_strtod_l+0xbf0>)
 8007474:	2200      	movs	r2, #0
 8007476:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800747a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80076c8 <_strtod_l+0xbf0>
 800747e:	f04f 0800 	mov.w	r8, #0
 8007482:	4b92      	ldr	r3, [pc, #584]	; (80076cc <_strtod_l+0xbf4>)
 8007484:	403b      	ands	r3, r7
 8007486:	930d      	str	r3, [sp, #52]	; 0x34
 8007488:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800748a:	4b91      	ldr	r3, [pc, #580]	; (80076d0 <_strtod_l+0xbf8>)
 800748c:	429a      	cmp	r2, r3
 800748e:	f040 80b0 	bne.w	80075f2 <_strtod_l+0xb1a>
 8007492:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007496:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800749a:	ec4b ab10 	vmov	d0, sl, fp
 800749e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80074a2:	f002 fa0f 	bl	80098c4 <__ulp>
 80074a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80074aa:	ec53 2b10 	vmov	r2, r3, d0
 80074ae:	f7f9 f8c3 	bl	8000638 <__aeabi_dmul>
 80074b2:	4652      	mov	r2, sl
 80074b4:	465b      	mov	r3, fp
 80074b6:	f7f8 ff09 	bl	80002cc <__adddf3>
 80074ba:	460b      	mov	r3, r1
 80074bc:	4983      	ldr	r1, [pc, #524]	; (80076cc <_strtod_l+0xbf4>)
 80074be:	4a85      	ldr	r2, [pc, #532]	; (80076d4 <_strtod_l+0xbfc>)
 80074c0:	4019      	ands	r1, r3
 80074c2:	4291      	cmp	r1, r2
 80074c4:	4682      	mov	sl, r0
 80074c6:	d960      	bls.n	800758a <_strtod_l+0xab2>
 80074c8:	ee18 3a90 	vmov	r3, s17
 80074cc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d104      	bne.n	80074de <_strtod_l+0xa06>
 80074d4:	ee18 3a10 	vmov	r3, s16
 80074d8:	3301      	adds	r3, #1
 80074da:	f43f ad45 	beq.w	8006f68 <_strtod_l+0x490>
 80074de:	f8df b200 	ldr.w	fp, [pc, #512]	; 80076e0 <_strtod_l+0xc08>
 80074e2:	f04f 3aff 	mov.w	sl, #4294967295
 80074e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80074e8:	4620      	mov	r0, r4
 80074ea:	f001 feb9 	bl	8009260 <_Bfree>
 80074ee:	9905      	ldr	r1, [sp, #20]
 80074f0:	4620      	mov	r0, r4
 80074f2:	f001 feb5 	bl	8009260 <_Bfree>
 80074f6:	4631      	mov	r1, r6
 80074f8:	4620      	mov	r0, r4
 80074fa:	f001 feb1 	bl	8009260 <_Bfree>
 80074fe:	4629      	mov	r1, r5
 8007500:	4620      	mov	r0, r4
 8007502:	f001 fead 	bl	8009260 <_Bfree>
 8007506:	e61a      	b.n	800713e <_strtod_l+0x666>
 8007508:	f1ba 0f00 	cmp.w	sl, #0
 800750c:	d11b      	bne.n	8007546 <_strtod_l+0xa6e>
 800750e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007512:	b9f3      	cbnz	r3, 8007552 <_strtod_l+0xa7a>
 8007514:	4b6c      	ldr	r3, [pc, #432]	; (80076c8 <_strtod_l+0xbf0>)
 8007516:	2200      	movs	r2, #0
 8007518:	4640      	mov	r0, r8
 800751a:	4649      	mov	r1, r9
 800751c:	f7f9 fafe 	bl	8000b1c <__aeabi_dcmplt>
 8007520:	b9d0      	cbnz	r0, 8007558 <_strtod_l+0xa80>
 8007522:	4640      	mov	r0, r8
 8007524:	4649      	mov	r1, r9
 8007526:	4b6c      	ldr	r3, [pc, #432]	; (80076d8 <_strtod_l+0xc00>)
 8007528:	2200      	movs	r2, #0
 800752a:	f7f9 f885 	bl	8000638 <__aeabi_dmul>
 800752e:	4680      	mov	r8, r0
 8007530:	4689      	mov	r9, r1
 8007532:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007536:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800753a:	9315      	str	r3, [sp, #84]	; 0x54
 800753c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007540:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007544:	e79d      	b.n	8007482 <_strtod_l+0x9aa>
 8007546:	f1ba 0f01 	cmp.w	sl, #1
 800754a:	d102      	bne.n	8007552 <_strtod_l+0xa7a>
 800754c:	2f00      	cmp	r7, #0
 800754e:	f43f ad83 	beq.w	8007058 <_strtod_l+0x580>
 8007552:	4b62      	ldr	r3, [pc, #392]	; (80076dc <_strtod_l+0xc04>)
 8007554:	2200      	movs	r2, #0
 8007556:	e78e      	b.n	8007476 <_strtod_l+0x99e>
 8007558:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80076d8 <_strtod_l+0xc00>
 800755c:	f04f 0800 	mov.w	r8, #0
 8007560:	e7e7      	b.n	8007532 <_strtod_l+0xa5a>
 8007562:	4b5d      	ldr	r3, [pc, #372]	; (80076d8 <_strtod_l+0xc00>)
 8007564:	4640      	mov	r0, r8
 8007566:	4649      	mov	r1, r9
 8007568:	2200      	movs	r2, #0
 800756a:	f7f9 f865 	bl	8000638 <__aeabi_dmul>
 800756e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007570:	4680      	mov	r8, r0
 8007572:	4689      	mov	r9, r1
 8007574:	b933      	cbnz	r3, 8007584 <_strtod_l+0xaac>
 8007576:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800757a:	900e      	str	r0, [sp, #56]	; 0x38
 800757c:	930f      	str	r3, [sp, #60]	; 0x3c
 800757e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007582:	e7dd      	b.n	8007540 <_strtod_l+0xa68>
 8007584:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007588:	e7f9      	b.n	800757e <_strtod_l+0xaa6>
 800758a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800758e:	9b04      	ldr	r3, [sp, #16]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1a8      	bne.n	80074e6 <_strtod_l+0xa0e>
 8007594:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007598:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800759a:	0d1b      	lsrs	r3, r3, #20
 800759c:	051b      	lsls	r3, r3, #20
 800759e:	429a      	cmp	r2, r3
 80075a0:	d1a1      	bne.n	80074e6 <_strtod_l+0xa0e>
 80075a2:	4640      	mov	r0, r8
 80075a4:	4649      	mov	r1, r9
 80075a6:	f7f9 fba7 	bl	8000cf8 <__aeabi_d2lz>
 80075aa:	f7f9 f817 	bl	80005dc <__aeabi_l2d>
 80075ae:	4602      	mov	r2, r0
 80075b0:	460b      	mov	r3, r1
 80075b2:	4640      	mov	r0, r8
 80075b4:	4649      	mov	r1, r9
 80075b6:	f7f8 fe87 	bl	80002c8 <__aeabi_dsub>
 80075ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075c0:	ea43 030a 	orr.w	r3, r3, sl
 80075c4:	4313      	orrs	r3, r2
 80075c6:	4680      	mov	r8, r0
 80075c8:	4689      	mov	r9, r1
 80075ca:	d055      	beq.n	8007678 <_strtod_l+0xba0>
 80075cc:	a336      	add	r3, pc, #216	; (adr r3, 80076a8 <_strtod_l+0xbd0>)
 80075ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d2:	f7f9 faa3 	bl	8000b1c <__aeabi_dcmplt>
 80075d6:	2800      	cmp	r0, #0
 80075d8:	f47f acd0 	bne.w	8006f7c <_strtod_l+0x4a4>
 80075dc:	a334      	add	r3, pc, #208	; (adr r3, 80076b0 <_strtod_l+0xbd8>)
 80075de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e2:	4640      	mov	r0, r8
 80075e4:	4649      	mov	r1, r9
 80075e6:	f7f9 fab7 	bl	8000b58 <__aeabi_dcmpgt>
 80075ea:	2800      	cmp	r0, #0
 80075ec:	f43f af7b 	beq.w	80074e6 <_strtod_l+0xa0e>
 80075f0:	e4c4      	b.n	8006f7c <_strtod_l+0x4a4>
 80075f2:	9b04      	ldr	r3, [sp, #16]
 80075f4:	b333      	cbz	r3, 8007644 <_strtod_l+0xb6c>
 80075f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075f8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80075fc:	d822      	bhi.n	8007644 <_strtod_l+0xb6c>
 80075fe:	a32e      	add	r3, pc, #184	; (adr r3, 80076b8 <_strtod_l+0xbe0>)
 8007600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007604:	4640      	mov	r0, r8
 8007606:	4649      	mov	r1, r9
 8007608:	f7f9 fa92 	bl	8000b30 <__aeabi_dcmple>
 800760c:	b1a0      	cbz	r0, 8007638 <_strtod_l+0xb60>
 800760e:	4649      	mov	r1, r9
 8007610:	4640      	mov	r0, r8
 8007612:	f7f9 fae9 	bl	8000be8 <__aeabi_d2uiz>
 8007616:	2801      	cmp	r0, #1
 8007618:	bf38      	it	cc
 800761a:	2001      	movcc	r0, #1
 800761c:	f7f8 ff92 	bl	8000544 <__aeabi_ui2d>
 8007620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007622:	4680      	mov	r8, r0
 8007624:	4689      	mov	r9, r1
 8007626:	bb23      	cbnz	r3, 8007672 <_strtod_l+0xb9a>
 8007628:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800762c:	9010      	str	r0, [sp, #64]	; 0x40
 800762e:	9311      	str	r3, [sp, #68]	; 0x44
 8007630:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007634:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800763a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800763c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007640:	1a9b      	subs	r3, r3, r2
 8007642:	9309      	str	r3, [sp, #36]	; 0x24
 8007644:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007648:	eeb0 0a48 	vmov.f32	s0, s16
 800764c:	eef0 0a68 	vmov.f32	s1, s17
 8007650:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007654:	f002 f936 	bl	80098c4 <__ulp>
 8007658:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800765c:	ec53 2b10 	vmov	r2, r3, d0
 8007660:	f7f8 ffea 	bl	8000638 <__aeabi_dmul>
 8007664:	ec53 2b18 	vmov	r2, r3, d8
 8007668:	f7f8 fe30 	bl	80002cc <__adddf3>
 800766c:	4682      	mov	sl, r0
 800766e:	468b      	mov	fp, r1
 8007670:	e78d      	b.n	800758e <_strtod_l+0xab6>
 8007672:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007676:	e7db      	b.n	8007630 <_strtod_l+0xb58>
 8007678:	a311      	add	r3, pc, #68	; (adr r3, 80076c0 <_strtod_l+0xbe8>)
 800767a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767e:	f7f9 fa4d 	bl	8000b1c <__aeabi_dcmplt>
 8007682:	e7b2      	b.n	80075ea <_strtod_l+0xb12>
 8007684:	2300      	movs	r3, #0
 8007686:	930a      	str	r3, [sp, #40]	; 0x28
 8007688:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800768a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800768c:	6013      	str	r3, [r2, #0]
 800768e:	f7ff ba6b 	b.w	8006b68 <_strtod_l+0x90>
 8007692:	2a65      	cmp	r2, #101	; 0x65
 8007694:	f43f ab5f 	beq.w	8006d56 <_strtod_l+0x27e>
 8007698:	2a45      	cmp	r2, #69	; 0x45
 800769a:	f43f ab5c 	beq.w	8006d56 <_strtod_l+0x27e>
 800769e:	2301      	movs	r3, #1
 80076a0:	f7ff bb94 	b.w	8006dcc <_strtod_l+0x2f4>
 80076a4:	f3af 8000 	nop.w
 80076a8:	94a03595 	.word	0x94a03595
 80076ac:	3fdfffff 	.word	0x3fdfffff
 80076b0:	35afe535 	.word	0x35afe535
 80076b4:	3fe00000 	.word	0x3fe00000
 80076b8:	ffc00000 	.word	0xffc00000
 80076bc:	41dfffff 	.word	0x41dfffff
 80076c0:	94a03595 	.word	0x94a03595
 80076c4:	3fcfffff 	.word	0x3fcfffff
 80076c8:	3ff00000 	.word	0x3ff00000
 80076cc:	7ff00000 	.word	0x7ff00000
 80076d0:	7fe00000 	.word	0x7fe00000
 80076d4:	7c9fffff 	.word	0x7c9fffff
 80076d8:	3fe00000 	.word	0x3fe00000
 80076dc:	bff00000 	.word	0xbff00000
 80076e0:	7fefffff 	.word	0x7fefffff

080076e4 <_strtod_r>:
 80076e4:	4b01      	ldr	r3, [pc, #4]	; (80076ec <_strtod_r+0x8>)
 80076e6:	f7ff b9f7 	b.w	8006ad8 <_strtod_l>
 80076ea:	bf00      	nop
 80076ec:	20000484 	.word	0x20000484

080076f0 <_strtol_l.constprop.0>:
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076f6:	d001      	beq.n	80076fc <_strtol_l.constprop.0+0xc>
 80076f8:	2b24      	cmp	r3, #36	; 0x24
 80076fa:	d906      	bls.n	800770a <_strtol_l.constprop.0+0x1a>
 80076fc:	f7fe fa70 	bl	8005be0 <__errno>
 8007700:	2316      	movs	r3, #22
 8007702:	6003      	str	r3, [r0, #0]
 8007704:	2000      	movs	r0, #0
 8007706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800770a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80077f0 <_strtol_l.constprop.0+0x100>
 800770e:	460d      	mov	r5, r1
 8007710:	462e      	mov	r6, r5
 8007712:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007716:	f814 700c 	ldrb.w	r7, [r4, ip]
 800771a:	f017 0708 	ands.w	r7, r7, #8
 800771e:	d1f7      	bne.n	8007710 <_strtol_l.constprop.0+0x20>
 8007720:	2c2d      	cmp	r4, #45	; 0x2d
 8007722:	d132      	bne.n	800778a <_strtol_l.constprop.0+0x9a>
 8007724:	782c      	ldrb	r4, [r5, #0]
 8007726:	2701      	movs	r7, #1
 8007728:	1cb5      	adds	r5, r6, #2
 800772a:	2b00      	cmp	r3, #0
 800772c:	d05b      	beq.n	80077e6 <_strtol_l.constprop.0+0xf6>
 800772e:	2b10      	cmp	r3, #16
 8007730:	d109      	bne.n	8007746 <_strtol_l.constprop.0+0x56>
 8007732:	2c30      	cmp	r4, #48	; 0x30
 8007734:	d107      	bne.n	8007746 <_strtol_l.constprop.0+0x56>
 8007736:	782c      	ldrb	r4, [r5, #0]
 8007738:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800773c:	2c58      	cmp	r4, #88	; 0x58
 800773e:	d14d      	bne.n	80077dc <_strtol_l.constprop.0+0xec>
 8007740:	786c      	ldrb	r4, [r5, #1]
 8007742:	2310      	movs	r3, #16
 8007744:	3502      	adds	r5, #2
 8007746:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800774a:	f108 38ff 	add.w	r8, r8, #4294967295
 800774e:	f04f 0c00 	mov.w	ip, #0
 8007752:	fbb8 f9f3 	udiv	r9, r8, r3
 8007756:	4666      	mov	r6, ip
 8007758:	fb03 8a19 	mls	sl, r3, r9, r8
 800775c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007760:	f1be 0f09 	cmp.w	lr, #9
 8007764:	d816      	bhi.n	8007794 <_strtol_l.constprop.0+0xa4>
 8007766:	4674      	mov	r4, lr
 8007768:	42a3      	cmp	r3, r4
 800776a:	dd24      	ble.n	80077b6 <_strtol_l.constprop.0+0xc6>
 800776c:	f1bc 0f00 	cmp.w	ip, #0
 8007770:	db1e      	blt.n	80077b0 <_strtol_l.constprop.0+0xc0>
 8007772:	45b1      	cmp	r9, r6
 8007774:	d31c      	bcc.n	80077b0 <_strtol_l.constprop.0+0xc0>
 8007776:	d101      	bne.n	800777c <_strtol_l.constprop.0+0x8c>
 8007778:	45a2      	cmp	sl, r4
 800777a:	db19      	blt.n	80077b0 <_strtol_l.constprop.0+0xc0>
 800777c:	fb06 4603 	mla	r6, r6, r3, r4
 8007780:	f04f 0c01 	mov.w	ip, #1
 8007784:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007788:	e7e8      	b.n	800775c <_strtol_l.constprop.0+0x6c>
 800778a:	2c2b      	cmp	r4, #43	; 0x2b
 800778c:	bf04      	itt	eq
 800778e:	782c      	ldrbeq	r4, [r5, #0]
 8007790:	1cb5      	addeq	r5, r6, #2
 8007792:	e7ca      	b.n	800772a <_strtol_l.constprop.0+0x3a>
 8007794:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007798:	f1be 0f19 	cmp.w	lr, #25
 800779c:	d801      	bhi.n	80077a2 <_strtol_l.constprop.0+0xb2>
 800779e:	3c37      	subs	r4, #55	; 0x37
 80077a0:	e7e2      	b.n	8007768 <_strtol_l.constprop.0+0x78>
 80077a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80077a6:	f1be 0f19 	cmp.w	lr, #25
 80077aa:	d804      	bhi.n	80077b6 <_strtol_l.constprop.0+0xc6>
 80077ac:	3c57      	subs	r4, #87	; 0x57
 80077ae:	e7db      	b.n	8007768 <_strtol_l.constprop.0+0x78>
 80077b0:	f04f 3cff 	mov.w	ip, #4294967295
 80077b4:	e7e6      	b.n	8007784 <_strtol_l.constprop.0+0x94>
 80077b6:	f1bc 0f00 	cmp.w	ip, #0
 80077ba:	da05      	bge.n	80077c8 <_strtol_l.constprop.0+0xd8>
 80077bc:	2322      	movs	r3, #34	; 0x22
 80077be:	6003      	str	r3, [r0, #0]
 80077c0:	4646      	mov	r6, r8
 80077c2:	b942      	cbnz	r2, 80077d6 <_strtol_l.constprop.0+0xe6>
 80077c4:	4630      	mov	r0, r6
 80077c6:	e79e      	b.n	8007706 <_strtol_l.constprop.0+0x16>
 80077c8:	b107      	cbz	r7, 80077cc <_strtol_l.constprop.0+0xdc>
 80077ca:	4276      	negs	r6, r6
 80077cc:	2a00      	cmp	r2, #0
 80077ce:	d0f9      	beq.n	80077c4 <_strtol_l.constprop.0+0xd4>
 80077d0:	f1bc 0f00 	cmp.w	ip, #0
 80077d4:	d000      	beq.n	80077d8 <_strtol_l.constprop.0+0xe8>
 80077d6:	1e69      	subs	r1, r5, #1
 80077d8:	6011      	str	r1, [r2, #0]
 80077da:	e7f3      	b.n	80077c4 <_strtol_l.constprop.0+0xd4>
 80077dc:	2430      	movs	r4, #48	; 0x30
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1b1      	bne.n	8007746 <_strtol_l.constprop.0+0x56>
 80077e2:	2308      	movs	r3, #8
 80077e4:	e7af      	b.n	8007746 <_strtol_l.constprop.0+0x56>
 80077e6:	2c30      	cmp	r4, #48	; 0x30
 80077e8:	d0a5      	beq.n	8007736 <_strtol_l.constprop.0+0x46>
 80077ea:	230a      	movs	r3, #10
 80077ec:	e7ab      	b.n	8007746 <_strtol_l.constprop.0+0x56>
 80077ee:	bf00      	nop
 80077f0:	08012f89 	.word	0x08012f89

080077f4 <_strtol_r>:
 80077f4:	f7ff bf7c 	b.w	80076f0 <_strtol_l.constprop.0>

080077f8 <__swbuf_r>:
 80077f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fa:	460e      	mov	r6, r1
 80077fc:	4614      	mov	r4, r2
 80077fe:	4605      	mov	r5, r0
 8007800:	b118      	cbz	r0, 800780a <__swbuf_r+0x12>
 8007802:	6983      	ldr	r3, [r0, #24]
 8007804:	b90b      	cbnz	r3, 800780a <__swbuf_r+0x12>
 8007806:	f001 f84b 	bl	80088a0 <__sinit>
 800780a:	4b21      	ldr	r3, [pc, #132]	; (8007890 <__swbuf_r+0x98>)
 800780c:	429c      	cmp	r4, r3
 800780e:	d12b      	bne.n	8007868 <__swbuf_r+0x70>
 8007810:	686c      	ldr	r4, [r5, #4]
 8007812:	69a3      	ldr	r3, [r4, #24]
 8007814:	60a3      	str	r3, [r4, #8]
 8007816:	89a3      	ldrh	r3, [r4, #12]
 8007818:	071a      	lsls	r2, r3, #28
 800781a:	d52f      	bpl.n	800787c <__swbuf_r+0x84>
 800781c:	6923      	ldr	r3, [r4, #16]
 800781e:	b36b      	cbz	r3, 800787c <__swbuf_r+0x84>
 8007820:	6923      	ldr	r3, [r4, #16]
 8007822:	6820      	ldr	r0, [r4, #0]
 8007824:	1ac0      	subs	r0, r0, r3
 8007826:	6963      	ldr	r3, [r4, #20]
 8007828:	b2f6      	uxtb	r6, r6
 800782a:	4283      	cmp	r3, r0
 800782c:	4637      	mov	r7, r6
 800782e:	dc04      	bgt.n	800783a <__swbuf_r+0x42>
 8007830:	4621      	mov	r1, r4
 8007832:	4628      	mov	r0, r5
 8007834:	f000 ffa0 	bl	8008778 <_fflush_r>
 8007838:	bb30      	cbnz	r0, 8007888 <__swbuf_r+0x90>
 800783a:	68a3      	ldr	r3, [r4, #8]
 800783c:	3b01      	subs	r3, #1
 800783e:	60a3      	str	r3, [r4, #8]
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	6022      	str	r2, [r4, #0]
 8007846:	701e      	strb	r6, [r3, #0]
 8007848:	6963      	ldr	r3, [r4, #20]
 800784a:	3001      	adds	r0, #1
 800784c:	4283      	cmp	r3, r0
 800784e:	d004      	beq.n	800785a <__swbuf_r+0x62>
 8007850:	89a3      	ldrh	r3, [r4, #12]
 8007852:	07db      	lsls	r3, r3, #31
 8007854:	d506      	bpl.n	8007864 <__swbuf_r+0x6c>
 8007856:	2e0a      	cmp	r6, #10
 8007858:	d104      	bne.n	8007864 <__swbuf_r+0x6c>
 800785a:	4621      	mov	r1, r4
 800785c:	4628      	mov	r0, r5
 800785e:	f000 ff8b 	bl	8008778 <_fflush_r>
 8007862:	b988      	cbnz	r0, 8007888 <__swbuf_r+0x90>
 8007864:	4638      	mov	r0, r7
 8007866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007868:	4b0a      	ldr	r3, [pc, #40]	; (8007894 <__swbuf_r+0x9c>)
 800786a:	429c      	cmp	r4, r3
 800786c:	d101      	bne.n	8007872 <__swbuf_r+0x7a>
 800786e:	68ac      	ldr	r4, [r5, #8]
 8007870:	e7cf      	b.n	8007812 <__swbuf_r+0x1a>
 8007872:	4b09      	ldr	r3, [pc, #36]	; (8007898 <__swbuf_r+0xa0>)
 8007874:	429c      	cmp	r4, r3
 8007876:	bf08      	it	eq
 8007878:	68ec      	ldreq	r4, [r5, #12]
 800787a:	e7ca      	b.n	8007812 <__swbuf_r+0x1a>
 800787c:	4621      	mov	r1, r4
 800787e:	4628      	mov	r0, r5
 8007880:	f000 f80c 	bl	800789c <__swsetup_r>
 8007884:	2800      	cmp	r0, #0
 8007886:	d0cb      	beq.n	8007820 <__swbuf_r+0x28>
 8007888:	f04f 37ff 	mov.w	r7, #4294967295
 800788c:	e7ea      	b.n	8007864 <__swbuf_r+0x6c>
 800788e:	bf00      	nop
 8007890:	0801313c 	.word	0x0801313c
 8007894:	0801315c 	.word	0x0801315c
 8007898:	0801311c 	.word	0x0801311c

0800789c <__swsetup_r>:
 800789c:	4b32      	ldr	r3, [pc, #200]	; (8007968 <__swsetup_r+0xcc>)
 800789e:	b570      	push	{r4, r5, r6, lr}
 80078a0:	681d      	ldr	r5, [r3, #0]
 80078a2:	4606      	mov	r6, r0
 80078a4:	460c      	mov	r4, r1
 80078a6:	b125      	cbz	r5, 80078b2 <__swsetup_r+0x16>
 80078a8:	69ab      	ldr	r3, [r5, #24]
 80078aa:	b913      	cbnz	r3, 80078b2 <__swsetup_r+0x16>
 80078ac:	4628      	mov	r0, r5
 80078ae:	f000 fff7 	bl	80088a0 <__sinit>
 80078b2:	4b2e      	ldr	r3, [pc, #184]	; (800796c <__swsetup_r+0xd0>)
 80078b4:	429c      	cmp	r4, r3
 80078b6:	d10f      	bne.n	80078d8 <__swsetup_r+0x3c>
 80078b8:	686c      	ldr	r4, [r5, #4]
 80078ba:	89a3      	ldrh	r3, [r4, #12]
 80078bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078c0:	0719      	lsls	r1, r3, #28
 80078c2:	d42c      	bmi.n	800791e <__swsetup_r+0x82>
 80078c4:	06dd      	lsls	r5, r3, #27
 80078c6:	d411      	bmi.n	80078ec <__swsetup_r+0x50>
 80078c8:	2309      	movs	r3, #9
 80078ca:	6033      	str	r3, [r6, #0]
 80078cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80078d0:	81a3      	strh	r3, [r4, #12]
 80078d2:	f04f 30ff 	mov.w	r0, #4294967295
 80078d6:	e03e      	b.n	8007956 <__swsetup_r+0xba>
 80078d8:	4b25      	ldr	r3, [pc, #148]	; (8007970 <__swsetup_r+0xd4>)
 80078da:	429c      	cmp	r4, r3
 80078dc:	d101      	bne.n	80078e2 <__swsetup_r+0x46>
 80078de:	68ac      	ldr	r4, [r5, #8]
 80078e0:	e7eb      	b.n	80078ba <__swsetup_r+0x1e>
 80078e2:	4b24      	ldr	r3, [pc, #144]	; (8007974 <__swsetup_r+0xd8>)
 80078e4:	429c      	cmp	r4, r3
 80078e6:	bf08      	it	eq
 80078e8:	68ec      	ldreq	r4, [r5, #12]
 80078ea:	e7e6      	b.n	80078ba <__swsetup_r+0x1e>
 80078ec:	0758      	lsls	r0, r3, #29
 80078ee:	d512      	bpl.n	8007916 <__swsetup_r+0x7a>
 80078f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078f2:	b141      	cbz	r1, 8007906 <__swsetup_r+0x6a>
 80078f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078f8:	4299      	cmp	r1, r3
 80078fa:	d002      	beq.n	8007902 <__swsetup_r+0x66>
 80078fc:	4630      	mov	r0, r6
 80078fe:	f002 f947 	bl	8009b90 <_free_r>
 8007902:	2300      	movs	r3, #0
 8007904:	6363      	str	r3, [r4, #52]	; 0x34
 8007906:	89a3      	ldrh	r3, [r4, #12]
 8007908:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800790c:	81a3      	strh	r3, [r4, #12]
 800790e:	2300      	movs	r3, #0
 8007910:	6063      	str	r3, [r4, #4]
 8007912:	6923      	ldr	r3, [r4, #16]
 8007914:	6023      	str	r3, [r4, #0]
 8007916:	89a3      	ldrh	r3, [r4, #12]
 8007918:	f043 0308 	orr.w	r3, r3, #8
 800791c:	81a3      	strh	r3, [r4, #12]
 800791e:	6923      	ldr	r3, [r4, #16]
 8007920:	b94b      	cbnz	r3, 8007936 <__swsetup_r+0x9a>
 8007922:	89a3      	ldrh	r3, [r4, #12]
 8007924:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800792c:	d003      	beq.n	8007936 <__swsetup_r+0x9a>
 800792e:	4621      	mov	r1, r4
 8007930:	4630      	mov	r0, r6
 8007932:	f001 fbed 	bl	8009110 <__smakebuf_r>
 8007936:	89a0      	ldrh	r0, [r4, #12]
 8007938:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800793c:	f010 0301 	ands.w	r3, r0, #1
 8007940:	d00a      	beq.n	8007958 <__swsetup_r+0xbc>
 8007942:	2300      	movs	r3, #0
 8007944:	60a3      	str	r3, [r4, #8]
 8007946:	6963      	ldr	r3, [r4, #20]
 8007948:	425b      	negs	r3, r3
 800794a:	61a3      	str	r3, [r4, #24]
 800794c:	6923      	ldr	r3, [r4, #16]
 800794e:	b943      	cbnz	r3, 8007962 <__swsetup_r+0xc6>
 8007950:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007954:	d1ba      	bne.n	80078cc <__swsetup_r+0x30>
 8007956:	bd70      	pop	{r4, r5, r6, pc}
 8007958:	0781      	lsls	r1, r0, #30
 800795a:	bf58      	it	pl
 800795c:	6963      	ldrpl	r3, [r4, #20]
 800795e:	60a3      	str	r3, [r4, #8]
 8007960:	e7f4      	b.n	800794c <__swsetup_r+0xb0>
 8007962:	2000      	movs	r0, #0
 8007964:	e7f7      	b.n	8007956 <__swsetup_r+0xba>
 8007966:	bf00      	nop
 8007968:	2000041c 	.word	0x2000041c
 800796c:	0801313c 	.word	0x0801313c
 8007970:	0801315c 	.word	0x0801315c
 8007974:	0801311c 	.word	0x0801311c

08007978 <quorem>:
 8007978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800797c:	6903      	ldr	r3, [r0, #16]
 800797e:	690c      	ldr	r4, [r1, #16]
 8007980:	42a3      	cmp	r3, r4
 8007982:	4607      	mov	r7, r0
 8007984:	f2c0 8081 	blt.w	8007a8a <quorem+0x112>
 8007988:	3c01      	subs	r4, #1
 800798a:	f101 0814 	add.w	r8, r1, #20
 800798e:	f100 0514 	add.w	r5, r0, #20
 8007992:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007996:	9301      	str	r3, [sp, #4]
 8007998:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800799c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079a0:	3301      	adds	r3, #1
 80079a2:	429a      	cmp	r2, r3
 80079a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80079a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80079b0:	d331      	bcc.n	8007a16 <quorem+0x9e>
 80079b2:	f04f 0e00 	mov.w	lr, #0
 80079b6:	4640      	mov	r0, r8
 80079b8:	46ac      	mov	ip, r5
 80079ba:	46f2      	mov	sl, lr
 80079bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80079c0:	b293      	uxth	r3, r2
 80079c2:	fb06 e303 	mla	r3, r6, r3, lr
 80079c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	ebaa 0303 	sub.w	r3, sl, r3
 80079d0:	f8dc a000 	ldr.w	sl, [ip]
 80079d4:	0c12      	lsrs	r2, r2, #16
 80079d6:	fa13 f38a 	uxtah	r3, r3, sl
 80079da:	fb06 e202 	mla	r2, r6, r2, lr
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	9b00      	ldr	r3, [sp, #0]
 80079e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079e6:	b292      	uxth	r2, r2
 80079e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80079ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80079f4:	4581      	cmp	r9, r0
 80079f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079fa:	f84c 3b04 	str.w	r3, [ip], #4
 80079fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a02:	d2db      	bcs.n	80079bc <quorem+0x44>
 8007a04:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a08:	b92b      	cbnz	r3, 8007a16 <quorem+0x9e>
 8007a0a:	9b01      	ldr	r3, [sp, #4]
 8007a0c:	3b04      	subs	r3, #4
 8007a0e:	429d      	cmp	r5, r3
 8007a10:	461a      	mov	r2, r3
 8007a12:	d32e      	bcc.n	8007a72 <quorem+0xfa>
 8007a14:	613c      	str	r4, [r7, #16]
 8007a16:	4638      	mov	r0, r7
 8007a18:	f001 feae 	bl	8009778 <__mcmp>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	db24      	blt.n	8007a6a <quorem+0xf2>
 8007a20:	3601      	adds	r6, #1
 8007a22:	4628      	mov	r0, r5
 8007a24:	f04f 0c00 	mov.w	ip, #0
 8007a28:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a2c:	f8d0 e000 	ldr.w	lr, [r0]
 8007a30:	b293      	uxth	r3, r2
 8007a32:	ebac 0303 	sub.w	r3, ip, r3
 8007a36:	0c12      	lsrs	r2, r2, #16
 8007a38:	fa13 f38e 	uxtah	r3, r3, lr
 8007a3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a4a:	45c1      	cmp	r9, r8
 8007a4c:	f840 3b04 	str.w	r3, [r0], #4
 8007a50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a54:	d2e8      	bcs.n	8007a28 <quorem+0xb0>
 8007a56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a5e:	b922      	cbnz	r2, 8007a6a <quorem+0xf2>
 8007a60:	3b04      	subs	r3, #4
 8007a62:	429d      	cmp	r5, r3
 8007a64:	461a      	mov	r2, r3
 8007a66:	d30a      	bcc.n	8007a7e <quorem+0x106>
 8007a68:	613c      	str	r4, [r7, #16]
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	b003      	add	sp, #12
 8007a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a72:	6812      	ldr	r2, [r2, #0]
 8007a74:	3b04      	subs	r3, #4
 8007a76:	2a00      	cmp	r2, #0
 8007a78:	d1cc      	bne.n	8007a14 <quorem+0x9c>
 8007a7a:	3c01      	subs	r4, #1
 8007a7c:	e7c7      	b.n	8007a0e <quorem+0x96>
 8007a7e:	6812      	ldr	r2, [r2, #0]
 8007a80:	3b04      	subs	r3, #4
 8007a82:	2a00      	cmp	r2, #0
 8007a84:	d1f0      	bne.n	8007a68 <quorem+0xf0>
 8007a86:	3c01      	subs	r4, #1
 8007a88:	e7eb      	b.n	8007a62 <quorem+0xea>
 8007a8a:	2000      	movs	r0, #0
 8007a8c:	e7ee      	b.n	8007a6c <quorem+0xf4>
	...

08007a90 <_dtoa_r>:
 8007a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a94:	ed2d 8b04 	vpush	{d8-d9}
 8007a98:	ec57 6b10 	vmov	r6, r7, d0
 8007a9c:	b093      	sub	sp, #76	; 0x4c
 8007a9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007aa0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007aa4:	9106      	str	r1, [sp, #24]
 8007aa6:	ee10 aa10 	vmov	sl, s0
 8007aaa:	4604      	mov	r4, r0
 8007aac:	9209      	str	r2, [sp, #36]	; 0x24
 8007aae:	930c      	str	r3, [sp, #48]	; 0x30
 8007ab0:	46bb      	mov	fp, r7
 8007ab2:	b975      	cbnz	r5, 8007ad2 <_dtoa_r+0x42>
 8007ab4:	2010      	movs	r0, #16
 8007ab6:	f001 fb6b 	bl	8009190 <malloc>
 8007aba:	4602      	mov	r2, r0
 8007abc:	6260      	str	r0, [r4, #36]	; 0x24
 8007abe:	b920      	cbnz	r0, 8007aca <_dtoa_r+0x3a>
 8007ac0:	4ba7      	ldr	r3, [pc, #668]	; (8007d60 <_dtoa_r+0x2d0>)
 8007ac2:	21ea      	movs	r1, #234	; 0xea
 8007ac4:	48a7      	ldr	r0, [pc, #668]	; (8007d64 <_dtoa_r+0x2d4>)
 8007ac6:	f002 fc89 	bl	800a3dc <__assert_func>
 8007aca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ace:	6005      	str	r5, [r0, #0]
 8007ad0:	60c5      	str	r5, [r0, #12]
 8007ad2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ad4:	6819      	ldr	r1, [r3, #0]
 8007ad6:	b151      	cbz	r1, 8007aee <_dtoa_r+0x5e>
 8007ad8:	685a      	ldr	r2, [r3, #4]
 8007ada:	604a      	str	r2, [r1, #4]
 8007adc:	2301      	movs	r3, #1
 8007ade:	4093      	lsls	r3, r2
 8007ae0:	608b      	str	r3, [r1, #8]
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f001 fbbc 	bl	8009260 <_Bfree>
 8007ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aea:	2200      	movs	r2, #0
 8007aec:	601a      	str	r2, [r3, #0]
 8007aee:	1e3b      	subs	r3, r7, #0
 8007af0:	bfaa      	itet	ge
 8007af2:	2300      	movge	r3, #0
 8007af4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007af8:	f8c8 3000 	strge.w	r3, [r8]
 8007afc:	4b9a      	ldr	r3, [pc, #616]	; (8007d68 <_dtoa_r+0x2d8>)
 8007afe:	bfbc      	itt	lt
 8007b00:	2201      	movlt	r2, #1
 8007b02:	f8c8 2000 	strlt.w	r2, [r8]
 8007b06:	ea33 030b 	bics.w	r3, r3, fp
 8007b0a:	d11b      	bne.n	8007b44 <_dtoa_r+0xb4>
 8007b0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b0e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b12:	6013      	str	r3, [r2, #0]
 8007b14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b18:	4333      	orrs	r3, r6
 8007b1a:	f000 8592 	beq.w	8008642 <_dtoa_r+0xbb2>
 8007b1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b20:	b963      	cbnz	r3, 8007b3c <_dtoa_r+0xac>
 8007b22:	4b92      	ldr	r3, [pc, #584]	; (8007d6c <_dtoa_r+0x2dc>)
 8007b24:	e022      	b.n	8007b6c <_dtoa_r+0xdc>
 8007b26:	4b92      	ldr	r3, [pc, #584]	; (8007d70 <_dtoa_r+0x2e0>)
 8007b28:	9301      	str	r3, [sp, #4]
 8007b2a:	3308      	adds	r3, #8
 8007b2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	9801      	ldr	r0, [sp, #4]
 8007b32:	b013      	add	sp, #76	; 0x4c
 8007b34:	ecbd 8b04 	vpop	{d8-d9}
 8007b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b3c:	4b8b      	ldr	r3, [pc, #556]	; (8007d6c <_dtoa_r+0x2dc>)
 8007b3e:	9301      	str	r3, [sp, #4]
 8007b40:	3303      	adds	r3, #3
 8007b42:	e7f3      	b.n	8007b2c <_dtoa_r+0x9c>
 8007b44:	2200      	movs	r2, #0
 8007b46:	2300      	movs	r3, #0
 8007b48:	4650      	mov	r0, sl
 8007b4a:	4659      	mov	r1, fp
 8007b4c:	f7f8 ffdc 	bl	8000b08 <__aeabi_dcmpeq>
 8007b50:	ec4b ab19 	vmov	d9, sl, fp
 8007b54:	4680      	mov	r8, r0
 8007b56:	b158      	cbz	r0, 8007b70 <_dtoa_r+0xe0>
 8007b58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	6013      	str	r3, [r2, #0]
 8007b5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 856b 	beq.w	800863c <_dtoa_r+0xbac>
 8007b66:	4883      	ldr	r0, [pc, #524]	; (8007d74 <_dtoa_r+0x2e4>)
 8007b68:	6018      	str	r0, [r3, #0]
 8007b6a:	1e43      	subs	r3, r0, #1
 8007b6c:	9301      	str	r3, [sp, #4]
 8007b6e:	e7df      	b.n	8007b30 <_dtoa_r+0xa0>
 8007b70:	ec4b ab10 	vmov	d0, sl, fp
 8007b74:	aa10      	add	r2, sp, #64	; 0x40
 8007b76:	a911      	add	r1, sp, #68	; 0x44
 8007b78:	4620      	mov	r0, r4
 8007b7a:	f001 ff1f 	bl	80099bc <__d2b>
 8007b7e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007b82:	ee08 0a10 	vmov	s16, r0
 8007b86:	2d00      	cmp	r5, #0
 8007b88:	f000 8084 	beq.w	8007c94 <_dtoa_r+0x204>
 8007b8c:	ee19 3a90 	vmov	r3, s19
 8007b90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b94:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007b98:	4656      	mov	r6, sl
 8007b9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007b9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007ba2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007ba6:	4b74      	ldr	r3, [pc, #464]	; (8007d78 <_dtoa_r+0x2e8>)
 8007ba8:	2200      	movs	r2, #0
 8007baa:	4630      	mov	r0, r6
 8007bac:	4639      	mov	r1, r7
 8007bae:	f7f8 fb8b 	bl	80002c8 <__aeabi_dsub>
 8007bb2:	a365      	add	r3, pc, #404	; (adr r3, 8007d48 <_dtoa_r+0x2b8>)
 8007bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb8:	f7f8 fd3e 	bl	8000638 <__aeabi_dmul>
 8007bbc:	a364      	add	r3, pc, #400	; (adr r3, 8007d50 <_dtoa_r+0x2c0>)
 8007bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc2:	f7f8 fb83 	bl	80002cc <__adddf3>
 8007bc6:	4606      	mov	r6, r0
 8007bc8:	4628      	mov	r0, r5
 8007bca:	460f      	mov	r7, r1
 8007bcc:	f7f8 fcca 	bl	8000564 <__aeabi_i2d>
 8007bd0:	a361      	add	r3, pc, #388	; (adr r3, 8007d58 <_dtoa_r+0x2c8>)
 8007bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd6:	f7f8 fd2f 	bl	8000638 <__aeabi_dmul>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	4630      	mov	r0, r6
 8007be0:	4639      	mov	r1, r7
 8007be2:	f7f8 fb73 	bl	80002cc <__adddf3>
 8007be6:	4606      	mov	r6, r0
 8007be8:	460f      	mov	r7, r1
 8007bea:	f7f8 ffd5 	bl	8000b98 <__aeabi_d2iz>
 8007bee:	2200      	movs	r2, #0
 8007bf0:	9000      	str	r0, [sp, #0]
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	4639      	mov	r1, r7
 8007bf8:	f7f8 ff90 	bl	8000b1c <__aeabi_dcmplt>
 8007bfc:	b150      	cbz	r0, 8007c14 <_dtoa_r+0x184>
 8007bfe:	9800      	ldr	r0, [sp, #0]
 8007c00:	f7f8 fcb0 	bl	8000564 <__aeabi_i2d>
 8007c04:	4632      	mov	r2, r6
 8007c06:	463b      	mov	r3, r7
 8007c08:	f7f8 ff7e 	bl	8000b08 <__aeabi_dcmpeq>
 8007c0c:	b910      	cbnz	r0, 8007c14 <_dtoa_r+0x184>
 8007c0e:	9b00      	ldr	r3, [sp, #0]
 8007c10:	3b01      	subs	r3, #1
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	9b00      	ldr	r3, [sp, #0]
 8007c16:	2b16      	cmp	r3, #22
 8007c18:	d85a      	bhi.n	8007cd0 <_dtoa_r+0x240>
 8007c1a:	9a00      	ldr	r2, [sp, #0]
 8007c1c:	4b57      	ldr	r3, [pc, #348]	; (8007d7c <_dtoa_r+0x2ec>)
 8007c1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c26:	ec51 0b19 	vmov	r0, r1, d9
 8007c2a:	f7f8 ff77 	bl	8000b1c <__aeabi_dcmplt>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	d050      	beq.n	8007cd4 <_dtoa_r+0x244>
 8007c32:	9b00      	ldr	r3, [sp, #0]
 8007c34:	3b01      	subs	r3, #1
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	2300      	movs	r3, #0
 8007c3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c3e:	1b5d      	subs	r5, r3, r5
 8007c40:	1e6b      	subs	r3, r5, #1
 8007c42:	9305      	str	r3, [sp, #20]
 8007c44:	bf45      	ittet	mi
 8007c46:	f1c5 0301 	rsbmi	r3, r5, #1
 8007c4a:	9304      	strmi	r3, [sp, #16]
 8007c4c:	2300      	movpl	r3, #0
 8007c4e:	2300      	movmi	r3, #0
 8007c50:	bf4c      	ite	mi
 8007c52:	9305      	strmi	r3, [sp, #20]
 8007c54:	9304      	strpl	r3, [sp, #16]
 8007c56:	9b00      	ldr	r3, [sp, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	db3d      	blt.n	8007cd8 <_dtoa_r+0x248>
 8007c5c:	9b05      	ldr	r3, [sp, #20]
 8007c5e:	9a00      	ldr	r2, [sp, #0]
 8007c60:	920a      	str	r2, [sp, #40]	; 0x28
 8007c62:	4413      	add	r3, r2
 8007c64:	9305      	str	r3, [sp, #20]
 8007c66:	2300      	movs	r3, #0
 8007c68:	9307      	str	r3, [sp, #28]
 8007c6a:	9b06      	ldr	r3, [sp, #24]
 8007c6c:	2b09      	cmp	r3, #9
 8007c6e:	f200 8089 	bhi.w	8007d84 <_dtoa_r+0x2f4>
 8007c72:	2b05      	cmp	r3, #5
 8007c74:	bfc4      	itt	gt
 8007c76:	3b04      	subgt	r3, #4
 8007c78:	9306      	strgt	r3, [sp, #24]
 8007c7a:	9b06      	ldr	r3, [sp, #24]
 8007c7c:	f1a3 0302 	sub.w	r3, r3, #2
 8007c80:	bfcc      	ite	gt
 8007c82:	2500      	movgt	r5, #0
 8007c84:	2501      	movle	r5, #1
 8007c86:	2b03      	cmp	r3, #3
 8007c88:	f200 8087 	bhi.w	8007d9a <_dtoa_r+0x30a>
 8007c8c:	e8df f003 	tbb	[pc, r3]
 8007c90:	59383a2d 	.word	0x59383a2d
 8007c94:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007c98:	441d      	add	r5, r3
 8007c9a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007c9e:	2b20      	cmp	r3, #32
 8007ca0:	bfc1      	itttt	gt
 8007ca2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ca6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007caa:	fa0b f303 	lslgt.w	r3, fp, r3
 8007cae:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007cb2:	bfda      	itte	le
 8007cb4:	f1c3 0320 	rsble	r3, r3, #32
 8007cb8:	fa06 f003 	lslle.w	r0, r6, r3
 8007cbc:	4318      	orrgt	r0, r3
 8007cbe:	f7f8 fc41 	bl	8000544 <__aeabi_ui2d>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	4606      	mov	r6, r0
 8007cc6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007cca:	3d01      	subs	r5, #1
 8007ccc:	930e      	str	r3, [sp, #56]	; 0x38
 8007cce:	e76a      	b.n	8007ba6 <_dtoa_r+0x116>
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e7b2      	b.n	8007c3a <_dtoa_r+0x1aa>
 8007cd4:	900b      	str	r0, [sp, #44]	; 0x2c
 8007cd6:	e7b1      	b.n	8007c3c <_dtoa_r+0x1ac>
 8007cd8:	9b04      	ldr	r3, [sp, #16]
 8007cda:	9a00      	ldr	r2, [sp, #0]
 8007cdc:	1a9b      	subs	r3, r3, r2
 8007cde:	9304      	str	r3, [sp, #16]
 8007ce0:	4253      	negs	r3, r2
 8007ce2:	9307      	str	r3, [sp, #28]
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ce8:	e7bf      	b.n	8007c6a <_dtoa_r+0x1da>
 8007cea:	2300      	movs	r3, #0
 8007cec:	9308      	str	r3, [sp, #32]
 8007cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	dc55      	bgt.n	8007da0 <_dtoa_r+0x310>
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	9209      	str	r2, [sp, #36]	; 0x24
 8007cfe:	e00c      	b.n	8007d1a <_dtoa_r+0x28a>
 8007d00:	2301      	movs	r3, #1
 8007d02:	e7f3      	b.n	8007cec <_dtoa_r+0x25c>
 8007d04:	2300      	movs	r3, #0
 8007d06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d08:	9308      	str	r3, [sp, #32]
 8007d0a:	9b00      	ldr	r3, [sp, #0]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	9302      	str	r3, [sp, #8]
 8007d10:	3301      	adds	r3, #1
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	9303      	str	r3, [sp, #12]
 8007d16:	bfb8      	it	lt
 8007d18:	2301      	movlt	r3, #1
 8007d1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	6042      	str	r2, [r0, #4]
 8007d20:	2204      	movs	r2, #4
 8007d22:	f102 0614 	add.w	r6, r2, #20
 8007d26:	429e      	cmp	r6, r3
 8007d28:	6841      	ldr	r1, [r0, #4]
 8007d2a:	d93d      	bls.n	8007da8 <_dtoa_r+0x318>
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f001 fa57 	bl	80091e0 <_Balloc>
 8007d32:	9001      	str	r0, [sp, #4]
 8007d34:	2800      	cmp	r0, #0
 8007d36:	d13b      	bne.n	8007db0 <_dtoa_r+0x320>
 8007d38:	4b11      	ldr	r3, [pc, #68]	; (8007d80 <_dtoa_r+0x2f0>)
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007d40:	e6c0      	b.n	8007ac4 <_dtoa_r+0x34>
 8007d42:	2301      	movs	r3, #1
 8007d44:	e7df      	b.n	8007d06 <_dtoa_r+0x276>
 8007d46:	bf00      	nop
 8007d48:	636f4361 	.word	0x636f4361
 8007d4c:	3fd287a7 	.word	0x3fd287a7
 8007d50:	8b60c8b3 	.word	0x8b60c8b3
 8007d54:	3fc68a28 	.word	0x3fc68a28
 8007d58:	509f79fb 	.word	0x509f79fb
 8007d5c:	3fd34413 	.word	0x3fd34413
 8007d60:	08013096 	.word	0x08013096
 8007d64:	080130ad 	.word	0x080130ad
 8007d68:	7ff00000 	.word	0x7ff00000
 8007d6c:	08013092 	.word	0x08013092
 8007d70:	08013089 	.word	0x08013089
 8007d74:	08012f0d 	.word	0x08012f0d
 8007d78:	3ff80000 	.word	0x3ff80000
 8007d7c:	08013280 	.word	0x08013280
 8007d80:	08013108 	.word	0x08013108
 8007d84:	2501      	movs	r5, #1
 8007d86:	2300      	movs	r3, #0
 8007d88:	9306      	str	r3, [sp, #24]
 8007d8a:	9508      	str	r5, [sp, #32]
 8007d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d90:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d94:	2200      	movs	r2, #0
 8007d96:	2312      	movs	r3, #18
 8007d98:	e7b0      	b.n	8007cfc <_dtoa_r+0x26c>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	9308      	str	r3, [sp, #32]
 8007d9e:	e7f5      	b.n	8007d8c <_dtoa_r+0x2fc>
 8007da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007da6:	e7b8      	b.n	8007d1a <_dtoa_r+0x28a>
 8007da8:	3101      	adds	r1, #1
 8007daa:	6041      	str	r1, [r0, #4]
 8007dac:	0052      	lsls	r2, r2, #1
 8007dae:	e7b8      	b.n	8007d22 <_dtoa_r+0x292>
 8007db0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007db2:	9a01      	ldr	r2, [sp, #4]
 8007db4:	601a      	str	r2, [r3, #0]
 8007db6:	9b03      	ldr	r3, [sp, #12]
 8007db8:	2b0e      	cmp	r3, #14
 8007dba:	f200 809d 	bhi.w	8007ef8 <_dtoa_r+0x468>
 8007dbe:	2d00      	cmp	r5, #0
 8007dc0:	f000 809a 	beq.w	8007ef8 <_dtoa_r+0x468>
 8007dc4:	9b00      	ldr	r3, [sp, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	dd32      	ble.n	8007e30 <_dtoa_r+0x3a0>
 8007dca:	4ab7      	ldr	r2, [pc, #732]	; (80080a8 <_dtoa_r+0x618>)
 8007dcc:	f003 030f 	and.w	r3, r3, #15
 8007dd0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007dd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007dd8:	9b00      	ldr	r3, [sp, #0]
 8007dda:	05d8      	lsls	r0, r3, #23
 8007ddc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007de0:	d516      	bpl.n	8007e10 <_dtoa_r+0x380>
 8007de2:	4bb2      	ldr	r3, [pc, #712]	; (80080ac <_dtoa_r+0x61c>)
 8007de4:	ec51 0b19 	vmov	r0, r1, d9
 8007de8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007dec:	f7f8 fd4e 	bl	800088c <__aeabi_ddiv>
 8007df0:	f007 070f 	and.w	r7, r7, #15
 8007df4:	4682      	mov	sl, r0
 8007df6:	468b      	mov	fp, r1
 8007df8:	2503      	movs	r5, #3
 8007dfa:	4eac      	ldr	r6, [pc, #688]	; (80080ac <_dtoa_r+0x61c>)
 8007dfc:	b957      	cbnz	r7, 8007e14 <_dtoa_r+0x384>
 8007dfe:	4642      	mov	r2, r8
 8007e00:	464b      	mov	r3, r9
 8007e02:	4650      	mov	r0, sl
 8007e04:	4659      	mov	r1, fp
 8007e06:	f7f8 fd41 	bl	800088c <__aeabi_ddiv>
 8007e0a:	4682      	mov	sl, r0
 8007e0c:	468b      	mov	fp, r1
 8007e0e:	e028      	b.n	8007e62 <_dtoa_r+0x3d2>
 8007e10:	2502      	movs	r5, #2
 8007e12:	e7f2      	b.n	8007dfa <_dtoa_r+0x36a>
 8007e14:	07f9      	lsls	r1, r7, #31
 8007e16:	d508      	bpl.n	8007e2a <_dtoa_r+0x39a>
 8007e18:	4640      	mov	r0, r8
 8007e1a:	4649      	mov	r1, r9
 8007e1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e20:	f7f8 fc0a 	bl	8000638 <__aeabi_dmul>
 8007e24:	3501      	adds	r5, #1
 8007e26:	4680      	mov	r8, r0
 8007e28:	4689      	mov	r9, r1
 8007e2a:	107f      	asrs	r7, r7, #1
 8007e2c:	3608      	adds	r6, #8
 8007e2e:	e7e5      	b.n	8007dfc <_dtoa_r+0x36c>
 8007e30:	f000 809b 	beq.w	8007f6a <_dtoa_r+0x4da>
 8007e34:	9b00      	ldr	r3, [sp, #0]
 8007e36:	4f9d      	ldr	r7, [pc, #628]	; (80080ac <_dtoa_r+0x61c>)
 8007e38:	425e      	negs	r6, r3
 8007e3a:	4b9b      	ldr	r3, [pc, #620]	; (80080a8 <_dtoa_r+0x618>)
 8007e3c:	f006 020f 	and.w	r2, r6, #15
 8007e40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	ec51 0b19 	vmov	r0, r1, d9
 8007e4c:	f7f8 fbf4 	bl	8000638 <__aeabi_dmul>
 8007e50:	1136      	asrs	r6, r6, #4
 8007e52:	4682      	mov	sl, r0
 8007e54:	468b      	mov	fp, r1
 8007e56:	2300      	movs	r3, #0
 8007e58:	2502      	movs	r5, #2
 8007e5a:	2e00      	cmp	r6, #0
 8007e5c:	d17a      	bne.n	8007f54 <_dtoa_r+0x4c4>
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1d3      	bne.n	8007e0a <_dtoa_r+0x37a>
 8007e62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f000 8082 	beq.w	8007f6e <_dtoa_r+0x4de>
 8007e6a:	4b91      	ldr	r3, [pc, #580]	; (80080b0 <_dtoa_r+0x620>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	4650      	mov	r0, sl
 8007e70:	4659      	mov	r1, fp
 8007e72:	f7f8 fe53 	bl	8000b1c <__aeabi_dcmplt>
 8007e76:	2800      	cmp	r0, #0
 8007e78:	d079      	beq.n	8007f6e <_dtoa_r+0x4de>
 8007e7a:	9b03      	ldr	r3, [sp, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d076      	beq.n	8007f6e <_dtoa_r+0x4de>
 8007e80:	9b02      	ldr	r3, [sp, #8]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	dd36      	ble.n	8007ef4 <_dtoa_r+0x464>
 8007e86:	9b00      	ldr	r3, [sp, #0]
 8007e88:	4650      	mov	r0, sl
 8007e8a:	4659      	mov	r1, fp
 8007e8c:	1e5f      	subs	r7, r3, #1
 8007e8e:	2200      	movs	r2, #0
 8007e90:	4b88      	ldr	r3, [pc, #544]	; (80080b4 <_dtoa_r+0x624>)
 8007e92:	f7f8 fbd1 	bl	8000638 <__aeabi_dmul>
 8007e96:	9e02      	ldr	r6, [sp, #8]
 8007e98:	4682      	mov	sl, r0
 8007e9a:	468b      	mov	fp, r1
 8007e9c:	3501      	adds	r5, #1
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f7f8 fb60 	bl	8000564 <__aeabi_i2d>
 8007ea4:	4652      	mov	r2, sl
 8007ea6:	465b      	mov	r3, fp
 8007ea8:	f7f8 fbc6 	bl	8000638 <__aeabi_dmul>
 8007eac:	4b82      	ldr	r3, [pc, #520]	; (80080b8 <_dtoa_r+0x628>)
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f7f8 fa0c 	bl	80002cc <__adddf3>
 8007eb4:	46d0      	mov	r8, sl
 8007eb6:	46d9      	mov	r9, fp
 8007eb8:	4682      	mov	sl, r0
 8007eba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007ebe:	2e00      	cmp	r6, #0
 8007ec0:	d158      	bne.n	8007f74 <_dtoa_r+0x4e4>
 8007ec2:	4b7e      	ldr	r3, [pc, #504]	; (80080bc <_dtoa_r+0x62c>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	4640      	mov	r0, r8
 8007ec8:	4649      	mov	r1, r9
 8007eca:	f7f8 f9fd 	bl	80002c8 <__aeabi_dsub>
 8007ece:	4652      	mov	r2, sl
 8007ed0:	465b      	mov	r3, fp
 8007ed2:	4680      	mov	r8, r0
 8007ed4:	4689      	mov	r9, r1
 8007ed6:	f7f8 fe3f 	bl	8000b58 <__aeabi_dcmpgt>
 8007eda:	2800      	cmp	r0, #0
 8007edc:	f040 8295 	bne.w	800840a <_dtoa_r+0x97a>
 8007ee0:	4652      	mov	r2, sl
 8007ee2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007ee6:	4640      	mov	r0, r8
 8007ee8:	4649      	mov	r1, r9
 8007eea:	f7f8 fe17 	bl	8000b1c <__aeabi_dcmplt>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	f040 8289 	bne.w	8008406 <_dtoa_r+0x976>
 8007ef4:	ec5b ab19 	vmov	sl, fp, d9
 8007ef8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f2c0 8148 	blt.w	8008190 <_dtoa_r+0x700>
 8007f00:	9a00      	ldr	r2, [sp, #0]
 8007f02:	2a0e      	cmp	r2, #14
 8007f04:	f300 8144 	bgt.w	8008190 <_dtoa_r+0x700>
 8007f08:	4b67      	ldr	r3, [pc, #412]	; (80080a8 <_dtoa_r+0x618>)
 8007f0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f280 80d5 	bge.w	80080c4 <_dtoa_r+0x634>
 8007f1a:	9b03      	ldr	r3, [sp, #12]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f300 80d1 	bgt.w	80080c4 <_dtoa_r+0x634>
 8007f22:	f040 826f 	bne.w	8008404 <_dtoa_r+0x974>
 8007f26:	4b65      	ldr	r3, [pc, #404]	; (80080bc <_dtoa_r+0x62c>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	4640      	mov	r0, r8
 8007f2c:	4649      	mov	r1, r9
 8007f2e:	f7f8 fb83 	bl	8000638 <__aeabi_dmul>
 8007f32:	4652      	mov	r2, sl
 8007f34:	465b      	mov	r3, fp
 8007f36:	f7f8 fe05 	bl	8000b44 <__aeabi_dcmpge>
 8007f3a:	9e03      	ldr	r6, [sp, #12]
 8007f3c:	4637      	mov	r7, r6
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	f040 8245 	bne.w	80083ce <_dtoa_r+0x93e>
 8007f44:	9d01      	ldr	r5, [sp, #4]
 8007f46:	2331      	movs	r3, #49	; 0x31
 8007f48:	f805 3b01 	strb.w	r3, [r5], #1
 8007f4c:	9b00      	ldr	r3, [sp, #0]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	e240      	b.n	80083d6 <_dtoa_r+0x946>
 8007f54:	07f2      	lsls	r2, r6, #31
 8007f56:	d505      	bpl.n	8007f64 <_dtoa_r+0x4d4>
 8007f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f5c:	f7f8 fb6c 	bl	8000638 <__aeabi_dmul>
 8007f60:	3501      	adds	r5, #1
 8007f62:	2301      	movs	r3, #1
 8007f64:	1076      	asrs	r6, r6, #1
 8007f66:	3708      	adds	r7, #8
 8007f68:	e777      	b.n	8007e5a <_dtoa_r+0x3ca>
 8007f6a:	2502      	movs	r5, #2
 8007f6c:	e779      	b.n	8007e62 <_dtoa_r+0x3d2>
 8007f6e:	9f00      	ldr	r7, [sp, #0]
 8007f70:	9e03      	ldr	r6, [sp, #12]
 8007f72:	e794      	b.n	8007e9e <_dtoa_r+0x40e>
 8007f74:	9901      	ldr	r1, [sp, #4]
 8007f76:	4b4c      	ldr	r3, [pc, #304]	; (80080a8 <_dtoa_r+0x618>)
 8007f78:	4431      	add	r1, r6
 8007f7a:	910d      	str	r1, [sp, #52]	; 0x34
 8007f7c:	9908      	ldr	r1, [sp, #32]
 8007f7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f86:	2900      	cmp	r1, #0
 8007f88:	d043      	beq.n	8008012 <_dtoa_r+0x582>
 8007f8a:	494d      	ldr	r1, [pc, #308]	; (80080c0 <_dtoa_r+0x630>)
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	f7f8 fc7d 	bl	800088c <__aeabi_ddiv>
 8007f92:	4652      	mov	r2, sl
 8007f94:	465b      	mov	r3, fp
 8007f96:	f7f8 f997 	bl	80002c8 <__aeabi_dsub>
 8007f9a:	9d01      	ldr	r5, [sp, #4]
 8007f9c:	4682      	mov	sl, r0
 8007f9e:	468b      	mov	fp, r1
 8007fa0:	4649      	mov	r1, r9
 8007fa2:	4640      	mov	r0, r8
 8007fa4:	f7f8 fdf8 	bl	8000b98 <__aeabi_d2iz>
 8007fa8:	4606      	mov	r6, r0
 8007faa:	f7f8 fadb 	bl	8000564 <__aeabi_i2d>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4640      	mov	r0, r8
 8007fb4:	4649      	mov	r1, r9
 8007fb6:	f7f8 f987 	bl	80002c8 <__aeabi_dsub>
 8007fba:	3630      	adds	r6, #48	; 0x30
 8007fbc:	f805 6b01 	strb.w	r6, [r5], #1
 8007fc0:	4652      	mov	r2, sl
 8007fc2:	465b      	mov	r3, fp
 8007fc4:	4680      	mov	r8, r0
 8007fc6:	4689      	mov	r9, r1
 8007fc8:	f7f8 fda8 	bl	8000b1c <__aeabi_dcmplt>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d163      	bne.n	8008098 <_dtoa_r+0x608>
 8007fd0:	4642      	mov	r2, r8
 8007fd2:	464b      	mov	r3, r9
 8007fd4:	4936      	ldr	r1, [pc, #216]	; (80080b0 <_dtoa_r+0x620>)
 8007fd6:	2000      	movs	r0, #0
 8007fd8:	f7f8 f976 	bl	80002c8 <__aeabi_dsub>
 8007fdc:	4652      	mov	r2, sl
 8007fde:	465b      	mov	r3, fp
 8007fe0:	f7f8 fd9c 	bl	8000b1c <__aeabi_dcmplt>
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	f040 80b5 	bne.w	8008154 <_dtoa_r+0x6c4>
 8007fea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fec:	429d      	cmp	r5, r3
 8007fee:	d081      	beq.n	8007ef4 <_dtoa_r+0x464>
 8007ff0:	4b30      	ldr	r3, [pc, #192]	; (80080b4 <_dtoa_r+0x624>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	4650      	mov	r0, sl
 8007ff6:	4659      	mov	r1, fp
 8007ff8:	f7f8 fb1e 	bl	8000638 <__aeabi_dmul>
 8007ffc:	4b2d      	ldr	r3, [pc, #180]	; (80080b4 <_dtoa_r+0x624>)
 8007ffe:	4682      	mov	sl, r0
 8008000:	468b      	mov	fp, r1
 8008002:	4640      	mov	r0, r8
 8008004:	4649      	mov	r1, r9
 8008006:	2200      	movs	r2, #0
 8008008:	f7f8 fb16 	bl	8000638 <__aeabi_dmul>
 800800c:	4680      	mov	r8, r0
 800800e:	4689      	mov	r9, r1
 8008010:	e7c6      	b.n	8007fa0 <_dtoa_r+0x510>
 8008012:	4650      	mov	r0, sl
 8008014:	4659      	mov	r1, fp
 8008016:	f7f8 fb0f 	bl	8000638 <__aeabi_dmul>
 800801a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800801c:	9d01      	ldr	r5, [sp, #4]
 800801e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008020:	4682      	mov	sl, r0
 8008022:	468b      	mov	fp, r1
 8008024:	4649      	mov	r1, r9
 8008026:	4640      	mov	r0, r8
 8008028:	f7f8 fdb6 	bl	8000b98 <__aeabi_d2iz>
 800802c:	4606      	mov	r6, r0
 800802e:	f7f8 fa99 	bl	8000564 <__aeabi_i2d>
 8008032:	3630      	adds	r6, #48	; 0x30
 8008034:	4602      	mov	r2, r0
 8008036:	460b      	mov	r3, r1
 8008038:	4640      	mov	r0, r8
 800803a:	4649      	mov	r1, r9
 800803c:	f7f8 f944 	bl	80002c8 <__aeabi_dsub>
 8008040:	f805 6b01 	strb.w	r6, [r5], #1
 8008044:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008046:	429d      	cmp	r5, r3
 8008048:	4680      	mov	r8, r0
 800804a:	4689      	mov	r9, r1
 800804c:	f04f 0200 	mov.w	r2, #0
 8008050:	d124      	bne.n	800809c <_dtoa_r+0x60c>
 8008052:	4b1b      	ldr	r3, [pc, #108]	; (80080c0 <_dtoa_r+0x630>)
 8008054:	4650      	mov	r0, sl
 8008056:	4659      	mov	r1, fp
 8008058:	f7f8 f938 	bl	80002cc <__adddf3>
 800805c:	4602      	mov	r2, r0
 800805e:	460b      	mov	r3, r1
 8008060:	4640      	mov	r0, r8
 8008062:	4649      	mov	r1, r9
 8008064:	f7f8 fd78 	bl	8000b58 <__aeabi_dcmpgt>
 8008068:	2800      	cmp	r0, #0
 800806a:	d173      	bne.n	8008154 <_dtoa_r+0x6c4>
 800806c:	4652      	mov	r2, sl
 800806e:	465b      	mov	r3, fp
 8008070:	4913      	ldr	r1, [pc, #76]	; (80080c0 <_dtoa_r+0x630>)
 8008072:	2000      	movs	r0, #0
 8008074:	f7f8 f928 	bl	80002c8 <__aeabi_dsub>
 8008078:	4602      	mov	r2, r0
 800807a:	460b      	mov	r3, r1
 800807c:	4640      	mov	r0, r8
 800807e:	4649      	mov	r1, r9
 8008080:	f7f8 fd4c 	bl	8000b1c <__aeabi_dcmplt>
 8008084:	2800      	cmp	r0, #0
 8008086:	f43f af35 	beq.w	8007ef4 <_dtoa_r+0x464>
 800808a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800808c:	1e6b      	subs	r3, r5, #1
 800808e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008090:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008094:	2b30      	cmp	r3, #48	; 0x30
 8008096:	d0f8      	beq.n	800808a <_dtoa_r+0x5fa>
 8008098:	9700      	str	r7, [sp, #0]
 800809a:	e049      	b.n	8008130 <_dtoa_r+0x6a0>
 800809c:	4b05      	ldr	r3, [pc, #20]	; (80080b4 <_dtoa_r+0x624>)
 800809e:	f7f8 facb 	bl	8000638 <__aeabi_dmul>
 80080a2:	4680      	mov	r8, r0
 80080a4:	4689      	mov	r9, r1
 80080a6:	e7bd      	b.n	8008024 <_dtoa_r+0x594>
 80080a8:	08013280 	.word	0x08013280
 80080ac:	08013258 	.word	0x08013258
 80080b0:	3ff00000 	.word	0x3ff00000
 80080b4:	40240000 	.word	0x40240000
 80080b8:	401c0000 	.word	0x401c0000
 80080bc:	40140000 	.word	0x40140000
 80080c0:	3fe00000 	.word	0x3fe00000
 80080c4:	9d01      	ldr	r5, [sp, #4]
 80080c6:	4656      	mov	r6, sl
 80080c8:	465f      	mov	r7, fp
 80080ca:	4642      	mov	r2, r8
 80080cc:	464b      	mov	r3, r9
 80080ce:	4630      	mov	r0, r6
 80080d0:	4639      	mov	r1, r7
 80080d2:	f7f8 fbdb 	bl	800088c <__aeabi_ddiv>
 80080d6:	f7f8 fd5f 	bl	8000b98 <__aeabi_d2iz>
 80080da:	4682      	mov	sl, r0
 80080dc:	f7f8 fa42 	bl	8000564 <__aeabi_i2d>
 80080e0:	4642      	mov	r2, r8
 80080e2:	464b      	mov	r3, r9
 80080e4:	f7f8 faa8 	bl	8000638 <__aeabi_dmul>
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	4630      	mov	r0, r6
 80080ee:	4639      	mov	r1, r7
 80080f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80080f4:	f7f8 f8e8 	bl	80002c8 <__aeabi_dsub>
 80080f8:	f805 6b01 	strb.w	r6, [r5], #1
 80080fc:	9e01      	ldr	r6, [sp, #4]
 80080fe:	9f03      	ldr	r7, [sp, #12]
 8008100:	1bae      	subs	r6, r5, r6
 8008102:	42b7      	cmp	r7, r6
 8008104:	4602      	mov	r2, r0
 8008106:	460b      	mov	r3, r1
 8008108:	d135      	bne.n	8008176 <_dtoa_r+0x6e6>
 800810a:	f7f8 f8df 	bl	80002cc <__adddf3>
 800810e:	4642      	mov	r2, r8
 8008110:	464b      	mov	r3, r9
 8008112:	4606      	mov	r6, r0
 8008114:	460f      	mov	r7, r1
 8008116:	f7f8 fd1f 	bl	8000b58 <__aeabi_dcmpgt>
 800811a:	b9d0      	cbnz	r0, 8008152 <_dtoa_r+0x6c2>
 800811c:	4642      	mov	r2, r8
 800811e:	464b      	mov	r3, r9
 8008120:	4630      	mov	r0, r6
 8008122:	4639      	mov	r1, r7
 8008124:	f7f8 fcf0 	bl	8000b08 <__aeabi_dcmpeq>
 8008128:	b110      	cbz	r0, 8008130 <_dtoa_r+0x6a0>
 800812a:	f01a 0f01 	tst.w	sl, #1
 800812e:	d110      	bne.n	8008152 <_dtoa_r+0x6c2>
 8008130:	4620      	mov	r0, r4
 8008132:	ee18 1a10 	vmov	r1, s16
 8008136:	f001 f893 	bl	8009260 <_Bfree>
 800813a:	2300      	movs	r3, #0
 800813c:	9800      	ldr	r0, [sp, #0]
 800813e:	702b      	strb	r3, [r5, #0]
 8008140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008142:	3001      	adds	r0, #1
 8008144:	6018      	str	r0, [r3, #0]
 8008146:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008148:	2b00      	cmp	r3, #0
 800814a:	f43f acf1 	beq.w	8007b30 <_dtoa_r+0xa0>
 800814e:	601d      	str	r5, [r3, #0]
 8008150:	e4ee      	b.n	8007b30 <_dtoa_r+0xa0>
 8008152:	9f00      	ldr	r7, [sp, #0]
 8008154:	462b      	mov	r3, r5
 8008156:	461d      	mov	r5, r3
 8008158:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800815c:	2a39      	cmp	r2, #57	; 0x39
 800815e:	d106      	bne.n	800816e <_dtoa_r+0x6de>
 8008160:	9a01      	ldr	r2, [sp, #4]
 8008162:	429a      	cmp	r2, r3
 8008164:	d1f7      	bne.n	8008156 <_dtoa_r+0x6c6>
 8008166:	9901      	ldr	r1, [sp, #4]
 8008168:	2230      	movs	r2, #48	; 0x30
 800816a:	3701      	adds	r7, #1
 800816c:	700a      	strb	r2, [r1, #0]
 800816e:	781a      	ldrb	r2, [r3, #0]
 8008170:	3201      	adds	r2, #1
 8008172:	701a      	strb	r2, [r3, #0]
 8008174:	e790      	b.n	8008098 <_dtoa_r+0x608>
 8008176:	4ba6      	ldr	r3, [pc, #664]	; (8008410 <_dtoa_r+0x980>)
 8008178:	2200      	movs	r2, #0
 800817a:	f7f8 fa5d 	bl	8000638 <__aeabi_dmul>
 800817e:	2200      	movs	r2, #0
 8008180:	2300      	movs	r3, #0
 8008182:	4606      	mov	r6, r0
 8008184:	460f      	mov	r7, r1
 8008186:	f7f8 fcbf 	bl	8000b08 <__aeabi_dcmpeq>
 800818a:	2800      	cmp	r0, #0
 800818c:	d09d      	beq.n	80080ca <_dtoa_r+0x63a>
 800818e:	e7cf      	b.n	8008130 <_dtoa_r+0x6a0>
 8008190:	9a08      	ldr	r2, [sp, #32]
 8008192:	2a00      	cmp	r2, #0
 8008194:	f000 80d7 	beq.w	8008346 <_dtoa_r+0x8b6>
 8008198:	9a06      	ldr	r2, [sp, #24]
 800819a:	2a01      	cmp	r2, #1
 800819c:	f300 80ba 	bgt.w	8008314 <_dtoa_r+0x884>
 80081a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081a2:	2a00      	cmp	r2, #0
 80081a4:	f000 80b2 	beq.w	800830c <_dtoa_r+0x87c>
 80081a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80081ac:	9e07      	ldr	r6, [sp, #28]
 80081ae:	9d04      	ldr	r5, [sp, #16]
 80081b0:	9a04      	ldr	r2, [sp, #16]
 80081b2:	441a      	add	r2, r3
 80081b4:	9204      	str	r2, [sp, #16]
 80081b6:	9a05      	ldr	r2, [sp, #20]
 80081b8:	2101      	movs	r1, #1
 80081ba:	441a      	add	r2, r3
 80081bc:	4620      	mov	r0, r4
 80081be:	9205      	str	r2, [sp, #20]
 80081c0:	f001 f950 	bl	8009464 <__i2b>
 80081c4:	4607      	mov	r7, r0
 80081c6:	2d00      	cmp	r5, #0
 80081c8:	dd0c      	ble.n	80081e4 <_dtoa_r+0x754>
 80081ca:	9b05      	ldr	r3, [sp, #20]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	dd09      	ble.n	80081e4 <_dtoa_r+0x754>
 80081d0:	42ab      	cmp	r3, r5
 80081d2:	9a04      	ldr	r2, [sp, #16]
 80081d4:	bfa8      	it	ge
 80081d6:	462b      	movge	r3, r5
 80081d8:	1ad2      	subs	r2, r2, r3
 80081da:	9204      	str	r2, [sp, #16]
 80081dc:	9a05      	ldr	r2, [sp, #20]
 80081de:	1aed      	subs	r5, r5, r3
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	9305      	str	r3, [sp, #20]
 80081e4:	9b07      	ldr	r3, [sp, #28]
 80081e6:	b31b      	cbz	r3, 8008230 <_dtoa_r+0x7a0>
 80081e8:	9b08      	ldr	r3, [sp, #32]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f000 80af 	beq.w	800834e <_dtoa_r+0x8be>
 80081f0:	2e00      	cmp	r6, #0
 80081f2:	dd13      	ble.n	800821c <_dtoa_r+0x78c>
 80081f4:	4639      	mov	r1, r7
 80081f6:	4632      	mov	r2, r6
 80081f8:	4620      	mov	r0, r4
 80081fa:	f001 f9f3 	bl	80095e4 <__pow5mult>
 80081fe:	ee18 2a10 	vmov	r2, s16
 8008202:	4601      	mov	r1, r0
 8008204:	4607      	mov	r7, r0
 8008206:	4620      	mov	r0, r4
 8008208:	f001 f942 	bl	8009490 <__multiply>
 800820c:	ee18 1a10 	vmov	r1, s16
 8008210:	4680      	mov	r8, r0
 8008212:	4620      	mov	r0, r4
 8008214:	f001 f824 	bl	8009260 <_Bfree>
 8008218:	ee08 8a10 	vmov	s16, r8
 800821c:	9b07      	ldr	r3, [sp, #28]
 800821e:	1b9a      	subs	r2, r3, r6
 8008220:	d006      	beq.n	8008230 <_dtoa_r+0x7a0>
 8008222:	ee18 1a10 	vmov	r1, s16
 8008226:	4620      	mov	r0, r4
 8008228:	f001 f9dc 	bl	80095e4 <__pow5mult>
 800822c:	ee08 0a10 	vmov	s16, r0
 8008230:	2101      	movs	r1, #1
 8008232:	4620      	mov	r0, r4
 8008234:	f001 f916 	bl	8009464 <__i2b>
 8008238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800823a:	2b00      	cmp	r3, #0
 800823c:	4606      	mov	r6, r0
 800823e:	f340 8088 	ble.w	8008352 <_dtoa_r+0x8c2>
 8008242:	461a      	mov	r2, r3
 8008244:	4601      	mov	r1, r0
 8008246:	4620      	mov	r0, r4
 8008248:	f001 f9cc 	bl	80095e4 <__pow5mult>
 800824c:	9b06      	ldr	r3, [sp, #24]
 800824e:	2b01      	cmp	r3, #1
 8008250:	4606      	mov	r6, r0
 8008252:	f340 8081 	ble.w	8008358 <_dtoa_r+0x8c8>
 8008256:	f04f 0800 	mov.w	r8, #0
 800825a:	6933      	ldr	r3, [r6, #16]
 800825c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008260:	6918      	ldr	r0, [r3, #16]
 8008262:	f001 f8af 	bl	80093c4 <__hi0bits>
 8008266:	f1c0 0020 	rsb	r0, r0, #32
 800826a:	9b05      	ldr	r3, [sp, #20]
 800826c:	4418      	add	r0, r3
 800826e:	f010 001f 	ands.w	r0, r0, #31
 8008272:	f000 8092 	beq.w	800839a <_dtoa_r+0x90a>
 8008276:	f1c0 0320 	rsb	r3, r0, #32
 800827a:	2b04      	cmp	r3, #4
 800827c:	f340 808a 	ble.w	8008394 <_dtoa_r+0x904>
 8008280:	f1c0 001c 	rsb	r0, r0, #28
 8008284:	9b04      	ldr	r3, [sp, #16]
 8008286:	4403      	add	r3, r0
 8008288:	9304      	str	r3, [sp, #16]
 800828a:	9b05      	ldr	r3, [sp, #20]
 800828c:	4403      	add	r3, r0
 800828e:	4405      	add	r5, r0
 8008290:	9305      	str	r3, [sp, #20]
 8008292:	9b04      	ldr	r3, [sp, #16]
 8008294:	2b00      	cmp	r3, #0
 8008296:	dd07      	ble.n	80082a8 <_dtoa_r+0x818>
 8008298:	ee18 1a10 	vmov	r1, s16
 800829c:	461a      	mov	r2, r3
 800829e:	4620      	mov	r0, r4
 80082a0:	f001 f9fa 	bl	8009698 <__lshift>
 80082a4:	ee08 0a10 	vmov	s16, r0
 80082a8:	9b05      	ldr	r3, [sp, #20]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	dd05      	ble.n	80082ba <_dtoa_r+0x82a>
 80082ae:	4631      	mov	r1, r6
 80082b0:	461a      	mov	r2, r3
 80082b2:	4620      	mov	r0, r4
 80082b4:	f001 f9f0 	bl	8009698 <__lshift>
 80082b8:	4606      	mov	r6, r0
 80082ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d06e      	beq.n	800839e <_dtoa_r+0x90e>
 80082c0:	ee18 0a10 	vmov	r0, s16
 80082c4:	4631      	mov	r1, r6
 80082c6:	f001 fa57 	bl	8009778 <__mcmp>
 80082ca:	2800      	cmp	r0, #0
 80082cc:	da67      	bge.n	800839e <_dtoa_r+0x90e>
 80082ce:	9b00      	ldr	r3, [sp, #0]
 80082d0:	3b01      	subs	r3, #1
 80082d2:	ee18 1a10 	vmov	r1, s16
 80082d6:	9300      	str	r3, [sp, #0]
 80082d8:	220a      	movs	r2, #10
 80082da:	2300      	movs	r3, #0
 80082dc:	4620      	mov	r0, r4
 80082de:	f000 ffe1 	bl	80092a4 <__multadd>
 80082e2:	9b08      	ldr	r3, [sp, #32]
 80082e4:	ee08 0a10 	vmov	s16, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f000 81b1 	beq.w	8008650 <_dtoa_r+0xbc0>
 80082ee:	2300      	movs	r3, #0
 80082f0:	4639      	mov	r1, r7
 80082f2:	220a      	movs	r2, #10
 80082f4:	4620      	mov	r0, r4
 80082f6:	f000 ffd5 	bl	80092a4 <__multadd>
 80082fa:	9b02      	ldr	r3, [sp, #8]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	4607      	mov	r7, r0
 8008300:	f300 808e 	bgt.w	8008420 <_dtoa_r+0x990>
 8008304:	9b06      	ldr	r3, [sp, #24]
 8008306:	2b02      	cmp	r3, #2
 8008308:	dc51      	bgt.n	80083ae <_dtoa_r+0x91e>
 800830a:	e089      	b.n	8008420 <_dtoa_r+0x990>
 800830c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800830e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008312:	e74b      	b.n	80081ac <_dtoa_r+0x71c>
 8008314:	9b03      	ldr	r3, [sp, #12]
 8008316:	1e5e      	subs	r6, r3, #1
 8008318:	9b07      	ldr	r3, [sp, #28]
 800831a:	42b3      	cmp	r3, r6
 800831c:	bfbf      	itttt	lt
 800831e:	9b07      	ldrlt	r3, [sp, #28]
 8008320:	9607      	strlt	r6, [sp, #28]
 8008322:	1af2      	sublt	r2, r6, r3
 8008324:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008326:	bfb6      	itet	lt
 8008328:	189b      	addlt	r3, r3, r2
 800832a:	1b9e      	subge	r6, r3, r6
 800832c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800832e:	9b03      	ldr	r3, [sp, #12]
 8008330:	bfb8      	it	lt
 8008332:	2600      	movlt	r6, #0
 8008334:	2b00      	cmp	r3, #0
 8008336:	bfb7      	itett	lt
 8008338:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800833c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008340:	1a9d      	sublt	r5, r3, r2
 8008342:	2300      	movlt	r3, #0
 8008344:	e734      	b.n	80081b0 <_dtoa_r+0x720>
 8008346:	9e07      	ldr	r6, [sp, #28]
 8008348:	9d04      	ldr	r5, [sp, #16]
 800834a:	9f08      	ldr	r7, [sp, #32]
 800834c:	e73b      	b.n	80081c6 <_dtoa_r+0x736>
 800834e:	9a07      	ldr	r2, [sp, #28]
 8008350:	e767      	b.n	8008222 <_dtoa_r+0x792>
 8008352:	9b06      	ldr	r3, [sp, #24]
 8008354:	2b01      	cmp	r3, #1
 8008356:	dc18      	bgt.n	800838a <_dtoa_r+0x8fa>
 8008358:	f1ba 0f00 	cmp.w	sl, #0
 800835c:	d115      	bne.n	800838a <_dtoa_r+0x8fa>
 800835e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008362:	b993      	cbnz	r3, 800838a <_dtoa_r+0x8fa>
 8008364:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008368:	0d1b      	lsrs	r3, r3, #20
 800836a:	051b      	lsls	r3, r3, #20
 800836c:	b183      	cbz	r3, 8008390 <_dtoa_r+0x900>
 800836e:	9b04      	ldr	r3, [sp, #16]
 8008370:	3301      	adds	r3, #1
 8008372:	9304      	str	r3, [sp, #16]
 8008374:	9b05      	ldr	r3, [sp, #20]
 8008376:	3301      	adds	r3, #1
 8008378:	9305      	str	r3, [sp, #20]
 800837a:	f04f 0801 	mov.w	r8, #1
 800837e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008380:	2b00      	cmp	r3, #0
 8008382:	f47f af6a 	bne.w	800825a <_dtoa_r+0x7ca>
 8008386:	2001      	movs	r0, #1
 8008388:	e76f      	b.n	800826a <_dtoa_r+0x7da>
 800838a:	f04f 0800 	mov.w	r8, #0
 800838e:	e7f6      	b.n	800837e <_dtoa_r+0x8ee>
 8008390:	4698      	mov	r8, r3
 8008392:	e7f4      	b.n	800837e <_dtoa_r+0x8ee>
 8008394:	f43f af7d 	beq.w	8008292 <_dtoa_r+0x802>
 8008398:	4618      	mov	r0, r3
 800839a:	301c      	adds	r0, #28
 800839c:	e772      	b.n	8008284 <_dtoa_r+0x7f4>
 800839e:	9b03      	ldr	r3, [sp, #12]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	dc37      	bgt.n	8008414 <_dtoa_r+0x984>
 80083a4:	9b06      	ldr	r3, [sp, #24]
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	dd34      	ble.n	8008414 <_dtoa_r+0x984>
 80083aa:	9b03      	ldr	r3, [sp, #12]
 80083ac:	9302      	str	r3, [sp, #8]
 80083ae:	9b02      	ldr	r3, [sp, #8]
 80083b0:	b96b      	cbnz	r3, 80083ce <_dtoa_r+0x93e>
 80083b2:	4631      	mov	r1, r6
 80083b4:	2205      	movs	r2, #5
 80083b6:	4620      	mov	r0, r4
 80083b8:	f000 ff74 	bl	80092a4 <__multadd>
 80083bc:	4601      	mov	r1, r0
 80083be:	4606      	mov	r6, r0
 80083c0:	ee18 0a10 	vmov	r0, s16
 80083c4:	f001 f9d8 	bl	8009778 <__mcmp>
 80083c8:	2800      	cmp	r0, #0
 80083ca:	f73f adbb 	bgt.w	8007f44 <_dtoa_r+0x4b4>
 80083ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d0:	9d01      	ldr	r5, [sp, #4]
 80083d2:	43db      	mvns	r3, r3
 80083d4:	9300      	str	r3, [sp, #0]
 80083d6:	f04f 0800 	mov.w	r8, #0
 80083da:	4631      	mov	r1, r6
 80083dc:	4620      	mov	r0, r4
 80083de:	f000 ff3f 	bl	8009260 <_Bfree>
 80083e2:	2f00      	cmp	r7, #0
 80083e4:	f43f aea4 	beq.w	8008130 <_dtoa_r+0x6a0>
 80083e8:	f1b8 0f00 	cmp.w	r8, #0
 80083ec:	d005      	beq.n	80083fa <_dtoa_r+0x96a>
 80083ee:	45b8      	cmp	r8, r7
 80083f0:	d003      	beq.n	80083fa <_dtoa_r+0x96a>
 80083f2:	4641      	mov	r1, r8
 80083f4:	4620      	mov	r0, r4
 80083f6:	f000 ff33 	bl	8009260 <_Bfree>
 80083fa:	4639      	mov	r1, r7
 80083fc:	4620      	mov	r0, r4
 80083fe:	f000 ff2f 	bl	8009260 <_Bfree>
 8008402:	e695      	b.n	8008130 <_dtoa_r+0x6a0>
 8008404:	2600      	movs	r6, #0
 8008406:	4637      	mov	r7, r6
 8008408:	e7e1      	b.n	80083ce <_dtoa_r+0x93e>
 800840a:	9700      	str	r7, [sp, #0]
 800840c:	4637      	mov	r7, r6
 800840e:	e599      	b.n	8007f44 <_dtoa_r+0x4b4>
 8008410:	40240000 	.word	0x40240000
 8008414:	9b08      	ldr	r3, [sp, #32]
 8008416:	2b00      	cmp	r3, #0
 8008418:	f000 80ca 	beq.w	80085b0 <_dtoa_r+0xb20>
 800841c:	9b03      	ldr	r3, [sp, #12]
 800841e:	9302      	str	r3, [sp, #8]
 8008420:	2d00      	cmp	r5, #0
 8008422:	dd05      	ble.n	8008430 <_dtoa_r+0x9a0>
 8008424:	4639      	mov	r1, r7
 8008426:	462a      	mov	r2, r5
 8008428:	4620      	mov	r0, r4
 800842a:	f001 f935 	bl	8009698 <__lshift>
 800842e:	4607      	mov	r7, r0
 8008430:	f1b8 0f00 	cmp.w	r8, #0
 8008434:	d05b      	beq.n	80084ee <_dtoa_r+0xa5e>
 8008436:	6879      	ldr	r1, [r7, #4]
 8008438:	4620      	mov	r0, r4
 800843a:	f000 fed1 	bl	80091e0 <_Balloc>
 800843e:	4605      	mov	r5, r0
 8008440:	b928      	cbnz	r0, 800844e <_dtoa_r+0x9be>
 8008442:	4b87      	ldr	r3, [pc, #540]	; (8008660 <_dtoa_r+0xbd0>)
 8008444:	4602      	mov	r2, r0
 8008446:	f240 21ea 	movw	r1, #746	; 0x2ea
 800844a:	f7ff bb3b 	b.w	8007ac4 <_dtoa_r+0x34>
 800844e:	693a      	ldr	r2, [r7, #16]
 8008450:	3202      	adds	r2, #2
 8008452:	0092      	lsls	r2, r2, #2
 8008454:	f107 010c 	add.w	r1, r7, #12
 8008458:	300c      	adds	r0, #12
 800845a:	f000 feb3 	bl	80091c4 <memcpy>
 800845e:	2201      	movs	r2, #1
 8008460:	4629      	mov	r1, r5
 8008462:	4620      	mov	r0, r4
 8008464:	f001 f918 	bl	8009698 <__lshift>
 8008468:	9b01      	ldr	r3, [sp, #4]
 800846a:	f103 0901 	add.w	r9, r3, #1
 800846e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008472:	4413      	add	r3, r2
 8008474:	9305      	str	r3, [sp, #20]
 8008476:	f00a 0301 	and.w	r3, sl, #1
 800847a:	46b8      	mov	r8, r7
 800847c:	9304      	str	r3, [sp, #16]
 800847e:	4607      	mov	r7, r0
 8008480:	4631      	mov	r1, r6
 8008482:	ee18 0a10 	vmov	r0, s16
 8008486:	f7ff fa77 	bl	8007978 <quorem>
 800848a:	4641      	mov	r1, r8
 800848c:	9002      	str	r0, [sp, #8]
 800848e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008492:	ee18 0a10 	vmov	r0, s16
 8008496:	f001 f96f 	bl	8009778 <__mcmp>
 800849a:	463a      	mov	r2, r7
 800849c:	9003      	str	r0, [sp, #12]
 800849e:	4631      	mov	r1, r6
 80084a0:	4620      	mov	r0, r4
 80084a2:	f001 f985 	bl	80097b0 <__mdiff>
 80084a6:	68c2      	ldr	r2, [r0, #12]
 80084a8:	f109 3bff 	add.w	fp, r9, #4294967295
 80084ac:	4605      	mov	r5, r0
 80084ae:	bb02      	cbnz	r2, 80084f2 <_dtoa_r+0xa62>
 80084b0:	4601      	mov	r1, r0
 80084b2:	ee18 0a10 	vmov	r0, s16
 80084b6:	f001 f95f 	bl	8009778 <__mcmp>
 80084ba:	4602      	mov	r2, r0
 80084bc:	4629      	mov	r1, r5
 80084be:	4620      	mov	r0, r4
 80084c0:	9207      	str	r2, [sp, #28]
 80084c2:	f000 fecd 	bl	8009260 <_Bfree>
 80084c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80084ca:	ea43 0102 	orr.w	r1, r3, r2
 80084ce:	9b04      	ldr	r3, [sp, #16]
 80084d0:	430b      	orrs	r3, r1
 80084d2:	464d      	mov	r5, r9
 80084d4:	d10f      	bne.n	80084f6 <_dtoa_r+0xa66>
 80084d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80084da:	d02a      	beq.n	8008532 <_dtoa_r+0xaa2>
 80084dc:	9b03      	ldr	r3, [sp, #12]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	dd02      	ble.n	80084e8 <_dtoa_r+0xa58>
 80084e2:	9b02      	ldr	r3, [sp, #8]
 80084e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80084e8:	f88b a000 	strb.w	sl, [fp]
 80084ec:	e775      	b.n	80083da <_dtoa_r+0x94a>
 80084ee:	4638      	mov	r0, r7
 80084f0:	e7ba      	b.n	8008468 <_dtoa_r+0x9d8>
 80084f2:	2201      	movs	r2, #1
 80084f4:	e7e2      	b.n	80084bc <_dtoa_r+0xa2c>
 80084f6:	9b03      	ldr	r3, [sp, #12]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	db04      	blt.n	8008506 <_dtoa_r+0xa76>
 80084fc:	9906      	ldr	r1, [sp, #24]
 80084fe:	430b      	orrs	r3, r1
 8008500:	9904      	ldr	r1, [sp, #16]
 8008502:	430b      	orrs	r3, r1
 8008504:	d122      	bne.n	800854c <_dtoa_r+0xabc>
 8008506:	2a00      	cmp	r2, #0
 8008508:	ddee      	ble.n	80084e8 <_dtoa_r+0xa58>
 800850a:	ee18 1a10 	vmov	r1, s16
 800850e:	2201      	movs	r2, #1
 8008510:	4620      	mov	r0, r4
 8008512:	f001 f8c1 	bl	8009698 <__lshift>
 8008516:	4631      	mov	r1, r6
 8008518:	ee08 0a10 	vmov	s16, r0
 800851c:	f001 f92c 	bl	8009778 <__mcmp>
 8008520:	2800      	cmp	r0, #0
 8008522:	dc03      	bgt.n	800852c <_dtoa_r+0xa9c>
 8008524:	d1e0      	bne.n	80084e8 <_dtoa_r+0xa58>
 8008526:	f01a 0f01 	tst.w	sl, #1
 800852a:	d0dd      	beq.n	80084e8 <_dtoa_r+0xa58>
 800852c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008530:	d1d7      	bne.n	80084e2 <_dtoa_r+0xa52>
 8008532:	2339      	movs	r3, #57	; 0x39
 8008534:	f88b 3000 	strb.w	r3, [fp]
 8008538:	462b      	mov	r3, r5
 800853a:	461d      	mov	r5, r3
 800853c:	3b01      	subs	r3, #1
 800853e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008542:	2a39      	cmp	r2, #57	; 0x39
 8008544:	d071      	beq.n	800862a <_dtoa_r+0xb9a>
 8008546:	3201      	adds	r2, #1
 8008548:	701a      	strb	r2, [r3, #0]
 800854a:	e746      	b.n	80083da <_dtoa_r+0x94a>
 800854c:	2a00      	cmp	r2, #0
 800854e:	dd07      	ble.n	8008560 <_dtoa_r+0xad0>
 8008550:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008554:	d0ed      	beq.n	8008532 <_dtoa_r+0xaa2>
 8008556:	f10a 0301 	add.w	r3, sl, #1
 800855a:	f88b 3000 	strb.w	r3, [fp]
 800855e:	e73c      	b.n	80083da <_dtoa_r+0x94a>
 8008560:	9b05      	ldr	r3, [sp, #20]
 8008562:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008566:	4599      	cmp	r9, r3
 8008568:	d047      	beq.n	80085fa <_dtoa_r+0xb6a>
 800856a:	ee18 1a10 	vmov	r1, s16
 800856e:	2300      	movs	r3, #0
 8008570:	220a      	movs	r2, #10
 8008572:	4620      	mov	r0, r4
 8008574:	f000 fe96 	bl	80092a4 <__multadd>
 8008578:	45b8      	cmp	r8, r7
 800857a:	ee08 0a10 	vmov	s16, r0
 800857e:	f04f 0300 	mov.w	r3, #0
 8008582:	f04f 020a 	mov.w	r2, #10
 8008586:	4641      	mov	r1, r8
 8008588:	4620      	mov	r0, r4
 800858a:	d106      	bne.n	800859a <_dtoa_r+0xb0a>
 800858c:	f000 fe8a 	bl	80092a4 <__multadd>
 8008590:	4680      	mov	r8, r0
 8008592:	4607      	mov	r7, r0
 8008594:	f109 0901 	add.w	r9, r9, #1
 8008598:	e772      	b.n	8008480 <_dtoa_r+0x9f0>
 800859a:	f000 fe83 	bl	80092a4 <__multadd>
 800859e:	4639      	mov	r1, r7
 80085a0:	4680      	mov	r8, r0
 80085a2:	2300      	movs	r3, #0
 80085a4:	220a      	movs	r2, #10
 80085a6:	4620      	mov	r0, r4
 80085a8:	f000 fe7c 	bl	80092a4 <__multadd>
 80085ac:	4607      	mov	r7, r0
 80085ae:	e7f1      	b.n	8008594 <_dtoa_r+0xb04>
 80085b0:	9b03      	ldr	r3, [sp, #12]
 80085b2:	9302      	str	r3, [sp, #8]
 80085b4:	9d01      	ldr	r5, [sp, #4]
 80085b6:	ee18 0a10 	vmov	r0, s16
 80085ba:	4631      	mov	r1, r6
 80085bc:	f7ff f9dc 	bl	8007978 <quorem>
 80085c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80085c4:	9b01      	ldr	r3, [sp, #4]
 80085c6:	f805 ab01 	strb.w	sl, [r5], #1
 80085ca:	1aea      	subs	r2, r5, r3
 80085cc:	9b02      	ldr	r3, [sp, #8]
 80085ce:	4293      	cmp	r3, r2
 80085d0:	dd09      	ble.n	80085e6 <_dtoa_r+0xb56>
 80085d2:	ee18 1a10 	vmov	r1, s16
 80085d6:	2300      	movs	r3, #0
 80085d8:	220a      	movs	r2, #10
 80085da:	4620      	mov	r0, r4
 80085dc:	f000 fe62 	bl	80092a4 <__multadd>
 80085e0:	ee08 0a10 	vmov	s16, r0
 80085e4:	e7e7      	b.n	80085b6 <_dtoa_r+0xb26>
 80085e6:	9b02      	ldr	r3, [sp, #8]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	bfc8      	it	gt
 80085ec:	461d      	movgt	r5, r3
 80085ee:	9b01      	ldr	r3, [sp, #4]
 80085f0:	bfd8      	it	le
 80085f2:	2501      	movle	r5, #1
 80085f4:	441d      	add	r5, r3
 80085f6:	f04f 0800 	mov.w	r8, #0
 80085fa:	ee18 1a10 	vmov	r1, s16
 80085fe:	2201      	movs	r2, #1
 8008600:	4620      	mov	r0, r4
 8008602:	f001 f849 	bl	8009698 <__lshift>
 8008606:	4631      	mov	r1, r6
 8008608:	ee08 0a10 	vmov	s16, r0
 800860c:	f001 f8b4 	bl	8009778 <__mcmp>
 8008610:	2800      	cmp	r0, #0
 8008612:	dc91      	bgt.n	8008538 <_dtoa_r+0xaa8>
 8008614:	d102      	bne.n	800861c <_dtoa_r+0xb8c>
 8008616:	f01a 0f01 	tst.w	sl, #1
 800861a:	d18d      	bne.n	8008538 <_dtoa_r+0xaa8>
 800861c:	462b      	mov	r3, r5
 800861e:	461d      	mov	r5, r3
 8008620:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008624:	2a30      	cmp	r2, #48	; 0x30
 8008626:	d0fa      	beq.n	800861e <_dtoa_r+0xb8e>
 8008628:	e6d7      	b.n	80083da <_dtoa_r+0x94a>
 800862a:	9a01      	ldr	r2, [sp, #4]
 800862c:	429a      	cmp	r2, r3
 800862e:	d184      	bne.n	800853a <_dtoa_r+0xaaa>
 8008630:	9b00      	ldr	r3, [sp, #0]
 8008632:	3301      	adds	r3, #1
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	2331      	movs	r3, #49	; 0x31
 8008638:	7013      	strb	r3, [r2, #0]
 800863a:	e6ce      	b.n	80083da <_dtoa_r+0x94a>
 800863c:	4b09      	ldr	r3, [pc, #36]	; (8008664 <_dtoa_r+0xbd4>)
 800863e:	f7ff ba95 	b.w	8007b6c <_dtoa_r+0xdc>
 8008642:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008644:	2b00      	cmp	r3, #0
 8008646:	f47f aa6e 	bne.w	8007b26 <_dtoa_r+0x96>
 800864a:	4b07      	ldr	r3, [pc, #28]	; (8008668 <_dtoa_r+0xbd8>)
 800864c:	f7ff ba8e 	b.w	8007b6c <_dtoa_r+0xdc>
 8008650:	9b02      	ldr	r3, [sp, #8]
 8008652:	2b00      	cmp	r3, #0
 8008654:	dcae      	bgt.n	80085b4 <_dtoa_r+0xb24>
 8008656:	9b06      	ldr	r3, [sp, #24]
 8008658:	2b02      	cmp	r3, #2
 800865a:	f73f aea8 	bgt.w	80083ae <_dtoa_r+0x91e>
 800865e:	e7a9      	b.n	80085b4 <_dtoa_r+0xb24>
 8008660:	08013108 	.word	0x08013108
 8008664:	08012f0c 	.word	0x08012f0c
 8008668:	08013089 	.word	0x08013089

0800866c <__sflush_r>:
 800866c:	898a      	ldrh	r2, [r1, #12]
 800866e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008672:	4605      	mov	r5, r0
 8008674:	0710      	lsls	r0, r2, #28
 8008676:	460c      	mov	r4, r1
 8008678:	d458      	bmi.n	800872c <__sflush_r+0xc0>
 800867a:	684b      	ldr	r3, [r1, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	dc05      	bgt.n	800868c <__sflush_r+0x20>
 8008680:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008682:	2b00      	cmp	r3, #0
 8008684:	dc02      	bgt.n	800868c <__sflush_r+0x20>
 8008686:	2000      	movs	r0, #0
 8008688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800868c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800868e:	2e00      	cmp	r6, #0
 8008690:	d0f9      	beq.n	8008686 <__sflush_r+0x1a>
 8008692:	2300      	movs	r3, #0
 8008694:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008698:	682f      	ldr	r7, [r5, #0]
 800869a:	602b      	str	r3, [r5, #0]
 800869c:	d032      	beq.n	8008704 <__sflush_r+0x98>
 800869e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086a0:	89a3      	ldrh	r3, [r4, #12]
 80086a2:	075a      	lsls	r2, r3, #29
 80086a4:	d505      	bpl.n	80086b2 <__sflush_r+0x46>
 80086a6:	6863      	ldr	r3, [r4, #4]
 80086a8:	1ac0      	subs	r0, r0, r3
 80086aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086ac:	b10b      	cbz	r3, 80086b2 <__sflush_r+0x46>
 80086ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086b0:	1ac0      	subs	r0, r0, r3
 80086b2:	2300      	movs	r3, #0
 80086b4:	4602      	mov	r2, r0
 80086b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086b8:	6a21      	ldr	r1, [r4, #32]
 80086ba:	4628      	mov	r0, r5
 80086bc:	47b0      	blx	r6
 80086be:	1c43      	adds	r3, r0, #1
 80086c0:	89a3      	ldrh	r3, [r4, #12]
 80086c2:	d106      	bne.n	80086d2 <__sflush_r+0x66>
 80086c4:	6829      	ldr	r1, [r5, #0]
 80086c6:	291d      	cmp	r1, #29
 80086c8:	d82c      	bhi.n	8008724 <__sflush_r+0xb8>
 80086ca:	4a2a      	ldr	r2, [pc, #168]	; (8008774 <__sflush_r+0x108>)
 80086cc:	40ca      	lsrs	r2, r1
 80086ce:	07d6      	lsls	r6, r2, #31
 80086d0:	d528      	bpl.n	8008724 <__sflush_r+0xb8>
 80086d2:	2200      	movs	r2, #0
 80086d4:	6062      	str	r2, [r4, #4]
 80086d6:	04d9      	lsls	r1, r3, #19
 80086d8:	6922      	ldr	r2, [r4, #16]
 80086da:	6022      	str	r2, [r4, #0]
 80086dc:	d504      	bpl.n	80086e8 <__sflush_r+0x7c>
 80086de:	1c42      	adds	r2, r0, #1
 80086e0:	d101      	bne.n	80086e6 <__sflush_r+0x7a>
 80086e2:	682b      	ldr	r3, [r5, #0]
 80086e4:	b903      	cbnz	r3, 80086e8 <__sflush_r+0x7c>
 80086e6:	6560      	str	r0, [r4, #84]	; 0x54
 80086e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086ea:	602f      	str	r7, [r5, #0]
 80086ec:	2900      	cmp	r1, #0
 80086ee:	d0ca      	beq.n	8008686 <__sflush_r+0x1a>
 80086f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086f4:	4299      	cmp	r1, r3
 80086f6:	d002      	beq.n	80086fe <__sflush_r+0x92>
 80086f8:	4628      	mov	r0, r5
 80086fa:	f001 fa49 	bl	8009b90 <_free_r>
 80086fe:	2000      	movs	r0, #0
 8008700:	6360      	str	r0, [r4, #52]	; 0x34
 8008702:	e7c1      	b.n	8008688 <__sflush_r+0x1c>
 8008704:	6a21      	ldr	r1, [r4, #32]
 8008706:	2301      	movs	r3, #1
 8008708:	4628      	mov	r0, r5
 800870a:	47b0      	blx	r6
 800870c:	1c41      	adds	r1, r0, #1
 800870e:	d1c7      	bne.n	80086a0 <__sflush_r+0x34>
 8008710:	682b      	ldr	r3, [r5, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d0c4      	beq.n	80086a0 <__sflush_r+0x34>
 8008716:	2b1d      	cmp	r3, #29
 8008718:	d001      	beq.n	800871e <__sflush_r+0xb2>
 800871a:	2b16      	cmp	r3, #22
 800871c:	d101      	bne.n	8008722 <__sflush_r+0xb6>
 800871e:	602f      	str	r7, [r5, #0]
 8008720:	e7b1      	b.n	8008686 <__sflush_r+0x1a>
 8008722:	89a3      	ldrh	r3, [r4, #12]
 8008724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008728:	81a3      	strh	r3, [r4, #12]
 800872a:	e7ad      	b.n	8008688 <__sflush_r+0x1c>
 800872c:	690f      	ldr	r7, [r1, #16]
 800872e:	2f00      	cmp	r7, #0
 8008730:	d0a9      	beq.n	8008686 <__sflush_r+0x1a>
 8008732:	0793      	lsls	r3, r2, #30
 8008734:	680e      	ldr	r6, [r1, #0]
 8008736:	bf08      	it	eq
 8008738:	694b      	ldreq	r3, [r1, #20]
 800873a:	600f      	str	r7, [r1, #0]
 800873c:	bf18      	it	ne
 800873e:	2300      	movne	r3, #0
 8008740:	eba6 0807 	sub.w	r8, r6, r7
 8008744:	608b      	str	r3, [r1, #8]
 8008746:	f1b8 0f00 	cmp.w	r8, #0
 800874a:	dd9c      	ble.n	8008686 <__sflush_r+0x1a>
 800874c:	6a21      	ldr	r1, [r4, #32]
 800874e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008750:	4643      	mov	r3, r8
 8008752:	463a      	mov	r2, r7
 8008754:	4628      	mov	r0, r5
 8008756:	47b0      	blx	r6
 8008758:	2800      	cmp	r0, #0
 800875a:	dc06      	bgt.n	800876a <__sflush_r+0xfe>
 800875c:	89a3      	ldrh	r3, [r4, #12]
 800875e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008762:	81a3      	strh	r3, [r4, #12]
 8008764:	f04f 30ff 	mov.w	r0, #4294967295
 8008768:	e78e      	b.n	8008688 <__sflush_r+0x1c>
 800876a:	4407      	add	r7, r0
 800876c:	eba8 0800 	sub.w	r8, r8, r0
 8008770:	e7e9      	b.n	8008746 <__sflush_r+0xda>
 8008772:	bf00      	nop
 8008774:	20400001 	.word	0x20400001

08008778 <_fflush_r>:
 8008778:	b538      	push	{r3, r4, r5, lr}
 800877a:	690b      	ldr	r3, [r1, #16]
 800877c:	4605      	mov	r5, r0
 800877e:	460c      	mov	r4, r1
 8008780:	b913      	cbnz	r3, 8008788 <_fflush_r+0x10>
 8008782:	2500      	movs	r5, #0
 8008784:	4628      	mov	r0, r5
 8008786:	bd38      	pop	{r3, r4, r5, pc}
 8008788:	b118      	cbz	r0, 8008792 <_fflush_r+0x1a>
 800878a:	6983      	ldr	r3, [r0, #24]
 800878c:	b90b      	cbnz	r3, 8008792 <_fflush_r+0x1a>
 800878e:	f000 f887 	bl	80088a0 <__sinit>
 8008792:	4b14      	ldr	r3, [pc, #80]	; (80087e4 <_fflush_r+0x6c>)
 8008794:	429c      	cmp	r4, r3
 8008796:	d11b      	bne.n	80087d0 <_fflush_r+0x58>
 8008798:	686c      	ldr	r4, [r5, #4]
 800879a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d0ef      	beq.n	8008782 <_fflush_r+0xa>
 80087a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087a4:	07d0      	lsls	r0, r2, #31
 80087a6:	d404      	bmi.n	80087b2 <_fflush_r+0x3a>
 80087a8:	0599      	lsls	r1, r3, #22
 80087aa:	d402      	bmi.n	80087b2 <_fflush_r+0x3a>
 80087ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087ae:	f000 fc88 	bl	80090c2 <__retarget_lock_acquire_recursive>
 80087b2:	4628      	mov	r0, r5
 80087b4:	4621      	mov	r1, r4
 80087b6:	f7ff ff59 	bl	800866c <__sflush_r>
 80087ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087bc:	07da      	lsls	r2, r3, #31
 80087be:	4605      	mov	r5, r0
 80087c0:	d4e0      	bmi.n	8008784 <_fflush_r+0xc>
 80087c2:	89a3      	ldrh	r3, [r4, #12]
 80087c4:	059b      	lsls	r3, r3, #22
 80087c6:	d4dd      	bmi.n	8008784 <_fflush_r+0xc>
 80087c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087ca:	f000 fc7b 	bl	80090c4 <__retarget_lock_release_recursive>
 80087ce:	e7d9      	b.n	8008784 <_fflush_r+0xc>
 80087d0:	4b05      	ldr	r3, [pc, #20]	; (80087e8 <_fflush_r+0x70>)
 80087d2:	429c      	cmp	r4, r3
 80087d4:	d101      	bne.n	80087da <_fflush_r+0x62>
 80087d6:	68ac      	ldr	r4, [r5, #8]
 80087d8:	e7df      	b.n	800879a <_fflush_r+0x22>
 80087da:	4b04      	ldr	r3, [pc, #16]	; (80087ec <_fflush_r+0x74>)
 80087dc:	429c      	cmp	r4, r3
 80087de:	bf08      	it	eq
 80087e0:	68ec      	ldreq	r4, [r5, #12]
 80087e2:	e7da      	b.n	800879a <_fflush_r+0x22>
 80087e4:	0801313c 	.word	0x0801313c
 80087e8:	0801315c 	.word	0x0801315c
 80087ec:	0801311c 	.word	0x0801311c

080087f0 <std>:
 80087f0:	2300      	movs	r3, #0
 80087f2:	b510      	push	{r4, lr}
 80087f4:	4604      	mov	r4, r0
 80087f6:	e9c0 3300 	strd	r3, r3, [r0]
 80087fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087fe:	6083      	str	r3, [r0, #8]
 8008800:	8181      	strh	r1, [r0, #12]
 8008802:	6643      	str	r3, [r0, #100]	; 0x64
 8008804:	81c2      	strh	r2, [r0, #14]
 8008806:	6183      	str	r3, [r0, #24]
 8008808:	4619      	mov	r1, r3
 800880a:	2208      	movs	r2, #8
 800880c:	305c      	adds	r0, #92	; 0x5c
 800880e:	f7fd fa11 	bl	8005c34 <memset>
 8008812:	4b05      	ldr	r3, [pc, #20]	; (8008828 <std+0x38>)
 8008814:	6263      	str	r3, [r4, #36]	; 0x24
 8008816:	4b05      	ldr	r3, [pc, #20]	; (800882c <std+0x3c>)
 8008818:	62a3      	str	r3, [r4, #40]	; 0x28
 800881a:	4b05      	ldr	r3, [pc, #20]	; (8008830 <std+0x40>)
 800881c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800881e:	4b05      	ldr	r3, [pc, #20]	; (8008834 <std+0x44>)
 8008820:	6224      	str	r4, [r4, #32]
 8008822:	6323      	str	r3, [r4, #48]	; 0x30
 8008824:	bd10      	pop	{r4, pc}
 8008826:	bf00      	nop
 8008828:	0800a2f1 	.word	0x0800a2f1
 800882c:	0800a313 	.word	0x0800a313
 8008830:	0800a34b 	.word	0x0800a34b
 8008834:	0800a36f 	.word	0x0800a36f

08008838 <_cleanup_r>:
 8008838:	4901      	ldr	r1, [pc, #4]	; (8008840 <_cleanup_r+0x8>)
 800883a:	f000 b8af 	b.w	800899c <_fwalk_reent>
 800883e:	bf00      	nop
 8008840:	08008779 	.word	0x08008779

08008844 <__sfmoreglue>:
 8008844:	b570      	push	{r4, r5, r6, lr}
 8008846:	2268      	movs	r2, #104	; 0x68
 8008848:	1e4d      	subs	r5, r1, #1
 800884a:	4355      	muls	r5, r2
 800884c:	460e      	mov	r6, r1
 800884e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008852:	f001 fa09 	bl	8009c68 <_malloc_r>
 8008856:	4604      	mov	r4, r0
 8008858:	b140      	cbz	r0, 800886c <__sfmoreglue+0x28>
 800885a:	2100      	movs	r1, #0
 800885c:	e9c0 1600 	strd	r1, r6, [r0]
 8008860:	300c      	adds	r0, #12
 8008862:	60a0      	str	r0, [r4, #8]
 8008864:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008868:	f7fd f9e4 	bl	8005c34 <memset>
 800886c:	4620      	mov	r0, r4
 800886e:	bd70      	pop	{r4, r5, r6, pc}

08008870 <__sfp_lock_acquire>:
 8008870:	4801      	ldr	r0, [pc, #4]	; (8008878 <__sfp_lock_acquire+0x8>)
 8008872:	f000 bc26 	b.w	80090c2 <__retarget_lock_acquire_recursive>
 8008876:	bf00      	nop
 8008878:	200015cd 	.word	0x200015cd

0800887c <__sfp_lock_release>:
 800887c:	4801      	ldr	r0, [pc, #4]	; (8008884 <__sfp_lock_release+0x8>)
 800887e:	f000 bc21 	b.w	80090c4 <__retarget_lock_release_recursive>
 8008882:	bf00      	nop
 8008884:	200015cd 	.word	0x200015cd

08008888 <__sinit_lock_acquire>:
 8008888:	4801      	ldr	r0, [pc, #4]	; (8008890 <__sinit_lock_acquire+0x8>)
 800888a:	f000 bc1a 	b.w	80090c2 <__retarget_lock_acquire_recursive>
 800888e:	bf00      	nop
 8008890:	200015ce 	.word	0x200015ce

08008894 <__sinit_lock_release>:
 8008894:	4801      	ldr	r0, [pc, #4]	; (800889c <__sinit_lock_release+0x8>)
 8008896:	f000 bc15 	b.w	80090c4 <__retarget_lock_release_recursive>
 800889a:	bf00      	nop
 800889c:	200015ce 	.word	0x200015ce

080088a0 <__sinit>:
 80088a0:	b510      	push	{r4, lr}
 80088a2:	4604      	mov	r4, r0
 80088a4:	f7ff fff0 	bl	8008888 <__sinit_lock_acquire>
 80088a8:	69a3      	ldr	r3, [r4, #24]
 80088aa:	b11b      	cbz	r3, 80088b4 <__sinit+0x14>
 80088ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088b0:	f7ff bff0 	b.w	8008894 <__sinit_lock_release>
 80088b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80088b8:	6523      	str	r3, [r4, #80]	; 0x50
 80088ba:	4b13      	ldr	r3, [pc, #76]	; (8008908 <__sinit+0x68>)
 80088bc:	4a13      	ldr	r2, [pc, #76]	; (800890c <__sinit+0x6c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80088c2:	42a3      	cmp	r3, r4
 80088c4:	bf04      	itt	eq
 80088c6:	2301      	moveq	r3, #1
 80088c8:	61a3      	streq	r3, [r4, #24]
 80088ca:	4620      	mov	r0, r4
 80088cc:	f000 f820 	bl	8008910 <__sfp>
 80088d0:	6060      	str	r0, [r4, #4]
 80088d2:	4620      	mov	r0, r4
 80088d4:	f000 f81c 	bl	8008910 <__sfp>
 80088d8:	60a0      	str	r0, [r4, #8]
 80088da:	4620      	mov	r0, r4
 80088dc:	f000 f818 	bl	8008910 <__sfp>
 80088e0:	2200      	movs	r2, #0
 80088e2:	60e0      	str	r0, [r4, #12]
 80088e4:	2104      	movs	r1, #4
 80088e6:	6860      	ldr	r0, [r4, #4]
 80088e8:	f7ff ff82 	bl	80087f0 <std>
 80088ec:	68a0      	ldr	r0, [r4, #8]
 80088ee:	2201      	movs	r2, #1
 80088f0:	2109      	movs	r1, #9
 80088f2:	f7ff ff7d 	bl	80087f0 <std>
 80088f6:	68e0      	ldr	r0, [r4, #12]
 80088f8:	2202      	movs	r2, #2
 80088fa:	2112      	movs	r1, #18
 80088fc:	f7ff ff78 	bl	80087f0 <std>
 8008900:	2301      	movs	r3, #1
 8008902:	61a3      	str	r3, [r4, #24]
 8008904:	e7d2      	b.n	80088ac <__sinit+0xc>
 8008906:	bf00      	nop
 8008908:	08012ef8 	.word	0x08012ef8
 800890c:	08008839 	.word	0x08008839

08008910 <__sfp>:
 8008910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008912:	4607      	mov	r7, r0
 8008914:	f7ff ffac 	bl	8008870 <__sfp_lock_acquire>
 8008918:	4b1e      	ldr	r3, [pc, #120]	; (8008994 <__sfp+0x84>)
 800891a:	681e      	ldr	r6, [r3, #0]
 800891c:	69b3      	ldr	r3, [r6, #24]
 800891e:	b913      	cbnz	r3, 8008926 <__sfp+0x16>
 8008920:	4630      	mov	r0, r6
 8008922:	f7ff ffbd 	bl	80088a0 <__sinit>
 8008926:	3648      	adds	r6, #72	; 0x48
 8008928:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800892c:	3b01      	subs	r3, #1
 800892e:	d503      	bpl.n	8008938 <__sfp+0x28>
 8008930:	6833      	ldr	r3, [r6, #0]
 8008932:	b30b      	cbz	r3, 8008978 <__sfp+0x68>
 8008934:	6836      	ldr	r6, [r6, #0]
 8008936:	e7f7      	b.n	8008928 <__sfp+0x18>
 8008938:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800893c:	b9d5      	cbnz	r5, 8008974 <__sfp+0x64>
 800893e:	4b16      	ldr	r3, [pc, #88]	; (8008998 <__sfp+0x88>)
 8008940:	60e3      	str	r3, [r4, #12]
 8008942:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008946:	6665      	str	r5, [r4, #100]	; 0x64
 8008948:	f000 fbba 	bl	80090c0 <__retarget_lock_init_recursive>
 800894c:	f7ff ff96 	bl	800887c <__sfp_lock_release>
 8008950:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008954:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008958:	6025      	str	r5, [r4, #0]
 800895a:	61a5      	str	r5, [r4, #24]
 800895c:	2208      	movs	r2, #8
 800895e:	4629      	mov	r1, r5
 8008960:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008964:	f7fd f966 	bl	8005c34 <memset>
 8008968:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800896c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008970:	4620      	mov	r0, r4
 8008972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008974:	3468      	adds	r4, #104	; 0x68
 8008976:	e7d9      	b.n	800892c <__sfp+0x1c>
 8008978:	2104      	movs	r1, #4
 800897a:	4638      	mov	r0, r7
 800897c:	f7ff ff62 	bl	8008844 <__sfmoreglue>
 8008980:	4604      	mov	r4, r0
 8008982:	6030      	str	r0, [r6, #0]
 8008984:	2800      	cmp	r0, #0
 8008986:	d1d5      	bne.n	8008934 <__sfp+0x24>
 8008988:	f7ff ff78 	bl	800887c <__sfp_lock_release>
 800898c:	230c      	movs	r3, #12
 800898e:	603b      	str	r3, [r7, #0]
 8008990:	e7ee      	b.n	8008970 <__sfp+0x60>
 8008992:	bf00      	nop
 8008994:	08012ef8 	.word	0x08012ef8
 8008998:	ffff0001 	.word	0xffff0001

0800899c <_fwalk_reent>:
 800899c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089a0:	4606      	mov	r6, r0
 80089a2:	4688      	mov	r8, r1
 80089a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80089a8:	2700      	movs	r7, #0
 80089aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089ae:	f1b9 0901 	subs.w	r9, r9, #1
 80089b2:	d505      	bpl.n	80089c0 <_fwalk_reent+0x24>
 80089b4:	6824      	ldr	r4, [r4, #0]
 80089b6:	2c00      	cmp	r4, #0
 80089b8:	d1f7      	bne.n	80089aa <_fwalk_reent+0xe>
 80089ba:	4638      	mov	r0, r7
 80089bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089c0:	89ab      	ldrh	r3, [r5, #12]
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d907      	bls.n	80089d6 <_fwalk_reent+0x3a>
 80089c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089ca:	3301      	adds	r3, #1
 80089cc:	d003      	beq.n	80089d6 <_fwalk_reent+0x3a>
 80089ce:	4629      	mov	r1, r5
 80089d0:	4630      	mov	r0, r6
 80089d2:	47c0      	blx	r8
 80089d4:	4307      	orrs	r7, r0
 80089d6:	3568      	adds	r5, #104	; 0x68
 80089d8:	e7e9      	b.n	80089ae <_fwalk_reent+0x12>

080089da <rshift>:
 80089da:	6903      	ldr	r3, [r0, #16]
 80089dc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80089e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089e4:	ea4f 1261 	mov.w	r2, r1, asr #5
 80089e8:	f100 0414 	add.w	r4, r0, #20
 80089ec:	dd45      	ble.n	8008a7a <rshift+0xa0>
 80089ee:	f011 011f 	ands.w	r1, r1, #31
 80089f2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80089f6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80089fa:	d10c      	bne.n	8008a16 <rshift+0x3c>
 80089fc:	f100 0710 	add.w	r7, r0, #16
 8008a00:	4629      	mov	r1, r5
 8008a02:	42b1      	cmp	r1, r6
 8008a04:	d334      	bcc.n	8008a70 <rshift+0x96>
 8008a06:	1a9b      	subs	r3, r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	1eea      	subs	r2, r5, #3
 8008a0c:	4296      	cmp	r6, r2
 8008a0e:	bf38      	it	cc
 8008a10:	2300      	movcc	r3, #0
 8008a12:	4423      	add	r3, r4
 8008a14:	e015      	b.n	8008a42 <rshift+0x68>
 8008a16:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008a1a:	f1c1 0820 	rsb	r8, r1, #32
 8008a1e:	40cf      	lsrs	r7, r1
 8008a20:	f105 0e04 	add.w	lr, r5, #4
 8008a24:	46a1      	mov	r9, r4
 8008a26:	4576      	cmp	r6, lr
 8008a28:	46f4      	mov	ip, lr
 8008a2a:	d815      	bhi.n	8008a58 <rshift+0x7e>
 8008a2c:	1a9a      	subs	r2, r3, r2
 8008a2e:	0092      	lsls	r2, r2, #2
 8008a30:	3a04      	subs	r2, #4
 8008a32:	3501      	adds	r5, #1
 8008a34:	42ae      	cmp	r6, r5
 8008a36:	bf38      	it	cc
 8008a38:	2200      	movcc	r2, #0
 8008a3a:	18a3      	adds	r3, r4, r2
 8008a3c:	50a7      	str	r7, [r4, r2]
 8008a3e:	b107      	cbz	r7, 8008a42 <rshift+0x68>
 8008a40:	3304      	adds	r3, #4
 8008a42:	1b1a      	subs	r2, r3, r4
 8008a44:	42a3      	cmp	r3, r4
 8008a46:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008a4a:	bf08      	it	eq
 8008a4c:	2300      	moveq	r3, #0
 8008a4e:	6102      	str	r2, [r0, #16]
 8008a50:	bf08      	it	eq
 8008a52:	6143      	streq	r3, [r0, #20]
 8008a54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a58:	f8dc c000 	ldr.w	ip, [ip]
 8008a5c:	fa0c fc08 	lsl.w	ip, ip, r8
 8008a60:	ea4c 0707 	orr.w	r7, ip, r7
 8008a64:	f849 7b04 	str.w	r7, [r9], #4
 8008a68:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008a6c:	40cf      	lsrs	r7, r1
 8008a6e:	e7da      	b.n	8008a26 <rshift+0x4c>
 8008a70:	f851 cb04 	ldr.w	ip, [r1], #4
 8008a74:	f847 cf04 	str.w	ip, [r7, #4]!
 8008a78:	e7c3      	b.n	8008a02 <rshift+0x28>
 8008a7a:	4623      	mov	r3, r4
 8008a7c:	e7e1      	b.n	8008a42 <rshift+0x68>

08008a7e <__hexdig_fun>:
 8008a7e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008a82:	2b09      	cmp	r3, #9
 8008a84:	d802      	bhi.n	8008a8c <__hexdig_fun+0xe>
 8008a86:	3820      	subs	r0, #32
 8008a88:	b2c0      	uxtb	r0, r0
 8008a8a:	4770      	bx	lr
 8008a8c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008a90:	2b05      	cmp	r3, #5
 8008a92:	d801      	bhi.n	8008a98 <__hexdig_fun+0x1a>
 8008a94:	3847      	subs	r0, #71	; 0x47
 8008a96:	e7f7      	b.n	8008a88 <__hexdig_fun+0xa>
 8008a98:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008a9c:	2b05      	cmp	r3, #5
 8008a9e:	d801      	bhi.n	8008aa4 <__hexdig_fun+0x26>
 8008aa0:	3827      	subs	r0, #39	; 0x27
 8008aa2:	e7f1      	b.n	8008a88 <__hexdig_fun+0xa>
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	4770      	bx	lr

08008aa8 <__gethex>:
 8008aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aac:	ed2d 8b02 	vpush	{d8}
 8008ab0:	b089      	sub	sp, #36	; 0x24
 8008ab2:	ee08 0a10 	vmov	s16, r0
 8008ab6:	9304      	str	r3, [sp, #16]
 8008ab8:	4bb4      	ldr	r3, [pc, #720]	; (8008d8c <__gethex+0x2e4>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	9301      	str	r3, [sp, #4]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	468b      	mov	fp, r1
 8008ac2:	4690      	mov	r8, r2
 8008ac4:	f7f7 fba4 	bl	8000210 <strlen>
 8008ac8:	9b01      	ldr	r3, [sp, #4]
 8008aca:	f8db 2000 	ldr.w	r2, [fp]
 8008ace:	4403      	add	r3, r0
 8008ad0:	4682      	mov	sl, r0
 8008ad2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008ad6:	9305      	str	r3, [sp, #20]
 8008ad8:	1c93      	adds	r3, r2, #2
 8008ada:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008ade:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008ae2:	32fe      	adds	r2, #254	; 0xfe
 8008ae4:	18d1      	adds	r1, r2, r3
 8008ae6:	461f      	mov	r7, r3
 8008ae8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008aec:	9100      	str	r1, [sp, #0]
 8008aee:	2830      	cmp	r0, #48	; 0x30
 8008af0:	d0f8      	beq.n	8008ae4 <__gethex+0x3c>
 8008af2:	f7ff ffc4 	bl	8008a7e <__hexdig_fun>
 8008af6:	4604      	mov	r4, r0
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d13a      	bne.n	8008b72 <__gethex+0xca>
 8008afc:	9901      	ldr	r1, [sp, #4]
 8008afe:	4652      	mov	r2, sl
 8008b00:	4638      	mov	r0, r7
 8008b02:	f001 fc38 	bl	800a376 <strncmp>
 8008b06:	4605      	mov	r5, r0
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	d168      	bne.n	8008bde <__gethex+0x136>
 8008b0c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008b10:	eb07 060a 	add.w	r6, r7, sl
 8008b14:	f7ff ffb3 	bl	8008a7e <__hexdig_fun>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	d062      	beq.n	8008be2 <__gethex+0x13a>
 8008b1c:	4633      	mov	r3, r6
 8008b1e:	7818      	ldrb	r0, [r3, #0]
 8008b20:	2830      	cmp	r0, #48	; 0x30
 8008b22:	461f      	mov	r7, r3
 8008b24:	f103 0301 	add.w	r3, r3, #1
 8008b28:	d0f9      	beq.n	8008b1e <__gethex+0x76>
 8008b2a:	f7ff ffa8 	bl	8008a7e <__hexdig_fun>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	fab0 f480 	clz	r4, r0
 8008b34:	0964      	lsrs	r4, r4, #5
 8008b36:	4635      	mov	r5, r6
 8008b38:	9300      	str	r3, [sp, #0]
 8008b3a:	463a      	mov	r2, r7
 8008b3c:	4616      	mov	r6, r2
 8008b3e:	3201      	adds	r2, #1
 8008b40:	7830      	ldrb	r0, [r6, #0]
 8008b42:	f7ff ff9c 	bl	8008a7e <__hexdig_fun>
 8008b46:	2800      	cmp	r0, #0
 8008b48:	d1f8      	bne.n	8008b3c <__gethex+0x94>
 8008b4a:	9901      	ldr	r1, [sp, #4]
 8008b4c:	4652      	mov	r2, sl
 8008b4e:	4630      	mov	r0, r6
 8008b50:	f001 fc11 	bl	800a376 <strncmp>
 8008b54:	b980      	cbnz	r0, 8008b78 <__gethex+0xd0>
 8008b56:	b94d      	cbnz	r5, 8008b6c <__gethex+0xc4>
 8008b58:	eb06 050a 	add.w	r5, r6, sl
 8008b5c:	462a      	mov	r2, r5
 8008b5e:	4616      	mov	r6, r2
 8008b60:	3201      	adds	r2, #1
 8008b62:	7830      	ldrb	r0, [r6, #0]
 8008b64:	f7ff ff8b 	bl	8008a7e <__hexdig_fun>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	d1f8      	bne.n	8008b5e <__gethex+0xb6>
 8008b6c:	1bad      	subs	r5, r5, r6
 8008b6e:	00ad      	lsls	r5, r5, #2
 8008b70:	e004      	b.n	8008b7c <__gethex+0xd4>
 8008b72:	2400      	movs	r4, #0
 8008b74:	4625      	mov	r5, r4
 8008b76:	e7e0      	b.n	8008b3a <__gethex+0x92>
 8008b78:	2d00      	cmp	r5, #0
 8008b7a:	d1f7      	bne.n	8008b6c <__gethex+0xc4>
 8008b7c:	7833      	ldrb	r3, [r6, #0]
 8008b7e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008b82:	2b50      	cmp	r3, #80	; 0x50
 8008b84:	d13b      	bne.n	8008bfe <__gethex+0x156>
 8008b86:	7873      	ldrb	r3, [r6, #1]
 8008b88:	2b2b      	cmp	r3, #43	; 0x2b
 8008b8a:	d02c      	beq.n	8008be6 <__gethex+0x13e>
 8008b8c:	2b2d      	cmp	r3, #45	; 0x2d
 8008b8e:	d02e      	beq.n	8008bee <__gethex+0x146>
 8008b90:	1c71      	adds	r1, r6, #1
 8008b92:	f04f 0900 	mov.w	r9, #0
 8008b96:	7808      	ldrb	r0, [r1, #0]
 8008b98:	f7ff ff71 	bl	8008a7e <__hexdig_fun>
 8008b9c:	1e43      	subs	r3, r0, #1
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b18      	cmp	r3, #24
 8008ba2:	d82c      	bhi.n	8008bfe <__gethex+0x156>
 8008ba4:	f1a0 0210 	sub.w	r2, r0, #16
 8008ba8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008bac:	f7ff ff67 	bl	8008a7e <__hexdig_fun>
 8008bb0:	1e43      	subs	r3, r0, #1
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	2b18      	cmp	r3, #24
 8008bb6:	d91d      	bls.n	8008bf4 <__gethex+0x14c>
 8008bb8:	f1b9 0f00 	cmp.w	r9, #0
 8008bbc:	d000      	beq.n	8008bc0 <__gethex+0x118>
 8008bbe:	4252      	negs	r2, r2
 8008bc0:	4415      	add	r5, r2
 8008bc2:	f8cb 1000 	str.w	r1, [fp]
 8008bc6:	b1e4      	cbz	r4, 8008c02 <__gethex+0x15a>
 8008bc8:	9b00      	ldr	r3, [sp, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	bf14      	ite	ne
 8008bce:	2700      	movne	r7, #0
 8008bd0:	2706      	moveq	r7, #6
 8008bd2:	4638      	mov	r0, r7
 8008bd4:	b009      	add	sp, #36	; 0x24
 8008bd6:	ecbd 8b02 	vpop	{d8}
 8008bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bde:	463e      	mov	r6, r7
 8008be0:	4625      	mov	r5, r4
 8008be2:	2401      	movs	r4, #1
 8008be4:	e7ca      	b.n	8008b7c <__gethex+0xd4>
 8008be6:	f04f 0900 	mov.w	r9, #0
 8008bea:	1cb1      	adds	r1, r6, #2
 8008bec:	e7d3      	b.n	8008b96 <__gethex+0xee>
 8008bee:	f04f 0901 	mov.w	r9, #1
 8008bf2:	e7fa      	b.n	8008bea <__gethex+0x142>
 8008bf4:	230a      	movs	r3, #10
 8008bf6:	fb03 0202 	mla	r2, r3, r2, r0
 8008bfa:	3a10      	subs	r2, #16
 8008bfc:	e7d4      	b.n	8008ba8 <__gethex+0x100>
 8008bfe:	4631      	mov	r1, r6
 8008c00:	e7df      	b.n	8008bc2 <__gethex+0x11a>
 8008c02:	1bf3      	subs	r3, r6, r7
 8008c04:	3b01      	subs	r3, #1
 8008c06:	4621      	mov	r1, r4
 8008c08:	2b07      	cmp	r3, #7
 8008c0a:	dc0b      	bgt.n	8008c24 <__gethex+0x17c>
 8008c0c:	ee18 0a10 	vmov	r0, s16
 8008c10:	f000 fae6 	bl	80091e0 <_Balloc>
 8008c14:	4604      	mov	r4, r0
 8008c16:	b940      	cbnz	r0, 8008c2a <__gethex+0x182>
 8008c18:	4b5d      	ldr	r3, [pc, #372]	; (8008d90 <__gethex+0x2e8>)
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	21de      	movs	r1, #222	; 0xde
 8008c1e:	485d      	ldr	r0, [pc, #372]	; (8008d94 <__gethex+0x2ec>)
 8008c20:	f001 fbdc 	bl	800a3dc <__assert_func>
 8008c24:	3101      	adds	r1, #1
 8008c26:	105b      	asrs	r3, r3, #1
 8008c28:	e7ee      	b.n	8008c08 <__gethex+0x160>
 8008c2a:	f100 0914 	add.w	r9, r0, #20
 8008c2e:	f04f 0b00 	mov.w	fp, #0
 8008c32:	f1ca 0301 	rsb	r3, sl, #1
 8008c36:	f8cd 9008 	str.w	r9, [sp, #8]
 8008c3a:	f8cd b000 	str.w	fp, [sp]
 8008c3e:	9306      	str	r3, [sp, #24]
 8008c40:	42b7      	cmp	r7, r6
 8008c42:	d340      	bcc.n	8008cc6 <__gethex+0x21e>
 8008c44:	9802      	ldr	r0, [sp, #8]
 8008c46:	9b00      	ldr	r3, [sp, #0]
 8008c48:	f840 3b04 	str.w	r3, [r0], #4
 8008c4c:	eba0 0009 	sub.w	r0, r0, r9
 8008c50:	1080      	asrs	r0, r0, #2
 8008c52:	0146      	lsls	r6, r0, #5
 8008c54:	6120      	str	r0, [r4, #16]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f000 fbb4 	bl	80093c4 <__hi0bits>
 8008c5c:	1a30      	subs	r0, r6, r0
 8008c5e:	f8d8 6000 	ldr.w	r6, [r8]
 8008c62:	42b0      	cmp	r0, r6
 8008c64:	dd63      	ble.n	8008d2e <__gethex+0x286>
 8008c66:	1b87      	subs	r7, r0, r6
 8008c68:	4639      	mov	r1, r7
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f000 ff58 	bl	8009b20 <__any_on>
 8008c70:	4682      	mov	sl, r0
 8008c72:	b1a8      	cbz	r0, 8008ca0 <__gethex+0x1f8>
 8008c74:	1e7b      	subs	r3, r7, #1
 8008c76:	1159      	asrs	r1, r3, #5
 8008c78:	f003 021f 	and.w	r2, r3, #31
 8008c7c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008c80:	f04f 0a01 	mov.w	sl, #1
 8008c84:	fa0a f202 	lsl.w	r2, sl, r2
 8008c88:	420a      	tst	r2, r1
 8008c8a:	d009      	beq.n	8008ca0 <__gethex+0x1f8>
 8008c8c:	4553      	cmp	r3, sl
 8008c8e:	dd05      	ble.n	8008c9c <__gethex+0x1f4>
 8008c90:	1eb9      	subs	r1, r7, #2
 8008c92:	4620      	mov	r0, r4
 8008c94:	f000 ff44 	bl	8009b20 <__any_on>
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	d145      	bne.n	8008d28 <__gethex+0x280>
 8008c9c:	f04f 0a02 	mov.w	sl, #2
 8008ca0:	4639      	mov	r1, r7
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	f7ff fe99 	bl	80089da <rshift>
 8008ca8:	443d      	add	r5, r7
 8008caa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008cae:	42ab      	cmp	r3, r5
 8008cb0:	da4c      	bge.n	8008d4c <__gethex+0x2a4>
 8008cb2:	ee18 0a10 	vmov	r0, s16
 8008cb6:	4621      	mov	r1, r4
 8008cb8:	f000 fad2 	bl	8009260 <_Bfree>
 8008cbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	6013      	str	r3, [r2, #0]
 8008cc2:	27a3      	movs	r7, #163	; 0xa3
 8008cc4:	e785      	b.n	8008bd2 <__gethex+0x12a>
 8008cc6:	1e73      	subs	r3, r6, #1
 8008cc8:	9a05      	ldr	r2, [sp, #20]
 8008cca:	9303      	str	r3, [sp, #12]
 8008ccc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d019      	beq.n	8008d08 <__gethex+0x260>
 8008cd4:	f1bb 0f20 	cmp.w	fp, #32
 8008cd8:	d107      	bne.n	8008cea <__gethex+0x242>
 8008cda:	9b02      	ldr	r3, [sp, #8]
 8008cdc:	9a00      	ldr	r2, [sp, #0]
 8008cde:	f843 2b04 	str.w	r2, [r3], #4
 8008ce2:	9302      	str	r3, [sp, #8]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	469b      	mov	fp, r3
 8008cea:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008cee:	f7ff fec6 	bl	8008a7e <__hexdig_fun>
 8008cf2:	9b00      	ldr	r3, [sp, #0]
 8008cf4:	f000 000f 	and.w	r0, r0, #15
 8008cf8:	fa00 f00b 	lsl.w	r0, r0, fp
 8008cfc:	4303      	orrs	r3, r0
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	f10b 0b04 	add.w	fp, fp, #4
 8008d04:	9b03      	ldr	r3, [sp, #12]
 8008d06:	e00d      	b.n	8008d24 <__gethex+0x27c>
 8008d08:	9b03      	ldr	r3, [sp, #12]
 8008d0a:	9a06      	ldr	r2, [sp, #24]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	42bb      	cmp	r3, r7
 8008d10:	d3e0      	bcc.n	8008cd4 <__gethex+0x22c>
 8008d12:	4618      	mov	r0, r3
 8008d14:	9901      	ldr	r1, [sp, #4]
 8008d16:	9307      	str	r3, [sp, #28]
 8008d18:	4652      	mov	r2, sl
 8008d1a:	f001 fb2c 	bl	800a376 <strncmp>
 8008d1e:	9b07      	ldr	r3, [sp, #28]
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d1d7      	bne.n	8008cd4 <__gethex+0x22c>
 8008d24:	461e      	mov	r6, r3
 8008d26:	e78b      	b.n	8008c40 <__gethex+0x198>
 8008d28:	f04f 0a03 	mov.w	sl, #3
 8008d2c:	e7b8      	b.n	8008ca0 <__gethex+0x1f8>
 8008d2e:	da0a      	bge.n	8008d46 <__gethex+0x29e>
 8008d30:	1a37      	subs	r7, r6, r0
 8008d32:	4621      	mov	r1, r4
 8008d34:	ee18 0a10 	vmov	r0, s16
 8008d38:	463a      	mov	r2, r7
 8008d3a:	f000 fcad 	bl	8009698 <__lshift>
 8008d3e:	1bed      	subs	r5, r5, r7
 8008d40:	4604      	mov	r4, r0
 8008d42:	f100 0914 	add.w	r9, r0, #20
 8008d46:	f04f 0a00 	mov.w	sl, #0
 8008d4a:	e7ae      	b.n	8008caa <__gethex+0x202>
 8008d4c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008d50:	42a8      	cmp	r0, r5
 8008d52:	dd72      	ble.n	8008e3a <__gethex+0x392>
 8008d54:	1b45      	subs	r5, r0, r5
 8008d56:	42ae      	cmp	r6, r5
 8008d58:	dc36      	bgt.n	8008dc8 <__gethex+0x320>
 8008d5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d02a      	beq.n	8008db8 <__gethex+0x310>
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d02c      	beq.n	8008dc0 <__gethex+0x318>
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d11c      	bne.n	8008da4 <__gethex+0x2fc>
 8008d6a:	42ae      	cmp	r6, r5
 8008d6c:	d11a      	bne.n	8008da4 <__gethex+0x2fc>
 8008d6e:	2e01      	cmp	r6, #1
 8008d70:	d112      	bne.n	8008d98 <__gethex+0x2f0>
 8008d72:	9a04      	ldr	r2, [sp, #16]
 8008d74:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008d78:	6013      	str	r3, [r2, #0]
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	6123      	str	r3, [r4, #16]
 8008d7e:	f8c9 3000 	str.w	r3, [r9]
 8008d82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d84:	2762      	movs	r7, #98	; 0x62
 8008d86:	601c      	str	r4, [r3, #0]
 8008d88:	e723      	b.n	8008bd2 <__gethex+0x12a>
 8008d8a:	bf00      	nop
 8008d8c:	080131e4 	.word	0x080131e4
 8008d90:	08013108 	.word	0x08013108
 8008d94:	0801317c 	.word	0x0801317c
 8008d98:	1e71      	subs	r1, r6, #1
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f000 fec0 	bl	8009b20 <__any_on>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d1e6      	bne.n	8008d72 <__gethex+0x2ca>
 8008da4:	ee18 0a10 	vmov	r0, s16
 8008da8:	4621      	mov	r1, r4
 8008daa:	f000 fa59 	bl	8009260 <_Bfree>
 8008dae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008db0:	2300      	movs	r3, #0
 8008db2:	6013      	str	r3, [r2, #0]
 8008db4:	2750      	movs	r7, #80	; 0x50
 8008db6:	e70c      	b.n	8008bd2 <__gethex+0x12a>
 8008db8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1f2      	bne.n	8008da4 <__gethex+0x2fc>
 8008dbe:	e7d8      	b.n	8008d72 <__gethex+0x2ca>
 8008dc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1d5      	bne.n	8008d72 <__gethex+0x2ca>
 8008dc6:	e7ed      	b.n	8008da4 <__gethex+0x2fc>
 8008dc8:	1e6f      	subs	r7, r5, #1
 8008dca:	f1ba 0f00 	cmp.w	sl, #0
 8008dce:	d131      	bne.n	8008e34 <__gethex+0x38c>
 8008dd0:	b127      	cbz	r7, 8008ddc <__gethex+0x334>
 8008dd2:	4639      	mov	r1, r7
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f000 fea3 	bl	8009b20 <__any_on>
 8008dda:	4682      	mov	sl, r0
 8008ddc:	117b      	asrs	r3, r7, #5
 8008dde:	2101      	movs	r1, #1
 8008de0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008de4:	f007 071f 	and.w	r7, r7, #31
 8008de8:	fa01 f707 	lsl.w	r7, r1, r7
 8008dec:	421f      	tst	r7, r3
 8008dee:	4629      	mov	r1, r5
 8008df0:	4620      	mov	r0, r4
 8008df2:	bf18      	it	ne
 8008df4:	f04a 0a02 	orrne.w	sl, sl, #2
 8008df8:	1b76      	subs	r6, r6, r5
 8008dfa:	f7ff fdee 	bl	80089da <rshift>
 8008dfe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008e02:	2702      	movs	r7, #2
 8008e04:	f1ba 0f00 	cmp.w	sl, #0
 8008e08:	d048      	beq.n	8008e9c <__gethex+0x3f4>
 8008e0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d015      	beq.n	8008e3e <__gethex+0x396>
 8008e12:	2b03      	cmp	r3, #3
 8008e14:	d017      	beq.n	8008e46 <__gethex+0x39e>
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d109      	bne.n	8008e2e <__gethex+0x386>
 8008e1a:	f01a 0f02 	tst.w	sl, #2
 8008e1e:	d006      	beq.n	8008e2e <__gethex+0x386>
 8008e20:	f8d9 0000 	ldr.w	r0, [r9]
 8008e24:	ea4a 0a00 	orr.w	sl, sl, r0
 8008e28:	f01a 0f01 	tst.w	sl, #1
 8008e2c:	d10e      	bne.n	8008e4c <__gethex+0x3a4>
 8008e2e:	f047 0710 	orr.w	r7, r7, #16
 8008e32:	e033      	b.n	8008e9c <__gethex+0x3f4>
 8008e34:	f04f 0a01 	mov.w	sl, #1
 8008e38:	e7d0      	b.n	8008ddc <__gethex+0x334>
 8008e3a:	2701      	movs	r7, #1
 8008e3c:	e7e2      	b.n	8008e04 <__gethex+0x35c>
 8008e3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e40:	f1c3 0301 	rsb	r3, r3, #1
 8008e44:	9315      	str	r3, [sp, #84]	; 0x54
 8008e46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d0f0      	beq.n	8008e2e <__gethex+0x386>
 8008e4c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008e50:	f104 0314 	add.w	r3, r4, #20
 8008e54:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008e58:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008e5c:	f04f 0c00 	mov.w	ip, #0
 8008e60:	4618      	mov	r0, r3
 8008e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e66:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008e6a:	d01c      	beq.n	8008ea6 <__gethex+0x3fe>
 8008e6c:	3201      	adds	r2, #1
 8008e6e:	6002      	str	r2, [r0, #0]
 8008e70:	2f02      	cmp	r7, #2
 8008e72:	f104 0314 	add.w	r3, r4, #20
 8008e76:	d13f      	bne.n	8008ef8 <__gethex+0x450>
 8008e78:	f8d8 2000 	ldr.w	r2, [r8]
 8008e7c:	3a01      	subs	r2, #1
 8008e7e:	42b2      	cmp	r2, r6
 8008e80:	d10a      	bne.n	8008e98 <__gethex+0x3f0>
 8008e82:	1171      	asrs	r1, r6, #5
 8008e84:	2201      	movs	r2, #1
 8008e86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e8a:	f006 061f 	and.w	r6, r6, #31
 8008e8e:	fa02 f606 	lsl.w	r6, r2, r6
 8008e92:	421e      	tst	r6, r3
 8008e94:	bf18      	it	ne
 8008e96:	4617      	movne	r7, r2
 8008e98:	f047 0720 	orr.w	r7, r7, #32
 8008e9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e9e:	601c      	str	r4, [r3, #0]
 8008ea0:	9b04      	ldr	r3, [sp, #16]
 8008ea2:	601d      	str	r5, [r3, #0]
 8008ea4:	e695      	b.n	8008bd2 <__gethex+0x12a>
 8008ea6:	4299      	cmp	r1, r3
 8008ea8:	f843 cc04 	str.w	ip, [r3, #-4]
 8008eac:	d8d8      	bhi.n	8008e60 <__gethex+0x3b8>
 8008eae:	68a3      	ldr	r3, [r4, #8]
 8008eb0:	459b      	cmp	fp, r3
 8008eb2:	db19      	blt.n	8008ee8 <__gethex+0x440>
 8008eb4:	6861      	ldr	r1, [r4, #4]
 8008eb6:	ee18 0a10 	vmov	r0, s16
 8008eba:	3101      	adds	r1, #1
 8008ebc:	f000 f990 	bl	80091e0 <_Balloc>
 8008ec0:	4681      	mov	r9, r0
 8008ec2:	b918      	cbnz	r0, 8008ecc <__gethex+0x424>
 8008ec4:	4b1a      	ldr	r3, [pc, #104]	; (8008f30 <__gethex+0x488>)
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	2184      	movs	r1, #132	; 0x84
 8008eca:	e6a8      	b.n	8008c1e <__gethex+0x176>
 8008ecc:	6922      	ldr	r2, [r4, #16]
 8008ece:	3202      	adds	r2, #2
 8008ed0:	f104 010c 	add.w	r1, r4, #12
 8008ed4:	0092      	lsls	r2, r2, #2
 8008ed6:	300c      	adds	r0, #12
 8008ed8:	f000 f974 	bl	80091c4 <memcpy>
 8008edc:	4621      	mov	r1, r4
 8008ede:	ee18 0a10 	vmov	r0, s16
 8008ee2:	f000 f9bd 	bl	8009260 <_Bfree>
 8008ee6:	464c      	mov	r4, r9
 8008ee8:	6923      	ldr	r3, [r4, #16]
 8008eea:	1c5a      	adds	r2, r3, #1
 8008eec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ef0:	6122      	str	r2, [r4, #16]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	615a      	str	r2, [r3, #20]
 8008ef6:	e7bb      	b.n	8008e70 <__gethex+0x3c8>
 8008ef8:	6922      	ldr	r2, [r4, #16]
 8008efa:	455a      	cmp	r2, fp
 8008efc:	dd0b      	ble.n	8008f16 <__gethex+0x46e>
 8008efe:	2101      	movs	r1, #1
 8008f00:	4620      	mov	r0, r4
 8008f02:	f7ff fd6a 	bl	80089da <rshift>
 8008f06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f0a:	3501      	adds	r5, #1
 8008f0c:	42ab      	cmp	r3, r5
 8008f0e:	f6ff aed0 	blt.w	8008cb2 <__gethex+0x20a>
 8008f12:	2701      	movs	r7, #1
 8008f14:	e7c0      	b.n	8008e98 <__gethex+0x3f0>
 8008f16:	f016 061f 	ands.w	r6, r6, #31
 8008f1a:	d0fa      	beq.n	8008f12 <__gethex+0x46a>
 8008f1c:	4453      	add	r3, sl
 8008f1e:	f1c6 0620 	rsb	r6, r6, #32
 8008f22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008f26:	f000 fa4d 	bl	80093c4 <__hi0bits>
 8008f2a:	42b0      	cmp	r0, r6
 8008f2c:	dbe7      	blt.n	8008efe <__gethex+0x456>
 8008f2e:	e7f0      	b.n	8008f12 <__gethex+0x46a>
 8008f30:	08013108 	.word	0x08013108

08008f34 <L_shift>:
 8008f34:	f1c2 0208 	rsb	r2, r2, #8
 8008f38:	0092      	lsls	r2, r2, #2
 8008f3a:	b570      	push	{r4, r5, r6, lr}
 8008f3c:	f1c2 0620 	rsb	r6, r2, #32
 8008f40:	6843      	ldr	r3, [r0, #4]
 8008f42:	6804      	ldr	r4, [r0, #0]
 8008f44:	fa03 f506 	lsl.w	r5, r3, r6
 8008f48:	432c      	orrs	r4, r5
 8008f4a:	40d3      	lsrs	r3, r2
 8008f4c:	6004      	str	r4, [r0, #0]
 8008f4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008f52:	4288      	cmp	r0, r1
 8008f54:	d3f4      	bcc.n	8008f40 <L_shift+0xc>
 8008f56:	bd70      	pop	{r4, r5, r6, pc}

08008f58 <__match>:
 8008f58:	b530      	push	{r4, r5, lr}
 8008f5a:	6803      	ldr	r3, [r0, #0]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f62:	b914      	cbnz	r4, 8008f6a <__match+0x12>
 8008f64:	6003      	str	r3, [r0, #0]
 8008f66:	2001      	movs	r0, #1
 8008f68:	bd30      	pop	{r4, r5, pc}
 8008f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f6e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008f72:	2d19      	cmp	r5, #25
 8008f74:	bf98      	it	ls
 8008f76:	3220      	addls	r2, #32
 8008f78:	42a2      	cmp	r2, r4
 8008f7a:	d0f0      	beq.n	8008f5e <__match+0x6>
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	e7f3      	b.n	8008f68 <__match+0x10>

08008f80 <__hexnan>:
 8008f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f84:	680b      	ldr	r3, [r1, #0]
 8008f86:	115e      	asrs	r6, r3, #5
 8008f88:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008f8c:	f013 031f 	ands.w	r3, r3, #31
 8008f90:	b087      	sub	sp, #28
 8008f92:	bf18      	it	ne
 8008f94:	3604      	addne	r6, #4
 8008f96:	2500      	movs	r5, #0
 8008f98:	1f37      	subs	r7, r6, #4
 8008f9a:	4690      	mov	r8, r2
 8008f9c:	6802      	ldr	r2, [r0, #0]
 8008f9e:	9301      	str	r3, [sp, #4]
 8008fa0:	4682      	mov	sl, r0
 8008fa2:	f846 5c04 	str.w	r5, [r6, #-4]
 8008fa6:	46b9      	mov	r9, r7
 8008fa8:	463c      	mov	r4, r7
 8008faa:	9502      	str	r5, [sp, #8]
 8008fac:	46ab      	mov	fp, r5
 8008fae:	7851      	ldrb	r1, [r2, #1]
 8008fb0:	1c53      	adds	r3, r2, #1
 8008fb2:	9303      	str	r3, [sp, #12]
 8008fb4:	b341      	cbz	r1, 8009008 <__hexnan+0x88>
 8008fb6:	4608      	mov	r0, r1
 8008fb8:	9205      	str	r2, [sp, #20]
 8008fba:	9104      	str	r1, [sp, #16]
 8008fbc:	f7ff fd5f 	bl	8008a7e <__hexdig_fun>
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	d14f      	bne.n	8009064 <__hexnan+0xe4>
 8008fc4:	9904      	ldr	r1, [sp, #16]
 8008fc6:	9a05      	ldr	r2, [sp, #20]
 8008fc8:	2920      	cmp	r1, #32
 8008fca:	d818      	bhi.n	8008ffe <__hexnan+0x7e>
 8008fcc:	9b02      	ldr	r3, [sp, #8]
 8008fce:	459b      	cmp	fp, r3
 8008fd0:	dd13      	ble.n	8008ffa <__hexnan+0x7a>
 8008fd2:	454c      	cmp	r4, r9
 8008fd4:	d206      	bcs.n	8008fe4 <__hexnan+0x64>
 8008fd6:	2d07      	cmp	r5, #7
 8008fd8:	dc04      	bgt.n	8008fe4 <__hexnan+0x64>
 8008fda:	462a      	mov	r2, r5
 8008fdc:	4649      	mov	r1, r9
 8008fde:	4620      	mov	r0, r4
 8008fe0:	f7ff ffa8 	bl	8008f34 <L_shift>
 8008fe4:	4544      	cmp	r4, r8
 8008fe6:	d950      	bls.n	800908a <__hexnan+0x10a>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	f1a4 0904 	sub.w	r9, r4, #4
 8008fee:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ff2:	f8cd b008 	str.w	fp, [sp, #8]
 8008ff6:	464c      	mov	r4, r9
 8008ff8:	461d      	mov	r5, r3
 8008ffa:	9a03      	ldr	r2, [sp, #12]
 8008ffc:	e7d7      	b.n	8008fae <__hexnan+0x2e>
 8008ffe:	2929      	cmp	r1, #41	; 0x29
 8009000:	d156      	bne.n	80090b0 <__hexnan+0x130>
 8009002:	3202      	adds	r2, #2
 8009004:	f8ca 2000 	str.w	r2, [sl]
 8009008:	f1bb 0f00 	cmp.w	fp, #0
 800900c:	d050      	beq.n	80090b0 <__hexnan+0x130>
 800900e:	454c      	cmp	r4, r9
 8009010:	d206      	bcs.n	8009020 <__hexnan+0xa0>
 8009012:	2d07      	cmp	r5, #7
 8009014:	dc04      	bgt.n	8009020 <__hexnan+0xa0>
 8009016:	462a      	mov	r2, r5
 8009018:	4649      	mov	r1, r9
 800901a:	4620      	mov	r0, r4
 800901c:	f7ff ff8a 	bl	8008f34 <L_shift>
 8009020:	4544      	cmp	r4, r8
 8009022:	d934      	bls.n	800908e <__hexnan+0x10e>
 8009024:	f1a8 0204 	sub.w	r2, r8, #4
 8009028:	4623      	mov	r3, r4
 800902a:	f853 1b04 	ldr.w	r1, [r3], #4
 800902e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009032:	429f      	cmp	r7, r3
 8009034:	d2f9      	bcs.n	800902a <__hexnan+0xaa>
 8009036:	1b3b      	subs	r3, r7, r4
 8009038:	f023 0303 	bic.w	r3, r3, #3
 800903c:	3304      	adds	r3, #4
 800903e:	3401      	adds	r4, #1
 8009040:	3e03      	subs	r6, #3
 8009042:	42b4      	cmp	r4, r6
 8009044:	bf88      	it	hi
 8009046:	2304      	movhi	r3, #4
 8009048:	4443      	add	r3, r8
 800904a:	2200      	movs	r2, #0
 800904c:	f843 2b04 	str.w	r2, [r3], #4
 8009050:	429f      	cmp	r7, r3
 8009052:	d2fb      	bcs.n	800904c <__hexnan+0xcc>
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	b91b      	cbnz	r3, 8009060 <__hexnan+0xe0>
 8009058:	4547      	cmp	r7, r8
 800905a:	d127      	bne.n	80090ac <__hexnan+0x12c>
 800905c:	2301      	movs	r3, #1
 800905e:	603b      	str	r3, [r7, #0]
 8009060:	2005      	movs	r0, #5
 8009062:	e026      	b.n	80090b2 <__hexnan+0x132>
 8009064:	3501      	adds	r5, #1
 8009066:	2d08      	cmp	r5, #8
 8009068:	f10b 0b01 	add.w	fp, fp, #1
 800906c:	dd06      	ble.n	800907c <__hexnan+0xfc>
 800906e:	4544      	cmp	r4, r8
 8009070:	d9c3      	bls.n	8008ffa <__hexnan+0x7a>
 8009072:	2300      	movs	r3, #0
 8009074:	f844 3c04 	str.w	r3, [r4, #-4]
 8009078:	2501      	movs	r5, #1
 800907a:	3c04      	subs	r4, #4
 800907c:	6822      	ldr	r2, [r4, #0]
 800907e:	f000 000f 	and.w	r0, r0, #15
 8009082:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009086:	6022      	str	r2, [r4, #0]
 8009088:	e7b7      	b.n	8008ffa <__hexnan+0x7a>
 800908a:	2508      	movs	r5, #8
 800908c:	e7b5      	b.n	8008ffa <__hexnan+0x7a>
 800908e:	9b01      	ldr	r3, [sp, #4]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d0df      	beq.n	8009054 <__hexnan+0xd4>
 8009094:	f04f 32ff 	mov.w	r2, #4294967295
 8009098:	f1c3 0320 	rsb	r3, r3, #32
 800909c:	fa22 f303 	lsr.w	r3, r2, r3
 80090a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80090a4:	401a      	ands	r2, r3
 80090a6:	f846 2c04 	str.w	r2, [r6, #-4]
 80090aa:	e7d3      	b.n	8009054 <__hexnan+0xd4>
 80090ac:	3f04      	subs	r7, #4
 80090ae:	e7d1      	b.n	8009054 <__hexnan+0xd4>
 80090b0:	2004      	movs	r0, #4
 80090b2:	b007      	add	sp, #28
 80090b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090b8 <_localeconv_r>:
 80090b8:	4800      	ldr	r0, [pc, #0]	; (80090bc <_localeconv_r+0x4>)
 80090ba:	4770      	bx	lr
 80090bc:	20000574 	.word	0x20000574

080090c0 <__retarget_lock_init_recursive>:
 80090c0:	4770      	bx	lr

080090c2 <__retarget_lock_acquire_recursive>:
 80090c2:	4770      	bx	lr

080090c4 <__retarget_lock_release_recursive>:
 80090c4:	4770      	bx	lr

080090c6 <__swhatbuf_r>:
 80090c6:	b570      	push	{r4, r5, r6, lr}
 80090c8:	460e      	mov	r6, r1
 80090ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ce:	2900      	cmp	r1, #0
 80090d0:	b096      	sub	sp, #88	; 0x58
 80090d2:	4614      	mov	r4, r2
 80090d4:	461d      	mov	r5, r3
 80090d6:	da08      	bge.n	80090ea <__swhatbuf_r+0x24>
 80090d8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	602a      	str	r2, [r5, #0]
 80090e0:	061a      	lsls	r2, r3, #24
 80090e2:	d410      	bmi.n	8009106 <__swhatbuf_r+0x40>
 80090e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090e8:	e00e      	b.n	8009108 <__swhatbuf_r+0x42>
 80090ea:	466a      	mov	r2, sp
 80090ec:	f001 f9b6 	bl	800a45c <_fstat_r>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	dbf1      	blt.n	80090d8 <__swhatbuf_r+0x12>
 80090f4:	9a01      	ldr	r2, [sp, #4]
 80090f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80090fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80090fe:	425a      	negs	r2, r3
 8009100:	415a      	adcs	r2, r3
 8009102:	602a      	str	r2, [r5, #0]
 8009104:	e7ee      	b.n	80090e4 <__swhatbuf_r+0x1e>
 8009106:	2340      	movs	r3, #64	; 0x40
 8009108:	2000      	movs	r0, #0
 800910a:	6023      	str	r3, [r4, #0]
 800910c:	b016      	add	sp, #88	; 0x58
 800910e:	bd70      	pop	{r4, r5, r6, pc}

08009110 <__smakebuf_r>:
 8009110:	898b      	ldrh	r3, [r1, #12]
 8009112:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009114:	079d      	lsls	r5, r3, #30
 8009116:	4606      	mov	r6, r0
 8009118:	460c      	mov	r4, r1
 800911a:	d507      	bpl.n	800912c <__smakebuf_r+0x1c>
 800911c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	6123      	str	r3, [r4, #16]
 8009124:	2301      	movs	r3, #1
 8009126:	6163      	str	r3, [r4, #20]
 8009128:	b002      	add	sp, #8
 800912a:	bd70      	pop	{r4, r5, r6, pc}
 800912c:	ab01      	add	r3, sp, #4
 800912e:	466a      	mov	r2, sp
 8009130:	f7ff ffc9 	bl	80090c6 <__swhatbuf_r>
 8009134:	9900      	ldr	r1, [sp, #0]
 8009136:	4605      	mov	r5, r0
 8009138:	4630      	mov	r0, r6
 800913a:	f000 fd95 	bl	8009c68 <_malloc_r>
 800913e:	b948      	cbnz	r0, 8009154 <__smakebuf_r+0x44>
 8009140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009144:	059a      	lsls	r2, r3, #22
 8009146:	d4ef      	bmi.n	8009128 <__smakebuf_r+0x18>
 8009148:	f023 0303 	bic.w	r3, r3, #3
 800914c:	f043 0302 	orr.w	r3, r3, #2
 8009150:	81a3      	strh	r3, [r4, #12]
 8009152:	e7e3      	b.n	800911c <__smakebuf_r+0xc>
 8009154:	4b0d      	ldr	r3, [pc, #52]	; (800918c <__smakebuf_r+0x7c>)
 8009156:	62b3      	str	r3, [r6, #40]	; 0x28
 8009158:	89a3      	ldrh	r3, [r4, #12]
 800915a:	6020      	str	r0, [r4, #0]
 800915c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009160:	81a3      	strh	r3, [r4, #12]
 8009162:	9b00      	ldr	r3, [sp, #0]
 8009164:	6163      	str	r3, [r4, #20]
 8009166:	9b01      	ldr	r3, [sp, #4]
 8009168:	6120      	str	r0, [r4, #16]
 800916a:	b15b      	cbz	r3, 8009184 <__smakebuf_r+0x74>
 800916c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009170:	4630      	mov	r0, r6
 8009172:	f001 f985 	bl	800a480 <_isatty_r>
 8009176:	b128      	cbz	r0, 8009184 <__smakebuf_r+0x74>
 8009178:	89a3      	ldrh	r3, [r4, #12]
 800917a:	f023 0303 	bic.w	r3, r3, #3
 800917e:	f043 0301 	orr.w	r3, r3, #1
 8009182:	81a3      	strh	r3, [r4, #12]
 8009184:	89a0      	ldrh	r0, [r4, #12]
 8009186:	4305      	orrs	r5, r0
 8009188:	81a5      	strh	r5, [r4, #12]
 800918a:	e7cd      	b.n	8009128 <__smakebuf_r+0x18>
 800918c:	08008839 	.word	0x08008839

08009190 <malloc>:
 8009190:	4b02      	ldr	r3, [pc, #8]	; (800919c <malloc+0xc>)
 8009192:	4601      	mov	r1, r0
 8009194:	6818      	ldr	r0, [r3, #0]
 8009196:	f000 bd67 	b.w	8009c68 <_malloc_r>
 800919a:	bf00      	nop
 800919c:	2000041c 	.word	0x2000041c

080091a0 <__ascii_mbtowc>:
 80091a0:	b082      	sub	sp, #8
 80091a2:	b901      	cbnz	r1, 80091a6 <__ascii_mbtowc+0x6>
 80091a4:	a901      	add	r1, sp, #4
 80091a6:	b142      	cbz	r2, 80091ba <__ascii_mbtowc+0x1a>
 80091a8:	b14b      	cbz	r3, 80091be <__ascii_mbtowc+0x1e>
 80091aa:	7813      	ldrb	r3, [r2, #0]
 80091ac:	600b      	str	r3, [r1, #0]
 80091ae:	7812      	ldrb	r2, [r2, #0]
 80091b0:	1e10      	subs	r0, r2, #0
 80091b2:	bf18      	it	ne
 80091b4:	2001      	movne	r0, #1
 80091b6:	b002      	add	sp, #8
 80091b8:	4770      	bx	lr
 80091ba:	4610      	mov	r0, r2
 80091bc:	e7fb      	b.n	80091b6 <__ascii_mbtowc+0x16>
 80091be:	f06f 0001 	mvn.w	r0, #1
 80091c2:	e7f8      	b.n	80091b6 <__ascii_mbtowc+0x16>

080091c4 <memcpy>:
 80091c4:	440a      	add	r2, r1
 80091c6:	4291      	cmp	r1, r2
 80091c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80091cc:	d100      	bne.n	80091d0 <memcpy+0xc>
 80091ce:	4770      	bx	lr
 80091d0:	b510      	push	{r4, lr}
 80091d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091da:	4291      	cmp	r1, r2
 80091dc:	d1f9      	bne.n	80091d2 <memcpy+0xe>
 80091de:	bd10      	pop	{r4, pc}

080091e0 <_Balloc>:
 80091e0:	b570      	push	{r4, r5, r6, lr}
 80091e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80091e4:	4604      	mov	r4, r0
 80091e6:	460d      	mov	r5, r1
 80091e8:	b976      	cbnz	r6, 8009208 <_Balloc+0x28>
 80091ea:	2010      	movs	r0, #16
 80091ec:	f7ff ffd0 	bl	8009190 <malloc>
 80091f0:	4602      	mov	r2, r0
 80091f2:	6260      	str	r0, [r4, #36]	; 0x24
 80091f4:	b920      	cbnz	r0, 8009200 <_Balloc+0x20>
 80091f6:	4b18      	ldr	r3, [pc, #96]	; (8009258 <_Balloc+0x78>)
 80091f8:	4818      	ldr	r0, [pc, #96]	; (800925c <_Balloc+0x7c>)
 80091fa:	2166      	movs	r1, #102	; 0x66
 80091fc:	f001 f8ee 	bl	800a3dc <__assert_func>
 8009200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009204:	6006      	str	r6, [r0, #0]
 8009206:	60c6      	str	r6, [r0, #12]
 8009208:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800920a:	68f3      	ldr	r3, [r6, #12]
 800920c:	b183      	cbz	r3, 8009230 <_Balloc+0x50>
 800920e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009216:	b9b8      	cbnz	r0, 8009248 <_Balloc+0x68>
 8009218:	2101      	movs	r1, #1
 800921a:	fa01 f605 	lsl.w	r6, r1, r5
 800921e:	1d72      	adds	r2, r6, #5
 8009220:	0092      	lsls	r2, r2, #2
 8009222:	4620      	mov	r0, r4
 8009224:	f000 fc9d 	bl	8009b62 <_calloc_r>
 8009228:	b160      	cbz	r0, 8009244 <_Balloc+0x64>
 800922a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800922e:	e00e      	b.n	800924e <_Balloc+0x6e>
 8009230:	2221      	movs	r2, #33	; 0x21
 8009232:	2104      	movs	r1, #4
 8009234:	4620      	mov	r0, r4
 8009236:	f000 fc94 	bl	8009b62 <_calloc_r>
 800923a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800923c:	60f0      	str	r0, [r6, #12]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1e4      	bne.n	800920e <_Balloc+0x2e>
 8009244:	2000      	movs	r0, #0
 8009246:	bd70      	pop	{r4, r5, r6, pc}
 8009248:	6802      	ldr	r2, [r0, #0]
 800924a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800924e:	2300      	movs	r3, #0
 8009250:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009254:	e7f7      	b.n	8009246 <_Balloc+0x66>
 8009256:	bf00      	nop
 8009258:	08013096 	.word	0x08013096
 800925c:	080131f8 	.word	0x080131f8

08009260 <_Bfree>:
 8009260:	b570      	push	{r4, r5, r6, lr}
 8009262:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009264:	4605      	mov	r5, r0
 8009266:	460c      	mov	r4, r1
 8009268:	b976      	cbnz	r6, 8009288 <_Bfree+0x28>
 800926a:	2010      	movs	r0, #16
 800926c:	f7ff ff90 	bl	8009190 <malloc>
 8009270:	4602      	mov	r2, r0
 8009272:	6268      	str	r0, [r5, #36]	; 0x24
 8009274:	b920      	cbnz	r0, 8009280 <_Bfree+0x20>
 8009276:	4b09      	ldr	r3, [pc, #36]	; (800929c <_Bfree+0x3c>)
 8009278:	4809      	ldr	r0, [pc, #36]	; (80092a0 <_Bfree+0x40>)
 800927a:	218a      	movs	r1, #138	; 0x8a
 800927c:	f001 f8ae 	bl	800a3dc <__assert_func>
 8009280:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009284:	6006      	str	r6, [r0, #0]
 8009286:	60c6      	str	r6, [r0, #12]
 8009288:	b13c      	cbz	r4, 800929a <_Bfree+0x3a>
 800928a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800928c:	6862      	ldr	r2, [r4, #4]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009294:	6021      	str	r1, [r4, #0]
 8009296:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800929a:	bd70      	pop	{r4, r5, r6, pc}
 800929c:	08013096 	.word	0x08013096
 80092a0:	080131f8 	.word	0x080131f8

080092a4 <__multadd>:
 80092a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092a8:	690d      	ldr	r5, [r1, #16]
 80092aa:	4607      	mov	r7, r0
 80092ac:	460c      	mov	r4, r1
 80092ae:	461e      	mov	r6, r3
 80092b0:	f101 0c14 	add.w	ip, r1, #20
 80092b4:	2000      	movs	r0, #0
 80092b6:	f8dc 3000 	ldr.w	r3, [ip]
 80092ba:	b299      	uxth	r1, r3
 80092bc:	fb02 6101 	mla	r1, r2, r1, r6
 80092c0:	0c1e      	lsrs	r6, r3, #16
 80092c2:	0c0b      	lsrs	r3, r1, #16
 80092c4:	fb02 3306 	mla	r3, r2, r6, r3
 80092c8:	b289      	uxth	r1, r1
 80092ca:	3001      	adds	r0, #1
 80092cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80092d0:	4285      	cmp	r5, r0
 80092d2:	f84c 1b04 	str.w	r1, [ip], #4
 80092d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80092da:	dcec      	bgt.n	80092b6 <__multadd+0x12>
 80092dc:	b30e      	cbz	r6, 8009322 <__multadd+0x7e>
 80092de:	68a3      	ldr	r3, [r4, #8]
 80092e0:	42ab      	cmp	r3, r5
 80092e2:	dc19      	bgt.n	8009318 <__multadd+0x74>
 80092e4:	6861      	ldr	r1, [r4, #4]
 80092e6:	4638      	mov	r0, r7
 80092e8:	3101      	adds	r1, #1
 80092ea:	f7ff ff79 	bl	80091e0 <_Balloc>
 80092ee:	4680      	mov	r8, r0
 80092f0:	b928      	cbnz	r0, 80092fe <__multadd+0x5a>
 80092f2:	4602      	mov	r2, r0
 80092f4:	4b0c      	ldr	r3, [pc, #48]	; (8009328 <__multadd+0x84>)
 80092f6:	480d      	ldr	r0, [pc, #52]	; (800932c <__multadd+0x88>)
 80092f8:	21b5      	movs	r1, #181	; 0xb5
 80092fa:	f001 f86f 	bl	800a3dc <__assert_func>
 80092fe:	6922      	ldr	r2, [r4, #16]
 8009300:	3202      	adds	r2, #2
 8009302:	f104 010c 	add.w	r1, r4, #12
 8009306:	0092      	lsls	r2, r2, #2
 8009308:	300c      	adds	r0, #12
 800930a:	f7ff ff5b 	bl	80091c4 <memcpy>
 800930e:	4621      	mov	r1, r4
 8009310:	4638      	mov	r0, r7
 8009312:	f7ff ffa5 	bl	8009260 <_Bfree>
 8009316:	4644      	mov	r4, r8
 8009318:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800931c:	3501      	adds	r5, #1
 800931e:	615e      	str	r6, [r3, #20]
 8009320:	6125      	str	r5, [r4, #16]
 8009322:	4620      	mov	r0, r4
 8009324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009328:	08013108 	.word	0x08013108
 800932c:	080131f8 	.word	0x080131f8

08009330 <__s2b>:
 8009330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009334:	460c      	mov	r4, r1
 8009336:	4615      	mov	r5, r2
 8009338:	461f      	mov	r7, r3
 800933a:	2209      	movs	r2, #9
 800933c:	3308      	adds	r3, #8
 800933e:	4606      	mov	r6, r0
 8009340:	fb93 f3f2 	sdiv	r3, r3, r2
 8009344:	2100      	movs	r1, #0
 8009346:	2201      	movs	r2, #1
 8009348:	429a      	cmp	r2, r3
 800934a:	db09      	blt.n	8009360 <__s2b+0x30>
 800934c:	4630      	mov	r0, r6
 800934e:	f7ff ff47 	bl	80091e0 <_Balloc>
 8009352:	b940      	cbnz	r0, 8009366 <__s2b+0x36>
 8009354:	4602      	mov	r2, r0
 8009356:	4b19      	ldr	r3, [pc, #100]	; (80093bc <__s2b+0x8c>)
 8009358:	4819      	ldr	r0, [pc, #100]	; (80093c0 <__s2b+0x90>)
 800935a:	21ce      	movs	r1, #206	; 0xce
 800935c:	f001 f83e 	bl	800a3dc <__assert_func>
 8009360:	0052      	lsls	r2, r2, #1
 8009362:	3101      	adds	r1, #1
 8009364:	e7f0      	b.n	8009348 <__s2b+0x18>
 8009366:	9b08      	ldr	r3, [sp, #32]
 8009368:	6143      	str	r3, [r0, #20]
 800936a:	2d09      	cmp	r5, #9
 800936c:	f04f 0301 	mov.w	r3, #1
 8009370:	6103      	str	r3, [r0, #16]
 8009372:	dd16      	ble.n	80093a2 <__s2b+0x72>
 8009374:	f104 0909 	add.w	r9, r4, #9
 8009378:	46c8      	mov	r8, r9
 800937a:	442c      	add	r4, r5
 800937c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009380:	4601      	mov	r1, r0
 8009382:	3b30      	subs	r3, #48	; 0x30
 8009384:	220a      	movs	r2, #10
 8009386:	4630      	mov	r0, r6
 8009388:	f7ff ff8c 	bl	80092a4 <__multadd>
 800938c:	45a0      	cmp	r8, r4
 800938e:	d1f5      	bne.n	800937c <__s2b+0x4c>
 8009390:	f1a5 0408 	sub.w	r4, r5, #8
 8009394:	444c      	add	r4, r9
 8009396:	1b2d      	subs	r5, r5, r4
 8009398:	1963      	adds	r3, r4, r5
 800939a:	42bb      	cmp	r3, r7
 800939c:	db04      	blt.n	80093a8 <__s2b+0x78>
 800939e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093a2:	340a      	adds	r4, #10
 80093a4:	2509      	movs	r5, #9
 80093a6:	e7f6      	b.n	8009396 <__s2b+0x66>
 80093a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80093ac:	4601      	mov	r1, r0
 80093ae:	3b30      	subs	r3, #48	; 0x30
 80093b0:	220a      	movs	r2, #10
 80093b2:	4630      	mov	r0, r6
 80093b4:	f7ff ff76 	bl	80092a4 <__multadd>
 80093b8:	e7ee      	b.n	8009398 <__s2b+0x68>
 80093ba:	bf00      	nop
 80093bc:	08013108 	.word	0x08013108
 80093c0:	080131f8 	.word	0x080131f8

080093c4 <__hi0bits>:
 80093c4:	0c03      	lsrs	r3, r0, #16
 80093c6:	041b      	lsls	r3, r3, #16
 80093c8:	b9d3      	cbnz	r3, 8009400 <__hi0bits+0x3c>
 80093ca:	0400      	lsls	r0, r0, #16
 80093cc:	2310      	movs	r3, #16
 80093ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80093d2:	bf04      	itt	eq
 80093d4:	0200      	lsleq	r0, r0, #8
 80093d6:	3308      	addeq	r3, #8
 80093d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80093dc:	bf04      	itt	eq
 80093de:	0100      	lsleq	r0, r0, #4
 80093e0:	3304      	addeq	r3, #4
 80093e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80093e6:	bf04      	itt	eq
 80093e8:	0080      	lsleq	r0, r0, #2
 80093ea:	3302      	addeq	r3, #2
 80093ec:	2800      	cmp	r0, #0
 80093ee:	db05      	blt.n	80093fc <__hi0bits+0x38>
 80093f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80093f4:	f103 0301 	add.w	r3, r3, #1
 80093f8:	bf08      	it	eq
 80093fa:	2320      	moveq	r3, #32
 80093fc:	4618      	mov	r0, r3
 80093fe:	4770      	bx	lr
 8009400:	2300      	movs	r3, #0
 8009402:	e7e4      	b.n	80093ce <__hi0bits+0xa>

08009404 <__lo0bits>:
 8009404:	6803      	ldr	r3, [r0, #0]
 8009406:	f013 0207 	ands.w	r2, r3, #7
 800940a:	4601      	mov	r1, r0
 800940c:	d00b      	beq.n	8009426 <__lo0bits+0x22>
 800940e:	07da      	lsls	r2, r3, #31
 8009410:	d423      	bmi.n	800945a <__lo0bits+0x56>
 8009412:	0798      	lsls	r0, r3, #30
 8009414:	bf49      	itett	mi
 8009416:	085b      	lsrmi	r3, r3, #1
 8009418:	089b      	lsrpl	r3, r3, #2
 800941a:	2001      	movmi	r0, #1
 800941c:	600b      	strmi	r3, [r1, #0]
 800941e:	bf5c      	itt	pl
 8009420:	600b      	strpl	r3, [r1, #0]
 8009422:	2002      	movpl	r0, #2
 8009424:	4770      	bx	lr
 8009426:	b298      	uxth	r0, r3
 8009428:	b9a8      	cbnz	r0, 8009456 <__lo0bits+0x52>
 800942a:	0c1b      	lsrs	r3, r3, #16
 800942c:	2010      	movs	r0, #16
 800942e:	b2da      	uxtb	r2, r3
 8009430:	b90a      	cbnz	r2, 8009436 <__lo0bits+0x32>
 8009432:	3008      	adds	r0, #8
 8009434:	0a1b      	lsrs	r3, r3, #8
 8009436:	071a      	lsls	r2, r3, #28
 8009438:	bf04      	itt	eq
 800943a:	091b      	lsreq	r3, r3, #4
 800943c:	3004      	addeq	r0, #4
 800943e:	079a      	lsls	r2, r3, #30
 8009440:	bf04      	itt	eq
 8009442:	089b      	lsreq	r3, r3, #2
 8009444:	3002      	addeq	r0, #2
 8009446:	07da      	lsls	r2, r3, #31
 8009448:	d403      	bmi.n	8009452 <__lo0bits+0x4e>
 800944a:	085b      	lsrs	r3, r3, #1
 800944c:	f100 0001 	add.w	r0, r0, #1
 8009450:	d005      	beq.n	800945e <__lo0bits+0x5a>
 8009452:	600b      	str	r3, [r1, #0]
 8009454:	4770      	bx	lr
 8009456:	4610      	mov	r0, r2
 8009458:	e7e9      	b.n	800942e <__lo0bits+0x2a>
 800945a:	2000      	movs	r0, #0
 800945c:	4770      	bx	lr
 800945e:	2020      	movs	r0, #32
 8009460:	4770      	bx	lr
	...

08009464 <__i2b>:
 8009464:	b510      	push	{r4, lr}
 8009466:	460c      	mov	r4, r1
 8009468:	2101      	movs	r1, #1
 800946a:	f7ff feb9 	bl	80091e0 <_Balloc>
 800946e:	4602      	mov	r2, r0
 8009470:	b928      	cbnz	r0, 800947e <__i2b+0x1a>
 8009472:	4b05      	ldr	r3, [pc, #20]	; (8009488 <__i2b+0x24>)
 8009474:	4805      	ldr	r0, [pc, #20]	; (800948c <__i2b+0x28>)
 8009476:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800947a:	f000 ffaf 	bl	800a3dc <__assert_func>
 800947e:	2301      	movs	r3, #1
 8009480:	6144      	str	r4, [r0, #20]
 8009482:	6103      	str	r3, [r0, #16]
 8009484:	bd10      	pop	{r4, pc}
 8009486:	bf00      	nop
 8009488:	08013108 	.word	0x08013108
 800948c:	080131f8 	.word	0x080131f8

08009490 <__multiply>:
 8009490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009494:	4691      	mov	r9, r2
 8009496:	690a      	ldr	r2, [r1, #16]
 8009498:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800949c:	429a      	cmp	r2, r3
 800949e:	bfb8      	it	lt
 80094a0:	460b      	movlt	r3, r1
 80094a2:	460c      	mov	r4, r1
 80094a4:	bfbc      	itt	lt
 80094a6:	464c      	movlt	r4, r9
 80094a8:	4699      	movlt	r9, r3
 80094aa:	6927      	ldr	r7, [r4, #16]
 80094ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80094b0:	68a3      	ldr	r3, [r4, #8]
 80094b2:	6861      	ldr	r1, [r4, #4]
 80094b4:	eb07 060a 	add.w	r6, r7, sl
 80094b8:	42b3      	cmp	r3, r6
 80094ba:	b085      	sub	sp, #20
 80094bc:	bfb8      	it	lt
 80094be:	3101      	addlt	r1, #1
 80094c0:	f7ff fe8e 	bl	80091e0 <_Balloc>
 80094c4:	b930      	cbnz	r0, 80094d4 <__multiply+0x44>
 80094c6:	4602      	mov	r2, r0
 80094c8:	4b44      	ldr	r3, [pc, #272]	; (80095dc <__multiply+0x14c>)
 80094ca:	4845      	ldr	r0, [pc, #276]	; (80095e0 <__multiply+0x150>)
 80094cc:	f240 115d 	movw	r1, #349	; 0x15d
 80094d0:	f000 ff84 	bl	800a3dc <__assert_func>
 80094d4:	f100 0514 	add.w	r5, r0, #20
 80094d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80094dc:	462b      	mov	r3, r5
 80094de:	2200      	movs	r2, #0
 80094e0:	4543      	cmp	r3, r8
 80094e2:	d321      	bcc.n	8009528 <__multiply+0x98>
 80094e4:	f104 0314 	add.w	r3, r4, #20
 80094e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80094ec:	f109 0314 	add.w	r3, r9, #20
 80094f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80094f4:	9202      	str	r2, [sp, #8]
 80094f6:	1b3a      	subs	r2, r7, r4
 80094f8:	3a15      	subs	r2, #21
 80094fa:	f022 0203 	bic.w	r2, r2, #3
 80094fe:	3204      	adds	r2, #4
 8009500:	f104 0115 	add.w	r1, r4, #21
 8009504:	428f      	cmp	r7, r1
 8009506:	bf38      	it	cc
 8009508:	2204      	movcc	r2, #4
 800950a:	9201      	str	r2, [sp, #4]
 800950c:	9a02      	ldr	r2, [sp, #8]
 800950e:	9303      	str	r3, [sp, #12]
 8009510:	429a      	cmp	r2, r3
 8009512:	d80c      	bhi.n	800952e <__multiply+0x9e>
 8009514:	2e00      	cmp	r6, #0
 8009516:	dd03      	ble.n	8009520 <__multiply+0x90>
 8009518:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800951c:	2b00      	cmp	r3, #0
 800951e:	d05a      	beq.n	80095d6 <__multiply+0x146>
 8009520:	6106      	str	r6, [r0, #16]
 8009522:	b005      	add	sp, #20
 8009524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009528:	f843 2b04 	str.w	r2, [r3], #4
 800952c:	e7d8      	b.n	80094e0 <__multiply+0x50>
 800952e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009532:	f1ba 0f00 	cmp.w	sl, #0
 8009536:	d024      	beq.n	8009582 <__multiply+0xf2>
 8009538:	f104 0e14 	add.w	lr, r4, #20
 800953c:	46a9      	mov	r9, r5
 800953e:	f04f 0c00 	mov.w	ip, #0
 8009542:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009546:	f8d9 1000 	ldr.w	r1, [r9]
 800954a:	fa1f fb82 	uxth.w	fp, r2
 800954e:	b289      	uxth	r1, r1
 8009550:	fb0a 110b 	mla	r1, sl, fp, r1
 8009554:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009558:	f8d9 2000 	ldr.w	r2, [r9]
 800955c:	4461      	add	r1, ip
 800955e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009562:	fb0a c20b 	mla	r2, sl, fp, ip
 8009566:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800956a:	b289      	uxth	r1, r1
 800956c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009570:	4577      	cmp	r7, lr
 8009572:	f849 1b04 	str.w	r1, [r9], #4
 8009576:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800957a:	d8e2      	bhi.n	8009542 <__multiply+0xb2>
 800957c:	9a01      	ldr	r2, [sp, #4]
 800957e:	f845 c002 	str.w	ip, [r5, r2]
 8009582:	9a03      	ldr	r2, [sp, #12]
 8009584:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009588:	3304      	adds	r3, #4
 800958a:	f1b9 0f00 	cmp.w	r9, #0
 800958e:	d020      	beq.n	80095d2 <__multiply+0x142>
 8009590:	6829      	ldr	r1, [r5, #0]
 8009592:	f104 0c14 	add.w	ip, r4, #20
 8009596:	46ae      	mov	lr, r5
 8009598:	f04f 0a00 	mov.w	sl, #0
 800959c:	f8bc b000 	ldrh.w	fp, [ip]
 80095a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80095a4:	fb09 220b 	mla	r2, r9, fp, r2
 80095a8:	4492      	add	sl, r2
 80095aa:	b289      	uxth	r1, r1
 80095ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80095b0:	f84e 1b04 	str.w	r1, [lr], #4
 80095b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80095b8:	f8be 1000 	ldrh.w	r1, [lr]
 80095bc:	0c12      	lsrs	r2, r2, #16
 80095be:	fb09 1102 	mla	r1, r9, r2, r1
 80095c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80095c6:	4567      	cmp	r7, ip
 80095c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80095cc:	d8e6      	bhi.n	800959c <__multiply+0x10c>
 80095ce:	9a01      	ldr	r2, [sp, #4]
 80095d0:	50a9      	str	r1, [r5, r2]
 80095d2:	3504      	adds	r5, #4
 80095d4:	e79a      	b.n	800950c <__multiply+0x7c>
 80095d6:	3e01      	subs	r6, #1
 80095d8:	e79c      	b.n	8009514 <__multiply+0x84>
 80095da:	bf00      	nop
 80095dc:	08013108 	.word	0x08013108
 80095e0:	080131f8 	.word	0x080131f8

080095e4 <__pow5mult>:
 80095e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095e8:	4615      	mov	r5, r2
 80095ea:	f012 0203 	ands.w	r2, r2, #3
 80095ee:	4606      	mov	r6, r0
 80095f0:	460f      	mov	r7, r1
 80095f2:	d007      	beq.n	8009604 <__pow5mult+0x20>
 80095f4:	4c25      	ldr	r4, [pc, #148]	; (800968c <__pow5mult+0xa8>)
 80095f6:	3a01      	subs	r2, #1
 80095f8:	2300      	movs	r3, #0
 80095fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80095fe:	f7ff fe51 	bl	80092a4 <__multadd>
 8009602:	4607      	mov	r7, r0
 8009604:	10ad      	asrs	r5, r5, #2
 8009606:	d03d      	beq.n	8009684 <__pow5mult+0xa0>
 8009608:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800960a:	b97c      	cbnz	r4, 800962c <__pow5mult+0x48>
 800960c:	2010      	movs	r0, #16
 800960e:	f7ff fdbf 	bl	8009190 <malloc>
 8009612:	4602      	mov	r2, r0
 8009614:	6270      	str	r0, [r6, #36]	; 0x24
 8009616:	b928      	cbnz	r0, 8009624 <__pow5mult+0x40>
 8009618:	4b1d      	ldr	r3, [pc, #116]	; (8009690 <__pow5mult+0xac>)
 800961a:	481e      	ldr	r0, [pc, #120]	; (8009694 <__pow5mult+0xb0>)
 800961c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009620:	f000 fedc 	bl	800a3dc <__assert_func>
 8009624:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009628:	6004      	str	r4, [r0, #0]
 800962a:	60c4      	str	r4, [r0, #12]
 800962c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009630:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009634:	b94c      	cbnz	r4, 800964a <__pow5mult+0x66>
 8009636:	f240 2171 	movw	r1, #625	; 0x271
 800963a:	4630      	mov	r0, r6
 800963c:	f7ff ff12 	bl	8009464 <__i2b>
 8009640:	2300      	movs	r3, #0
 8009642:	f8c8 0008 	str.w	r0, [r8, #8]
 8009646:	4604      	mov	r4, r0
 8009648:	6003      	str	r3, [r0, #0]
 800964a:	f04f 0900 	mov.w	r9, #0
 800964e:	07eb      	lsls	r3, r5, #31
 8009650:	d50a      	bpl.n	8009668 <__pow5mult+0x84>
 8009652:	4639      	mov	r1, r7
 8009654:	4622      	mov	r2, r4
 8009656:	4630      	mov	r0, r6
 8009658:	f7ff ff1a 	bl	8009490 <__multiply>
 800965c:	4639      	mov	r1, r7
 800965e:	4680      	mov	r8, r0
 8009660:	4630      	mov	r0, r6
 8009662:	f7ff fdfd 	bl	8009260 <_Bfree>
 8009666:	4647      	mov	r7, r8
 8009668:	106d      	asrs	r5, r5, #1
 800966a:	d00b      	beq.n	8009684 <__pow5mult+0xa0>
 800966c:	6820      	ldr	r0, [r4, #0]
 800966e:	b938      	cbnz	r0, 8009680 <__pow5mult+0x9c>
 8009670:	4622      	mov	r2, r4
 8009672:	4621      	mov	r1, r4
 8009674:	4630      	mov	r0, r6
 8009676:	f7ff ff0b 	bl	8009490 <__multiply>
 800967a:	6020      	str	r0, [r4, #0]
 800967c:	f8c0 9000 	str.w	r9, [r0]
 8009680:	4604      	mov	r4, r0
 8009682:	e7e4      	b.n	800964e <__pow5mult+0x6a>
 8009684:	4638      	mov	r0, r7
 8009686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800968a:	bf00      	nop
 800968c:	08013348 	.word	0x08013348
 8009690:	08013096 	.word	0x08013096
 8009694:	080131f8 	.word	0x080131f8

08009698 <__lshift>:
 8009698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800969c:	460c      	mov	r4, r1
 800969e:	6849      	ldr	r1, [r1, #4]
 80096a0:	6923      	ldr	r3, [r4, #16]
 80096a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80096a6:	68a3      	ldr	r3, [r4, #8]
 80096a8:	4607      	mov	r7, r0
 80096aa:	4691      	mov	r9, r2
 80096ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80096b0:	f108 0601 	add.w	r6, r8, #1
 80096b4:	42b3      	cmp	r3, r6
 80096b6:	db0b      	blt.n	80096d0 <__lshift+0x38>
 80096b8:	4638      	mov	r0, r7
 80096ba:	f7ff fd91 	bl	80091e0 <_Balloc>
 80096be:	4605      	mov	r5, r0
 80096c0:	b948      	cbnz	r0, 80096d6 <__lshift+0x3e>
 80096c2:	4602      	mov	r2, r0
 80096c4:	4b2a      	ldr	r3, [pc, #168]	; (8009770 <__lshift+0xd8>)
 80096c6:	482b      	ldr	r0, [pc, #172]	; (8009774 <__lshift+0xdc>)
 80096c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80096cc:	f000 fe86 	bl	800a3dc <__assert_func>
 80096d0:	3101      	adds	r1, #1
 80096d2:	005b      	lsls	r3, r3, #1
 80096d4:	e7ee      	b.n	80096b4 <__lshift+0x1c>
 80096d6:	2300      	movs	r3, #0
 80096d8:	f100 0114 	add.w	r1, r0, #20
 80096dc:	f100 0210 	add.w	r2, r0, #16
 80096e0:	4618      	mov	r0, r3
 80096e2:	4553      	cmp	r3, sl
 80096e4:	db37      	blt.n	8009756 <__lshift+0xbe>
 80096e6:	6920      	ldr	r0, [r4, #16]
 80096e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80096ec:	f104 0314 	add.w	r3, r4, #20
 80096f0:	f019 091f 	ands.w	r9, r9, #31
 80096f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80096f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80096fc:	d02f      	beq.n	800975e <__lshift+0xc6>
 80096fe:	f1c9 0e20 	rsb	lr, r9, #32
 8009702:	468a      	mov	sl, r1
 8009704:	f04f 0c00 	mov.w	ip, #0
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	fa02 f209 	lsl.w	r2, r2, r9
 800970e:	ea42 020c 	orr.w	r2, r2, ip
 8009712:	f84a 2b04 	str.w	r2, [sl], #4
 8009716:	f853 2b04 	ldr.w	r2, [r3], #4
 800971a:	4298      	cmp	r0, r3
 800971c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009720:	d8f2      	bhi.n	8009708 <__lshift+0x70>
 8009722:	1b03      	subs	r3, r0, r4
 8009724:	3b15      	subs	r3, #21
 8009726:	f023 0303 	bic.w	r3, r3, #3
 800972a:	3304      	adds	r3, #4
 800972c:	f104 0215 	add.w	r2, r4, #21
 8009730:	4290      	cmp	r0, r2
 8009732:	bf38      	it	cc
 8009734:	2304      	movcc	r3, #4
 8009736:	f841 c003 	str.w	ip, [r1, r3]
 800973a:	f1bc 0f00 	cmp.w	ip, #0
 800973e:	d001      	beq.n	8009744 <__lshift+0xac>
 8009740:	f108 0602 	add.w	r6, r8, #2
 8009744:	3e01      	subs	r6, #1
 8009746:	4638      	mov	r0, r7
 8009748:	612e      	str	r6, [r5, #16]
 800974a:	4621      	mov	r1, r4
 800974c:	f7ff fd88 	bl	8009260 <_Bfree>
 8009750:	4628      	mov	r0, r5
 8009752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009756:	f842 0f04 	str.w	r0, [r2, #4]!
 800975a:	3301      	adds	r3, #1
 800975c:	e7c1      	b.n	80096e2 <__lshift+0x4a>
 800975e:	3904      	subs	r1, #4
 8009760:	f853 2b04 	ldr.w	r2, [r3], #4
 8009764:	f841 2f04 	str.w	r2, [r1, #4]!
 8009768:	4298      	cmp	r0, r3
 800976a:	d8f9      	bhi.n	8009760 <__lshift+0xc8>
 800976c:	e7ea      	b.n	8009744 <__lshift+0xac>
 800976e:	bf00      	nop
 8009770:	08013108 	.word	0x08013108
 8009774:	080131f8 	.word	0x080131f8

08009778 <__mcmp>:
 8009778:	b530      	push	{r4, r5, lr}
 800977a:	6902      	ldr	r2, [r0, #16]
 800977c:	690c      	ldr	r4, [r1, #16]
 800977e:	1b12      	subs	r2, r2, r4
 8009780:	d10e      	bne.n	80097a0 <__mcmp+0x28>
 8009782:	f100 0314 	add.w	r3, r0, #20
 8009786:	3114      	adds	r1, #20
 8009788:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800978c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009790:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009794:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009798:	42a5      	cmp	r5, r4
 800979a:	d003      	beq.n	80097a4 <__mcmp+0x2c>
 800979c:	d305      	bcc.n	80097aa <__mcmp+0x32>
 800979e:	2201      	movs	r2, #1
 80097a0:	4610      	mov	r0, r2
 80097a2:	bd30      	pop	{r4, r5, pc}
 80097a4:	4283      	cmp	r3, r0
 80097a6:	d3f3      	bcc.n	8009790 <__mcmp+0x18>
 80097a8:	e7fa      	b.n	80097a0 <__mcmp+0x28>
 80097aa:	f04f 32ff 	mov.w	r2, #4294967295
 80097ae:	e7f7      	b.n	80097a0 <__mcmp+0x28>

080097b0 <__mdiff>:
 80097b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b4:	460c      	mov	r4, r1
 80097b6:	4606      	mov	r6, r0
 80097b8:	4611      	mov	r1, r2
 80097ba:	4620      	mov	r0, r4
 80097bc:	4690      	mov	r8, r2
 80097be:	f7ff ffdb 	bl	8009778 <__mcmp>
 80097c2:	1e05      	subs	r5, r0, #0
 80097c4:	d110      	bne.n	80097e8 <__mdiff+0x38>
 80097c6:	4629      	mov	r1, r5
 80097c8:	4630      	mov	r0, r6
 80097ca:	f7ff fd09 	bl	80091e0 <_Balloc>
 80097ce:	b930      	cbnz	r0, 80097de <__mdiff+0x2e>
 80097d0:	4b3a      	ldr	r3, [pc, #232]	; (80098bc <__mdiff+0x10c>)
 80097d2:	4602      	mov	r2, r0
 80097d4:	f240 2132 	movw	r1, #562	; 0x232
 80097d8:	4839      	ldr	r0, [pc, #228]	; (80098c0 <__mdiff+0x110>)
 80097da:	f000 fdff 	bl	800a3dc <__assert_func>
 80097de:	2301      	movs	r3, #1
 80097e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80097e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e8:	bfa4      	itt	ge
 80097ea:	4643      	movge	r3, r8
 80097ec:	46a0      	movge	r8, r4
 80097ee:	4630      	mov	r0, r6
 80097f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80097f4:	bfa6      	itte	ge
 80097f6:	461c      	movge	r4, r3
 80097f8:	2500      	movge	r5, #0
 80097fa:	2501      	movlt	r5, #1
 80097fc:	f7ff fcf0 	bl	80091e0 <_Balloc>
 8009800:	b920      	cbnz	r0, 800980c <__mdiff+0x5c>
 8009802:	4b2e      	ldr	r3, [pc, #184]	; (80098bc <__mdiff+0x10c>)
 8009804:	4602      	mov	r2, r0
 8009806:	f44f 7110 	mov.w	r1, #576	; 0x240
 800980a:	e7e5      	b.n	80097d8 <__mdiff+0x28>
 800980c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009810:	6926      	ldr	r6, [r4, #16]
 8009812:	60c5      	str	r5, [r0, #12]
 8009814:	f104 0914 	add.w	r9, r4, #20
 8009818:	f108 0514 	add.w	r5, r8, #20
 800981c:	f100 0e14 	add.w	lr, r0, #20
 8009820:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009824:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009828:	f108 0210 	add.w	r2, r8, #16
 800982c:	46f2      	mov	sl, lr
 800982e:	2100      	movs	r1, #0
 8009830:	f859 3b04 	ldr.w	r3, [r9], #4
 8009834:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009838:	fa1f f883 	uxth.w	r8, r3
 800983c:	fa11 f18b 	uxtah	r1, r1, fp
 8009840:	0c1b      	lsrs	r3, r3, #16
 8009842:	eba1 0808 	sub.w	r8, r1, r8
 8009846:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800984a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800984e:	fa1f f888 	uxth.w	r8, r8
 8009852:	1419      	asrs	r1, r3, #16
 8009854:	454e      	cmp	r6, r9
 8009856:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800985a:	f84a 3b04 	str.w	r3, [sl], #4
 800985e:	d8e7      	bhi.n	8009830 <__mdiff+0x80>
 8009860:	1b33      	subs	r3, r6, r4
 8009862:	3b15      	subs	r3, #21
 8009864:	f023 0303 	bic.w	r3, r3, #3
 8009868:	3304      	adds	r3, #4
 800986a:	3415      	adds	r4, #21
 800986c:	42a6      	cmp	r6, r4
 800986e:	bf38      	it	cc
 8009870:	2304      	movcc	r3, #4
 8009872:	441d      	add	r5, r3
 8009874:	4473      	add	r3, lr
 8009876:	469e      	mov	lr, r3
 8009878:	462e      	mov	r6, r5
 800987a:	4566      	cmp	r6, ip
 800987c:	d30e      	bcc.n	800989c <__mdiff+0xec>
 800987e:	f10c 0203 	add.w	r2, ip, #3
 8009882:	1b52      	subs	r2, r2, r5
 8009884:	f022 0203 	bic.w	r2, r2, #3
 8009888:	3d03      	subs	r5, #3
 800988a:	45ac      	cmp	ip, r5
 800988c:	bf38      	it	cc
 800988e:	2200      	movcc	r2, #0
 8009890:	441a      	add	r2, r3
 8009892:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009896:	b17b      	cbz	r3, 80098b8 <__mdiff+0x108>
 8009898:	6107      	str	r7, [r0, #16]
 800989a:	e7a3      	b.n	80097e4 <__mdiff+0x34>
 800989c:	f856 8b04 	ldr.w	r8, [r6], #4
 80098a0:	fa11 f288 	uxtah	r2, r1, r8
 80098a4:	1414      	asrs	r4, r2, #16
 80098a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80098aa:	b292      	uxth	r2, r2
 80098ac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80098b0:	f84e 2b04 	str.w	r2, [lr], #4
 80098b4:	1421      	asrs	r1, r4, #16
 80098b6:	e7e0      	b.n	800987a <__mdiff+0xca>
 80098b8:	3f01      	subs	r7, #1
 80098ba:	e7ea      	b.n	8009892 <__mdiff+0xe2>
 80098bc:	08013108 	.word	0x08013108
 80098c0:	080131f8 	.word	0x080131f8

080098c4 <__ulp>:
 80098c4:	b082      	sub	sp, #8
 80098c6:	ed8d 0b00 	vstr	d0, [sp]
 80098ca:	9b01      	ldr	r3, [sp, #4]
 80098cc:	4912      	ldr	r1, [pc, #72]	; (8009918 <__ulp+0x54>)
 80098ce:	4019      	ands	r1, r3
 80098d0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80098d4:	2900      	cmp	r1, #0
 80098d6:	dd05      	ble.n	80098e4 <__ulp+0x20>
 80098d8:	2200      	movs	r2, #0
 80098da:	460b      	mov	r3, r1
 80098dc:	ec43 2b10 	vmov	d0, r2, r3
 80098e0:	b002      	add	sp, #8
 80098e2:	4770      	bx	lr
 80098e4:	4249      	negs	r1, r1
 80098e6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80098ea:	ea4f 5021 	mov.w	r0, r1, asr #20
 80098ee:	f04f 0200 	mov.w	r2, #0
 80098f2:	f04f 0300 	mov.w	r3, #0
 80098f6:	da04      	bge.n	8009902 <__ulp+0x3e>
 80098f8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80098fc:	fa41 f300 	asr.w	r3, r1, r0
 8009900:	e7ec      	b.n	80098dc <__ulp+0x18>
 8009902:	f1a0 0114 	sub.w	r1, r0, #20
 8009906:	291e      	cmp	r1, #30
 8009908:	bfda      	itte	le
 800990a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800990e:	fa20 f101 	lsrle.w	r1, r0, r1
 8009912:	2101      	movgt	r1, #1
 8009914:	460a      	mov	r2, r1
 8009916:	e7e1      	b.n	80098dc <__ulp+0x18>
 8009918:	7ff00000 	.word	0x7ff00000

0800991c <__b2d>:
 800991c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800991e:	6905      	ldr	r5, [r0, #16]
 8009920:	f100 0714 	add.w	r7, r0, #20
 8009924:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009928:	1f2e      	subs	r6, r5, #4
 800992a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800992e:	4620      	mov	r0, r4
 8009930:	f7ff fd48 	bl	80093c4 <__hi0bits>
 8009934:	f1c0 0320 	rsb	r3, r0, #32
 8009938:	280a      	cmp	r0, #10
 800993a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80099b8 <__b2d+0x9c>
 800993e:	600b      	str	r3, [r1, #0]
 8009940:	dc14      	bgt.n	800996c <__b2d+0x50>
 8009942:	f1c0 0e0b 	rsb	lr, r0, #11
 8009946:	fa24 f10e 	lsr.w	r1, r4, lr
 800994a:	42b7      	cmp	r7, r6
 800994c:	ea41 030c 	orr.w	r3, r1, ip
 8009950:	bf34      	ite	cc
 8009952:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009956:	2100      	movcs	r1, #0
 8009958:	3015      	adds	r0, #21
 800995a:	fa04 f000 	lsl.w	r0, r4, r0
 800995e:	fa21 f10e 	lsr.w	r1, r1, lr
 8009962:	ea40 0201 	orr.w	r2, r0, r1
 8009966:	ec43 2b10 	vmov	d0, r2, r3
 800996a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800996c:	42b7      	cmp	r7, r6
 800996e:	bf3a      	itte	cc
 8009970:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009974:	f1a5 0608 	subcc.w	r6, r5, #8
 8009978:	2100      	movcs	r1, #0
 800997a:	380b      	subs	r0, #11
 800997c:	d017      	beq.n	80099ae <__b2d+0x92>
 800997e:	f1c0 0c20 	rsb	ip, r0, #32
 8009982:	fa04 f500 	lsl.w	r5, r4, r0
 8009986:	42be      	cmp	r6, r7
 8009988:	fa21 f40c 	lsr.w	r4, r1, ip
 800998c:	ea45 0504 	orr.w	r5, r5, r4
 8009990:	bf8c      	ite	hi
 8009992:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009996:	2400      	movls	r4, #0
 8009998:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800999c:	fa01 f000 	lsl.w	r0, r1, r0
 80099a0:	fa24 f40c 	lsr.w	r4, r4, ip
 80099a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80099a8:	ea40 0204 	orr.w	r2, r0, r4
 80099ac:	e7db      	b.n	8009966 <__b2d+0x4a>
 80099ae:	ea44 030c 	orr.w	r3, r4, ip
 80099b2:	460a      	mov	r2, r1
 80099b4:	e7d7      	b.n	8009966 <__b2d+0x4a>
 80099b6:	bf00      	nop
 80099b8:	3ff00000 	.word	0x3ff00000

080099bc <__d2b>:
 80099bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80099c0:	4689      	mov	r9, r1
 80099c2:	2101      	movs	r1, #1
 80099c4:	ec57 6b10 	vmov	r6, r7, d0
 80099c8:	4690      	mov	r8, r2
 80099ca:	f7ff fc09 	bl	80091e0 <_Balloc>
 80099ce:	4604      	mov	r4, r0
 80099d0:	b930      	cbnz	r0, 80099e0 <__d2b+0x24>
 80099d2:	4602      	mov	r2, r0
 80099d4:	4b25      	ldr	r3, [pc, #148]	; (8009a6c <__d2b+0xb0>)
 80099d6:	4826      	ldr	r0, [pc, #152]	; (8009a70 <__d2b+0xb4>)
 80099d8:	f240 310a 	movw	r1, #778	; 0x30a
 80099dc:	f000 fcfe 	bl	800a3dc <__assert_func>
 80099e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80099e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80099e8:	bb35      	cbnz	r5, 8009a38 <__d2b+0x7c>
 80099ea:	2e00      	cmp	r6, #0
 80099ec:	9301      	str	r3, [sp, #4]
 80099ee:	d028      	beq.n	8009a42 <__d2b+0x86>
 80099f0:	4668      	mov	r0, sp
 80099f2:	9600      	str	r6, [sp, #0]
 80099f4:	f7ff fd06 	bl	8009404 <__lo0bits>
 80099f8:	9900      	ldr	r1, [sp, #0]
 80099fa:	b300      	cbz	r0, 8009a3e <__d2b+0x82>
 80099fc:	9a01      	ldr	r2, [sp, #4]
 80099fe:	f1c0 0320 	rsb	r3, r0, #32
 8009a02:	fa02 f303 	lsl.w	r3, r2, r3
 8009a06:	430b      	orrs	r3, r1
 8009a08:	40c2      	lsrs	r2, r0
 8009a0a:	6163      	str	r3, [r4, #20]
 8009a0c:	9201      	str	r2, [sp, #4]
 8009a0e:	9b01      	ldr	r3, [sp, #4]
 8009a10:	61a3      	str	r3, [r4, #24]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	bf14      	ite	ne
 8009a16:	2202      	movne	r2, #2
 8009a18:	2201      	moveq	r2, #1
 8009a1a:	6122      	str	r2, [r4, #16]
 8009a1c:	b1d5      	cbz	r5, 8009a54 <__d2b+0x98>
 8009a1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a22:	4405      	add	r5, r0
 8009a24:	f8c9 5000 	str.w	r5, [r9]
 8009a28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a2c:	f8c8 0000 	str.w	r0, [r8]
 8009a30:	4620      	mov	r0, r4
 8009a32:	b003      	add	sp, #12
 8009a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a3c:	e7d5      	b.n	80099ea <__d2b+0x2e>
 8009a3e:	6161      	str	r1, [r4, #20]
 8009a40:	e7e5      	b.n	8009a0e <__d2b+0x52>
 8009a42:	a801      	add	r0, sp, #4
 8009a44:	f7ff fcde 	bl	8009404 <__lo0bits>
 8009a48:	9b01      	ldr	r3, [sp, #4]
 8009a4a:	6163      	str	r3, [r4, #20]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	6122      	str	r2, [r4, #16]
 8009a50:	3020      	adds	r0, #32
 8009a52:	e7e3      	b.n	8009a1c <__d2b+0x60>
 8009a54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a5c:	f8c9 0000 	str.w	r0, [r9]
 8009a60:	6918      	ldr	r0, [r3, #16]
 8009a62:	f7ff fcaf 	bl	80093c4 <__hi0bits>
 8009a66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a6a:	e7df      	b.n	8009a2c <__d2b+0x70>
 8009a6c:	08013108 	.word	0x08013108
 8009a70:	080131f8 	.word	0x080131f8

08009a74 <__ratio>:
 8009a74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a78:	4688      	mov	r8, r1
 8009a7a:	4669      	mov	r1, sp
 8009a7c:	4681      	mov	r9, r0
 8009a7e:	f7ff ff4d 	bl	800991c <__b2d>
 8009a82:	a901      	add	r1, sp, #4
 8009a84:	4640      	mov	r0, r8
 8009a86:	ec55 4b10 	vmov	r4, r5, d0
 8009a8a:	f7ff ff47 	bl	800991c <__b2d>
 8009a8e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a92:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009a96:	eba3 0c02 	sub.w	ip, r3, r2
 8009a9a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009a9e:	1a9b      	subs	r3, r3, r2
 8009aa0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009aa4:	ec51 0b10 	vmov	r0, r1, d0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	bfd6      	itet	le
 8009aac:	460a      	movle	r2, r1
 8009aae:	462a      	movgt	r2, r5
 8009ab0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009ab4:	468b      	mov	fp, r1
 8009ab6:	462f      	mov	r7, r5
 8009ab8:	bfd4      	ite	le
 8009aba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009abe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	ee10 2a10 	vmov	r2, s0
 8009ac8:	465b      	mov	r3, fp
 8009aca:	4639      	mov	r1, r7
 8009acc:	f7f6 fede 	bl	800088c <__aeabi_ddiv>
 8009ad0:	ec41 0b10 	vmov	d0, r0, r1
 8009ad4:	b003      	add	sp, #12
 8009ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ada <__copybits>:
 8009ada:	3901      	subs	r1, #1
 8009adc:	b570      	push	{r4, r5, r6, lr}
 8009ade:	1149      	asrs	r1, r1, #5
 8009ae0:	6914      	ldr	r4, [r2, #16]
 8009ae2:	3101      	adds	r1, #1
 8009ae4:	f102 0314 	add.w	r3, r2, #20
 8009ae8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009aec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009af0:	1f05      	subs	r5, r0, #4
 8009af2:	42a3      	cmp	r3, r4
 8009af4:	d30c      	bcc.n	8009b10 <__copybits+0x36>
 8009af6:	1aa3      	subs	r3, r4, r2
 8009af8:	3b11      	subs	r3, #17
 8009afa:	f023 0303 	bic.w	r3, r3, #3
 8009afe:	3211      	adds	r2, #17
 8009b00:	42a2      	cmp	r2, r4
 8009b02:	bf88      	it	hi
 8009b04:	2300      	movhi	r3, #0
 8009b06:	4418      	add	r0, r3
 8009b08:	2300      	movs	r3, #0
 8009b0a:	4288      	cmp	r0, r1
 8009b0c:	d305      	bcc.n	8009b1a <__copybits+0x40>
 8009b0e:	bd70      	pop	{r4, r5, r6, pc}
 8009b10:	f853 6b04 	ldr.w	r6, [r3], #4
 8009b14:	f845 6f04 	str.w	r6, [r5, #4]!
 8009b18:	e7eb      	b.n	8009af2 <__copybits+0x18>
 8009b1a:	f840 3b04 	str.w	r3, [r0], #4
 8009b1e:	e7f4      	b.n	8009b0a <__copybits+0x30>

08009b20 <__any_on>:
 8009b20:	f100 0214 	add.w	r2, r0, #20
 8009b24:	6900      	ldr	r0, [r0, #16]
 8009b26:	114b      	asrs	r3, r1, #5
 8009b28:	4298      	cmp	r0, r3
 8009b2a:	b510      	push	{r4, lr}
 8009b2c:	db11      	blt.n	8009b52 <__any_on+0x32>
 8009b2e:	dd0a      	ble.n	8009b46 <__any_on+0x26>
 8009b30:	f011 011f 	ands.w	r1, r1, #31
 8009b34:	d007      	beq.n	8009b46 <__any_on+0x26>
 8009b36:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009b3a:	fa24 f001 	lsr.w	r0, r4, r1
 8009b3e:	fa00 f101 	lsl.w	r1, r0, r1
 8009b42:	428c      	cmp	r4, r1
 8009b44:	d10b      	bne.n	8009b5e <__any_on+0x3e>
 8009b46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d803      	bhi.n	8009b56 <__any_on+0x36>
 8009b4e:	2000      	movs	r0, #0
 8009b50:	bd10      	pop	{r4, pc}
 8009b52:	4603      	mov	r3, r0
 8009b54:	e7f7      	b.n	8009b46 <__any_on+0x26>
 8009b56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b5a:	2900      	cmp	r1, #0
 8009b5c:	d0f5      	beq.n	8009b4a <__any_on+0x2a>
 8009b5e:	2001      	movs	r0, #1
 8009b60:	e7f6      	b.n	8009b50 <__any_on+0x30>

08009b62 <_calloc_r>:
 8009b62:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b64:	fba1 2402 	umull	r2, r4, r1, r2
 8009b68:	b94c      	cbnz	r4, 8009b7e <_calloc_r+0x1c>
 8009b6a:	4611      	mov	r1, r2
 8009b6c:	9201      	str	r2, [sp, #4]
 8009b6e:	f000 f87b 	bl	8009c68 <_malloc_r>
 8009b72:	9a01      	ldr	r2, [sp, #4]
 8009b74:	4605      	mov	r5, r0
 8009b76:	b930      	cbnz	r0, 8009b86 <_calloc_r+0x24>
 8009b78:	4628      	mov	r0, r5
 8009b7a:	b003      	add	sp, #12
 8009b7c:	bd30      	pop	{r4, r5, pc}
 8009b7e:	220c      	movs	r2, #12
 8009b80:	6002      	str	r2, [r0, #0]
 8009b82:	2500      	movs	r5, #0
 8009b84:	e7f8      	b.n	8009b78 <_calloc_r+0x16>
 8009b86:	4621      	mov	r1, r4
 8009b88:	f7fc f854 	bl	8005c34 <memset>
 8009b8c:	e7f4      	b.n	8009b78 <_calloc_r+0x16>
	...

08009b90 <_free_r>:
 8009b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b92:	2900      	cmp	r1, #0
 8009b94:	d044      	beq.n	8009c20 <_free_r+0x90>
 8009b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b9a:	9001      	str	r0, [sp, #4]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f1a1 0404 	sub.w	r4, r1, #4
 8009ba2:	bfb8      	it	lt
 8009ba4:	18e4      	addlt	r4, r4, r3
 8009ba6:	f000 fca7 	bl	800a4f8 <__malloc_lock>
 8009baa:	4a1e      	ldr	r2, [pc, #120]	; (8009c24 <_free_r+0x94>)
 8009bac:	9801      	ldr	r0, [sp, #4]
 8009bae:	6813      	ldr	r3, [r2, #0]
 8009bb0:	b933      	cbnz	r3, 8009bc0 <_free_r+0x30>
 8009bb2:	6063      	str	r3, [r4, #4]
 8009bb4:	6014      	str	r4, [r2, #0]
 8009bb6:	b003      	add	sp, #12
 8009bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bbc:	f000 bca2 	b.w	800a504 <__malloc_unlock>
 8009bc0:	42a3      	cmp	r3, r4
 8009bc2:	d908      	bls.n	8009bd6 <_free_r+0x46>
 8009bc4:	6825      	ldr	r5, [r4, #0]
 8009bc6:	1961      	adds	r1, r4, r5
 8009bc8:	428b      	cmp	r3, r1
 8009bca:	bf01      	itttt	eq
 8009bcc:	6819      	ldreq	r1, [r3, #0]
 8009bce:	685b      	ldreq	r3, [r3, #4]
 8009bd0:	1949      	addeq	r1, r1, r5
 8009bd2:	6021      	streq	r1, [r4, #0]
 8009bd4:	e7ed      	b.n	8009bb2 <_free_r+0x22>
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	b10b      	cbz	r3, 8009be0 <_free_r+0x50>
 8009bdc:	42a3      	cmp	r3, r4
 8009bde:	d9fa      	bls.n	8009bd6 <_free_r+0x46>
 8009be0:	6811      	ldr	r1, [r2, #0]
 8009be2:	1855      	adds	r5, r2, r1
 8009be4:	42a5      	cmp	r5, r4
 8009be6:	d10b      	bne.n	8009c00 <_free_r+0x70>
 8009be8:	6824      	ldr	r4, [r4, #0]
 8009bea:	4421      	add	r1, r4
 8009bec:	1854      	adds	r4, r2, r1
 8009bee:	42a3      	cmp	r3, r4
 8009bf0:	6011      	str	r1, [r2, #0]
 8009bf2:	d1e0      	bne.n	8009bb6 <_free_r+0x26>
 8009bf4:	681c      	ldr	r4, [r3, #0]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	6053      	str	r3, [r2, #4]
 8009bfa:	4421      	add	r1, r4
 8009bfc:	6011      	str	r1, [r2, #0]
 8009bfe:	e7da      	b.n	8009bb6 <_free_r+0x26>
 8009c00:	d902      	bls.n	8009c08 <_free_r+0x78>
 8009c02:	230c      	movs	r3, #12
 8009c04:	6003      	str	r3, [r0, #0]
 8009c06:	e7d6      	b.n	8009bb6 <_free_r+0x26>
 8009c08:	6825      	ldr	r5, [r4, #0]
 8009c0a:	1961      	adds	r1, r4, r5
 8009c0c:	428b      	cmp	r3, r1
 8009c0e:	bf04      	itt	eq
 8009c10:	6819      	ldreq	r1, [r3, #0]
 8009c12:	685b      	ldreq	r3, [r3, #4]
 8009c14:	6063      	str	r3, [r4, #4]
 8009c16:	bf04      	itt	eq
 8009c18:	1949      	addeq	r1, r1, r5
 8009c1a:	6021      	streq	r1, [r4, #0]
 8009c1c:	6054      	str	r4, [r2, #4]
 8009c1e:	e7ca      	b.n	8009bb6 <_free_r+0x26>
 8009c20:	b003      	add	sp, #12
 8009c22:	bd30      	pop	{r4, r5, pc}
 8009c24:	200015d0 	.word	0x200015d0

08009c28 <sbrk_aligned>:
 8009c28:	b570      	push	{r4, r5, r6, lr}
 8009c2a:	4e0e      	ldr	r6, [pc, #56]	; (8009c64 <sbrk_aligned+0x3c>)
 8009c2c:	460c      	mov	r4, r1
 8009c2e:	6831      	ldr	r1, [r6, #0]
 8009c30:	4605      	mov	r5, r0
 8009c32:	b911      	cbnz	r1, 8009c3a <sbrk_aligned+0x12>
 8009c34:	f000 fb4c 	bl	800a2d0 <_sbrk_r>
 8009c38:	6030      	str	r0, [r6, #0]
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	f000 fb47 	bl	800a2d0 <_sbrk_r>
 8009c42:	1c43      	adds	r3, r0, #1
 8009c44:	d00a      	beq.n	8009c5c <sbrk_aligned+0x34>
 8009c46:	1cc4      	adds	r4, r0, #3
 8009c48:	f024 0403 	bic.w	r4, r4, #3
 8009c4c:	42a0      	cmp	r0, r4
 8009c4e:	d007      	beq.n	8009c60 <sbrk_aligned+0x38>
 8009c50:	1a21      	subs	r1, r4, r0
 8009c52:	4628      	mov	r0, r5
 8009c54:	f000 fb3c 	bl	800a2d0 <_sbrk_r>
 8009c58:	3001      	adds	r0, #1
 8009c5a:	d101      	bne.n	8009c60 <sbrk_aligned+0x38>
 8009c5c:	f04f 34ff 	mov.w	r4, #4294967295
 8009c60:	4620      	mov	r0, r4
 8009c62:	bd70      	pop	{r4, r5, r6, pc}
 8009c64:	200015d4 	.word	0x200015d4

08009c68 <_malloc_r>:
 8009c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c6c:	1ccd      	adds	r5, r1, #3
 8009c6e:	f025 0503 	bic.w	r5, r5, #3
 8009c72:	3508      	adds	r5, #8
 8009c74:	2d0c      	cmp	r5, #12
 8009c76:	bf38      	it	cc
 8009c78:	250c      	movcc	r5, #12
 8009c7a:	2d00      	cmp	r5, #0
 8009c7c:	4607      	mov	r7, r0
 8009c7e:	db01      	blt.n	8009c84 <_malloc_r+0x1c>
 8009c80:	42a9      	cmp	r1, r5
 8009c82:	d905      	bls.n	8009c90 <_malloc_r+0x28>
 8009c84:	230c      	movs	r3, #12
 8009c86:	603b      	str	r3, [r7, #0]
 8009c88:	2600      	movs	r6, #0
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c90:	4e2e      	ldr	r6, [pc, #184]	; (8009d4c <_malloc_r+0xe4>)
 8009c92:	f000 fc31 	bl	800a4f8 <__malloc_lock>
 8009c96:	6833      	ldr	r3, [r6, #0]
 8009c98:	461c      	mov	r4, r3
 8009c9a:	bb34      	cbnz	r4, 8009cea <_malloc_r+0x82>
 8009c9c:	4629      	mov	r1, r5
 8009c9e:	4638      	mov	r0, r7
 8009ca0:	f7ff ffc2 	bl	8009c28 <sbrk_aligned>
 8009ca4:	1c43      	adds	r3, r0, #1
 8009ca6:	4604      	mov	r4, r0
 8009ca8:	d14d      	bne.n	8009d46 <_malloc_r+0xde>
 8009caa:	6834      	ldr	r4, [r6, #0]
 8009cac:	4626      	mov	r6, r4
 8009cae:	2e00      	cmp	r6, #0
 8009cb0:	d140      	bne.n	8009d34 <_malloc_r+0xcc>
 8009cb2:	6823      	ldr	r3, [r4, #0]
 8009cb4:	4631      	mov	r1, r6
 8009cb6:	4638      	mov	r0, r7
 8009cb8:	eb04 0803 	add.w	r8, r4, r3
 8009cbc:	f000 fb08 	bl	800a2d0 <_sbrk_r>
 8009cc0:	4580      	cmp	r8, r0
 8009cc2:	d13a      	bne.n	8009d3a <_malloc_r+0xd2>
 8009cc4:	6821      	ldr	r1, [r4, #0]
 8009cc6:	3503      	adds	r5, #3
 8009cc8:	1a6d      	subs	r5, r5, r1
 8009cca:	f025 0503 	bic.w	r5, r5, #3
 8009cce:	3508      	adds	r5, #8
 8009cd0:	2d0c      	cmp	r5, #12
 8009cd2:	bf38      	it	cc
 8009cd4:	250c      	movcc	r5, #12
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	4638      	mov	r0, r7
 8009cda:	f7ff ffa5 	bl	8009c28 <sbrk_aligned>
 8009cde:	3001      	adds	r0, #1
 8009ce0:	d02b      	beq.n	8009d3a <_malloc_r+0xd2>
 8009ce2:	6823      	ldr	r3, [r4, #0]
 8009ce4:	442b      	add	r3, r5
 8009ce6:	6023      	str	r3, [r4, #0]
 8009ce8:	e00e      	b.n	8009d08 <_malloc_r+0xa0>
 8009cea:	6822      	ldr	r2, [r4, #0]
 8009cec:	1b52      	subs	r2, r2, r5
 8009cee:	d41e      	bmi.n	8009d2e <_malloc_r+0xc6>
 8009cf0:	2a0b      	cmp	r2, #11
 8009cf2:	d916      	bls.n	8009d22 <_malloc_r+0xba>
 8009cf4:	1961      	adds	r1, r4, r5
 8009cf6:	42a3      	cmp	r3, r4
 8009cf8:	6025      	str	r5, [r4, #0]
 8009cfa:	bf18      	it	ne
 8009cfc:	6059      	strne	r1, [r3, #4]
 8009cfe:	6863      	ldr	r3, [r4, #4]
 8009d00:	bf08      	it	eq
 8009d02:	6031      	streq	r1, [r6, #0]
 8009d04:	5162      	str	r2, [r4, r5]
 8009d06:	604b      	str	r3, [r1, #4]
 8009d08:	4638      	mov	r0, r7
 8009d0a:	f104 060b 	add.w	r6, r4, #11
 8009d0e:	f000 fbf9 	bl	800a504 <__malloc_unlock>
 8009d12:	f026 0607 	bic.w	r6, r6, #7
 8009d16:	1d23      	adds	r3, r4, #4
 8009d18:	1af2      	subs	r2, r6, r3
 8009d1a:	d0b6      	beq.n	8009c8a <_malloc_r+0x22>
 8009d1c:	1b9b      	subs	r3, r3, r6
 8009d1e:	50a3      	str	r3, [r4, r2]
 8009d20:	e7b3      	b.n	8009c8a <_malloc_r+0x22>
 8009d22:	6862      	ldr	r2, [r4, #4]
 8009d24:	42a3      	cmp	r3, r4
 8009d26:	bf0c      	ite	eq
 8009d28:	6032      	streq	r2, [r6, #0]
 8009d2a:	605a      	strne	r2, [r3, #4]
 8009d2c:	e7ec      	b.n	8009d08 <_malloc_r+0xa0>
 8009d2e:	4623      	mov	r3, r4
 8009d30:	6864      	ldr	r4, [r4, #4]
 8009d32:	e7b2      	b.n	8009c9a <_malloc_r+0x32>
 8009d34:	4634      	mov	r4, r6
 8009d36:	6876      	ldr	r6, [r6, #4]
 8009d38:	e7b9      	b.n	8009cae <_malloc_r+0x46>
 8009d3a:	230c      	movs	r3, #12
 8009d3c:	603b      	str	r3, [r7, #0]
 8009d3e:	4638      	mov	r0, r7
 8009d40:	f000 fbe0 	bl	800a504 <__malloc_unlock>
 8009d44:	e7a1      	b.n	8009c8a <_malloc_r+0x22>
 8009d46:	6025      	str	r5, [r4, #0]
 8009d48:	e7de      	b.n	8009d08 <_malloc_r+0xa0>
 8009d4a:	bf00      	nop
 8009d4c:	200015d0 	.word	0x200015d0

08009d50 <__ssputs_r>:
 8009d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d54:	688e      	ldr	r6, [r1, #8]
 8009d56:	429e      	cmp	r6, r3
 8009d58:	4682      	mov	sl, r0
 8009d5a:	460c      	mov	r4, r1
 8009d5c:	4690      	mov	r8, r2
 8009d5e:	461f      	mov	r7, r3
 8009d60:	d838      	bhi.n	8009dd4 <__ssputs_r+0x84>
 8009d62:	898a      	ldrh	r2, [r1, #12]
 8009d64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d68:	d032      	beq.n	8009dd0 <__ssputs_r+0x80>
 8009d6a:	6825      	ldr	r5, [r4, #0]
 8009d6c:	6909      	ldr	r1, [r1, #16]
 8009d6e:	eba5 0901 	sub.w	r9, r5, r1
 8009d72:	6965      	ldr	r5, [r4, #20]
 8009d74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	444b      	add	r3, r9
 8009d80:	106d      	asrs	r5, r5, #1
 8009d82:	429d      	cmp	r5, r3
 8009d84:	bf38      	it	cc
 8009d86:	461d      	movcc	r5, r3
 8009d88:	0553      	lsls	r3, r2, #21
 8009d8a:	d531      	bpl.n	8009df0 <__ssputs_r+0xa0>
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	f7ff ff6b 	bl	8009c68 <_malloc_r>
 8009d92:	4606      	mov	r6, r0
 8009d94:	b950      	cbnz	r0, 8009dac <__ssputs_r+0x5c>
 8009d96:	230c      	movs	r3, #12
 8009d98:	f8ca 3000 	str.w	r3, [sl]
 8009d9c:	89a3      	ldrh	r3, [r4, #12]
 8009d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009da2:	81a3      	strh	r3, [r4, #12]
 8009da4:	f04f 30ff 	mov.w	r0, #4294967295
 8009da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dac:	6921      	ldr	r1, [r4, #16]
 8009dae:	464a      	mov	r2, r9
 8009db0:	f7ff fa08 	bl	80091c4 <memcpy>
 8009db4:	89a3      	ldrh	r3, [r4, #12]
 8009db6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dbe:	81a3      	strh	r3, [r4, #12]
 8009dc0:	6126      	str	r6, [r4, #16]
 8009dc2:	6165      	str	r5, [r4, #20]
 8009dc4:	444e      	add	r6, r9
 8009dc6:	eba5 0509 	sub.w	r5, r5, r9
 8009dca:	6026      	str	r6, [r4, #0]
 8009dcc:	60a5      	str	r5, [r4, #8]
 8009dce:	463e      	mov	r6, r7
 8009dd0:	42be      	cmp	r6, r7
 8009dd2:	d900      	bls.n	8009dd6 <__ssputs_r+0x86>
 8009dd4:	463e      	mov	r6, r7
 8009dd6:	6820      	ldr	r0, [r4, #0]
 8009dd8:	4632      	mov	r2, r6
 8009dda:	4641      	mov	r1, r8
 8009ddc:	f000 fb72 	bl	800a4c4 <memmove>
 8009de0:	68a3      	ldr	r3, [r4, #8]
 8009de2:	1b9b      	subs	r3, r3, r6
 8009de4:	60a3      	str	r3, [r4, #8]
 8009de6:	6823      	ldr	r3, [r4, #0]
 8009de8:	4433      	add	r3, r6
 8009dea:	6023      	str	r3, [r4, #0]
 8009dec:	2000      	movs	r0, #0
 8009dee:	e7db      	b.n	8009da8 <__ssputs_r+0x58>
 8009df0:	462a      	mov	r2, r5
 8009df2:	f000 fb8d 	bl	800a510 <_realloc_r>
 8009df6:	4606      	mov	r6, r0
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	d1e1      	bne.n	8009dc0 <__ssputs_r+0x70>
 8009dfc:	6921      	ldr	r1, [r4, #16]
 8009dfe:	4650      	mov	r0, sl
 8009e00:	f7ff fec6 	bl	8009b90 <_free_r>
 8009e04:	e7c7      	b.n	8009d96 <__ssputs_r+0x46>
	...

08009e08 <_svfiprintf_r>:
 8009e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0c:	4698      	mov	r8, r3
 8009e0e:	898b      	ldrh	r3, [r1, #12]
 8009e10:	061b      	lsls	r3, r3, #24
 8009e12:	b09d      	sub	sp, #116	; 0x74
 8009e14:	4607      	mov	r7, r0
 8009e16:	460d      	mov	r5, r1
 8009e18:	4614      	mov	r4, r2
 8009e1a:	d50e      	bpl.n	8009e3a <_svfiprintf_r+0x32>
 8009e1c:	690b      	ldr	r3, [r1, #16]
 8009e1e:	b963      	cbnz	r3, 8009e3a <_svfiprintf_r+0x32>
 8009e20:	2140      	movs	r1, #64	; 0x40
 8009e22:	f7ff ff21 	bl	8009c68 <_malloc_r>
 8009e26:	6028      	str	r0, [r5, #0]
 8009e28:	6128      	str	r0, [r5, #16]
 8009e2a:	b920      	cbnz	r0, 8009e36 <_svfiprintf_r+0x2e>
 8009e2c:	230c      	movs	r3, #12
 8009e2e:	603b      	str	r3, [r7, #0]
 8009e30:	f04f 30ff 	mov.w	r0, #4294967295
 8009e34:	e0d1      	b.n	8009fda <_svfiprintf_r+0x1d2>
 8009e36:	2340      	movs	r3, #64	; 0x40
 8009e38:	616b      	str	r3, [r5, #20]
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e3e:	2320      	movs	r3, #32
 8009e40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e44:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e48:	2330      	movs	r3, #48	; 0x30
 8009e4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ff4 <_svfiprintf_r+0x1ec>
 8009e4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e52:	f04f 0901 	mov.w	r9, #1
 8009e56:	4623      	mov	r3, r4
 8009e58:	469a      	mov	sl, r3
 8009e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e5e:	b10a      	cbz	r2, 8009e64 <_svfiprintf_r+0x5c>
 8009e60:	2a25      	cmp	r2, #37	; 0x25
 8009e62:	d1f9      	bne.n	8009e58 <_svfiprintf_r+0x50>
 8009e64:	ebba 0b04 	subs.w	fp, sl, r4
 8009e68:	d00b      	beq.n	8009e82 <_svfiprintf_r+0x7a>
 8009e6a:	465b      	mov	r3, fp
 8009e6c:	4622      	mov	r2, r4
 8009e6e:	4629      	mov	r1, r5
 8009e70:	4638      	mov	r0, r7
 8009e72:	f7ff ff6d 	bl	8009d50 <__ssputs_r>
 8009e76:	3001      	adds	r0, #1
 8009e78:	f000 80aa 	beq.w	8009fd0 <_svfiprintf_r+0x1c8>
 8009e7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e7e:	445a      	add	r2, fp
 8009e80:	9209      	str	r2, [sp, #36]	; 0x24
 8009e82:	f89a 3000 	ldrb.w	r3, [sl]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f000 80a2 	beq.w	8009fd0 <_svfiprintf_r+0x1c8>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e96:	f10a 0a01 	add.w	sl, sl, #1
 8009e9a:	9304      	str	r3, [sp, #16]
 8009e9c:	9307      	str	r3, [sp, #28]
 8009e9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ea2:	931a      	str	r3, [sp, #104]	; 0x68
 8009ea4:	4654      	mov	r4, sl
 8009ea6:	2205      	movs	r2, #5
 8009ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eac:	4851      	ldr	r0, [pc, #324]	; (8009ff4 <_svfiprintf_r+0x1ec>)
 8009eae:	f7f6 f9b7 	bl	8000220 <memchr>
 8009eb2:	9a04      	ldr	r2, [sp, #16]
 8009eb4:	b9d8      	cbnz	r0, 8009eee <_svfiprintf_r+0xe6>
 8009eb6:	06d0      	lsls	r0, r2, #27
 8009eb8:	bf44      	itt	mi
 8009eba:	2320      	movmi	r3, #32
 8009ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ec0:	0711      	lsls	r1, r2, #28
 8009ec2:	bf44      	itt	mi
 8009ec4:	232b      	movmi	r3, #43	; 0x2b
 8009ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009eca:	f89a 3000 	ldrb.w	r3, [sl]
 8009ece:	2b2a      	cmp	r3, #42	; 0x2a
 8009ed0:	d015      	beq.n	8009efe <_svfiprintf_r+0xf6>
 8009ed2:	9a07      	ldr	r2, [sp, #28]
 8009ed4:	4654      	mov	r4, sl
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	f04f 0c0a 	mov.w	ip, #10
 8009edc:	4621      	mov	r1, r4
 8009ede:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ee2:	3b30      	subs	r3, #48	; 0x30
 8009ee4:	2b09      	cmp	r3, #9
 8009ee6:	d94e      	bls.n	8009f86 <_svfiprintf_r+0x17e>
 8009ee8:	b1b0      	cbz	r0, 8009f18 <_svfiprintf_r+0x110>
 8009eea:	9207      	str	r2, [sp, #28]
 8009eec:	e014      	b.n	8009f18 <_svfiprintf_r+0x110>
 8009eee:	eba0 0308 	sub.w	r3, r0, r8
 8009ef2:	fa09 f303 	lsl.w	r3, r9, r3
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	9304      	str	r3, [sp, #16]
 8009efa:	46a2      	mov	sl, r4
 8009efc:	e7d2      	b.n	8009ea4 <_svfiprintf_r+0x9c>
 8009efe:	9b03      	ldr	r3, [sp, #12]
 8009f00:	1d19      	adds	r1, r3, #4
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	9103      	str	r1, [sp, #12]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	bfbb      	ittet	lt
 8009f0a:	425b      	neglt	r3, r3
 8009f0c:	f042 0202 	orrlt.w	r2, r2, #2
 8009f10:	9307      	strge	r3, [sp, #28]
 8009f12:	9307      	strlt	r3, [sp, #28]
 8009f14:	bfb8      	it	lt
 8009f16:	9204      	strlt	r2, [sp, #16]
 8009f18:	7823      	ldrb	r3, [r4, #0]
 8009f1a:	2b2e      	cmp	r3, #46	; 0x2e
 8009f1c:	d10c      	bne.n	8009f38 <_svfiprintf_r+0x130>
 8009f1e:	7863      	ldrb	r3, [r4, #1]
 8009f20:	2b2a      	cmp	r3, #42	; 0x2a
 8009f22:	d135      	bne.n	8009f90 <_svfiprintf_r+0x188>
 8009f24:	9b03      	ldr	r3, [sp, #12]
 8009f26:	1d1a      	adds	r2, r3, #4
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	9203      	str	r2, [sp, #12]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	bfb8      	it	lt
 8009f30:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f34:	3402      	adds	r4, #2
 8009f36:	9305      	str	r3, [sp, #20]
 8009f38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a004 <_svfiprintf_r+0x1fc>
 8009f3c:	7821      	ldrb	r1, [r4, #0]
 8009f3e:	2203      	movs	r2, #3
 8009f40:	4650      	mov	r0, sl
 8009f42:	f7f6 f96d 	bl	8000220 <memchr>
 8009f46:	b140      	cbz	r0, 8009f5a <_svfiprintf_r+0x152>
 8009f48:	2340      	movs	r3, #64	; 0x40
 8009f4a:	eba0 000a 	sub.w	r0, r0, sl
 8009f4e:	fa03 f000 	lsl.w	r0, r3, r0
 8009f52:	9b04      	ldr	r3, [sp, #16]
 8009f54:	4303      	orrs	r3, r0
 8009f56:	3401      	adds	r4, #1
 8009f58:	9304      	str	r3, [sp, #16]
 8009f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f5e:	4826      	ldr	r0, [pc, #152]	; (8009ff8 <_svfiprintf_r+0x1f0>)
 8009f60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f64:	2206      	movs	r2, #6
 8009f66:	f7f6 f95b 	bl	8000220 <memchr>
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	d038      	beq.n	8009fe0 <_svfiprintf_r+0x1d8>
 8009f6e:	4b23      	ldr	r3, [pc, #140]	; (8009ffc <_svfiprintf_r+0x1f4>)
 8009f70:	bb1b      	cbnz	r3, 8009fba <_svfiprintf_r+0x1b2>
 8009f72:	9b03      	ldr	r3, [sp, #12]
 8009f74:	3307      	adds	r3, #7
 8009f76:	f023 0307 	bic.w	r3, r3, #7
 8009f7a:	3308      	adds	r3, #8
 8009f7c:	9303      	str	r3, [sp, #12]
 8009f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f80:	4433      	add	r3, r6
 8009f82:	9309      	str	r3, [sp, #36]	; 0x24
 8009f84:	e767      	b.n	8009e56 <_svfiprintf_r+0x4e>
 8009f86:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f8a:	460c      	mov	r4, r1
 8009f8c:	2001      	movs	r0, #1
 8009f8e:	e7a5      	b.n	8009edc <_svfiprintf_r+0xd4>
 8009f90:	2300      	movs	r3, #0
 8009f92:	3401      	adds	r4, #1
 8009f94:	9305      	str	r3, [sp, #20]
 8009f96:	4619      	mov	r1, r3
 8009f98:	f04f 0c0a 	mov.w	ip, #10
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fa2:	3a30      	subs	r2, #48	; 0x30
 8009fa4:	2a09      	cmp	r2, #9
 8009fa6:	d903      	bls.n	8009fb0 <_svfiprintf_r+0x1a8>
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d0c5      	beq.n	8009f38 <_svfiprintf_r+0x130>
 8009fac:	9105      	str	r1, [sp, #20]
 8009fae:	e7c3      	b.n	8009f38 <_svfiprintf_r+0x130>
 8009fb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e7f0      	b.n	8009f9c <_svfiprintf_r+0x194>
 8009fba:	ab03      	add	r3, sp, #12
 8009fbc:	9300      	str	r3, [sp, #0]
 8009fbe:	462a      	mov	r2, r5
 8009fc0:	4b0f      	ldr	r3, [pc, #60]	; (800a000 <_svfiprintf_r+0x1f8>)
 8009fc2:	a904      	add	r1, sp, #16
 8009fc4:	4638      	mov	r0, r7
 8009fc6:	f7fb fedd 	bl	8005d84 <_printf_float>
 8009fca:	1c42      	adds	r2, r0, #1
 8009fcc:	4606      	mov	r6, r0
 8009fce:	d1d6      	bne.n	8009f7e <_svfiprintf_r+0x176>
 8009fd0:	89ab      	ldrh	r3, [r5, #12]
 8009fd2:	065b      	lsls	r3, r3, #25
 8009fd4:	f53f af2c 	bmi.w	8009e30 <_svfiprintf_r+0x28>
 8009fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fda:	b01d      	add	sp, #116	; 0x74
 8009fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fe0:	ab03      	add	r3, sp, #12
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	462a      	mov	r2, r5
 8009fe6:	4b06      	ldr	r3, [pc, #24]	; (800a000 <_svfiprintf_r+0x1f8>)
 8009fe8:	a904      	add	r1, sp, #16
 8009fea:	4638      	mov	r0, r7
 8009fec:	f7fc f96e 	bl	80062cc <_printf_i>
 8009ff0:	e7eb      	b.n	8009fca <_svfiprintf_r+0x1c2>
 8009ff2:	bf00      	nop
 8009ff4:	08013354 	.word	0x08013354
 8009ff8:	0801335e 	.word	0x0801335e
 8009ffc:	08005d85 	.word	0x08005d85
 800a000:	08009d51 	.word	0x08009d51
 800a004:	0801335a 	.word	0x0801335a

0800a008 <__sfputc_r>:
 800a008:	6893      	ldr	r3, [r2, #8]
 800a00a:	3b01      	subs	r3, #1
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	b410      	push	{r4}
 800a010:	6093      	str	r3, [r2, #8]
 800a012:	da08      	bge.n	800a026 <__sfputc_r+0x1e>
 800a014:	6994      	ldr	r4, [r2, #24]
 800a016:	42a3      	cmp	r3, r4
 800a018:	db01      	blt.n	800a01e <__sfputc_r+0x16>
 800a01a:	290a      	cmp	r1, #10
 800a01c:	d103      	bne.n	800a026 <__sfputc_r+0x1e>
 800a01e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a022:	f7fd bbe9 	b.w	80077f8 <__swbuf_r>
 800a026:	6813      	ldr	r3, [r2, #0]
 800a028:	1c58      	adds	r0, r3, #1
 800a02a:	6010      	str	r0, [r2, #0]
 800a02c:	7019      	strb	r1, [r3, #0]
 800a02e:	4608      	mov	r0, r1
 800a030:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a034:	4770      	bx	lr

0800a036 <__sfputs_r>:
 800a036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a038:	4606      	mov	r6, r0
 800a03a:	460f      	mov	r7, r1
 800a03c:	4614      	mov	r4, r2
 800a03e:	18d5      	adds	r5, r2, r3
 800a040:	42ac      	cmp	r4, r5
 800a042:	d101      	bne.n	800a048 <__sfputs_r+0x12>
 800a044:	2000      	movs	r0, #0
 800a046:	e007      	b.n	800a058 <__sfputs_r+0x22>
 800a048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a04c:	463a      	mov	r2, r7
 800a04e:	4630      	mov	r0, r6
 800a050:	f7ff ffda 	bl	800a008 <__sfputc_r>
 800a054:	1c43      	adds	r3, r0, #1
 800a056:	d1f3      	bne.n	800a040 <__sfputs_r+0xa>
 800a058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a05c <_vfiprintf_r>:
 800a05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a060:	460d      	mov	r5, r1
 800a062:	b09d      	sub	sp, #116	; 0x74
 800a064:	4614      	mov	r4, r2
 800a066:	4698      	mov	r8, r3
 800a068:	4606      	mov	r6, r0
 800a06a:	b118      	cbz	r0, 800a074 <_vfiprintf_r+0x18>
 800a06c:	6983      	ldr	r3, [r0, #24]
 800a06e:	b90b      	cbnz	r3, 800a074 <_vfiprintf_r+0x18>
 800a070:	f7fe fc16 	bl	80088a0 <__sinit>
 800a074:	4b89      	ldr	r3, [pc, #548]	; (800a29c <_vfiprintf_r+0x240>)
 800a076:	429d      	cmp	r5, r3
 800a078:	d11b      	bne.n	800a0b2 <_vfiprintf_r+0x56>
 800a07a:	6875      	ldr	r5, [r6, #4]
 800a07c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a07e:	07d9      	lsls	r1, r3, #31
 800a080:	d405      	bmi.n	800a08e <_vfiprintf_r+0x32>
 800a082:	89ab      	ldrh	r3, [r5, #12]
 800a084:	059a      	lsls	r2, r3, #22
 800a086:	d402      	bmi.n	800a08e <_vfiprintf_r+0x32>
 800a088:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a08a:	f7ff f81a 	bl	80090c2 <__retarget_lock_acquire_recursive>
 800a08e:	89ab      	ldrh	r3, [r5, #12]
 800a090:	071b      	lsls	r3, r3, #28
 800a092:	d501      	bpl.n	800a098 <_vfiprintf_r+0x3c>
 800a094:	692b      	ldr	r3, [r5, #16]
 800a096:	b9eb      	cbnz	r3, 800a0d4 <_vfiprintf_r+0x78>
 800a098:	4629      	mov	r1, r5
 800a09a:	4630      	mov	r0, r6
 800a09c:	f7fd fbfe 	bl	800789c <__swsetup_r>
 800a0a0:	b1c0      	cbz	r0, 800a0d4 <_vfiprintf_r+0x78>
 800a0a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0a4:	07dc      	lsls	r4, r3, #31
 800a0a6:	d50e      	bpl.n	800a0c6 <_vfiprintf_r+0x6a>
 800a0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ac:	b01d      	add	sp, #116	; 0x74
 800a0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b2:	4b7b      	ldr	r3, [pc, #492]	; (800a2a0 <_vfiprintf_r+0x244>)
 800a0b4:	429d      	cmp	r5, r3
 800a0b6:	d101      	bne.n	800a0bc <_vfiprintf_r+0x60>
 800a0b8:	68b5      	ldr	r5, [r6, #8]
 800a0ba:	e7df      	b.n	800a07c <_vfiprintf_r+0x20>
 800a0bc:	4b79      	ldr	r3, [pc, #484]	; (800a2a4 <_vfiprintf_r+0x248>)
 800a0be:	429d      	cmp	r5, r3
 800a0c0:	bf08      	it	eq
 800a0c2:	68f5      	ldreq	r5, [r6, #12]
 800a0c4:	e7da      	b.n	800a07c <_vfiprintf_r+0x20>
 800a0c6:	89ab      	ldrh	r3, [r5, #12]
 800a0c8:	0598      	lsls	r0, r3, #22
 800a0ca:	d4ed      	bmi.n	800a0a8 <_vfiprintf_r+0x4c>
 800a0cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0ce:	f7fe fff9 	bl	80090c4 <__retarget_lock_release_recursive>
 800a0d2:	e7e9      	b.n	800a0a8 <_vfiprintf_r+0x4c>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a0d8:	2320      	movs	r3, #32
 800a0da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0de:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0e2:	2330      	movs	r3, #48	; 0x30
 800a0e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a2a8 <_vfiprintf_r+0x24c>
 800a0e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0ec:	f04f 0901 	mov.w	r9, #1
 800a0f0:	4623      	mov	r3, r4
 800a0f2:	469a      	mov	sl, r3
 800a0f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0f8:	b10a      	cbz	r2, 800a0fe <_vfiprintf_r+0xa2>
 800a0fa:	2a25      	cmp	r2, #37	; 0x25
 800a0fc:	d1f9      	bne.n	800a0f2 <_vfiprintf_r+0x96>
 800a0fe:	ebba 0b04 	subs.w	fp, sl, r4
 800a102:	d00b      	beq.n	800a11c <_vfiprintf_r+0xc0>
 800a104:	465b      	mov	r3, fp
 800a106:	4622      	mov	r2, r4
 800a108:	4629      	mov	r1, r5
 800a10a:	4630      	mov	r0, r6
 800a10c:	f7ff ff93 	bl	800a036 <__sfputs_r>
 800a110:	3001      	adds	r0, #1
 800a112:	f000 80aa 	beq.w	800a26a <_vfiprintf_r+0x20e>
 800a116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a118:	445a      	add	r2, fp
 800a11a:	9209      	str	r2, [sp, #36]	; 0x24
 800a11c:	f89a 3000 	ldrb.w	r3, [sl]
 800a120:	2b00      	cmp	r3, #0
 800a122:	f000 80a2 	beq.w	800a26a <_vfiprintf_r+0x20e>
 800a126:	2300      	movs	r3, #0
 800a128:	f04f 32ff 	mov.w	r2, #4294967295
 800a12c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a130:	f10a 0a01 	add.w	sl, sl, #1
 800a134:	9304      	str	r3, [sp, #16]
 800a136:	9307      	str	r3, [sp, #28]
 800a138:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a13c:	931a      	str	r3, [sp, #104]	; 0x68
 800a13e:	4654      	mov	r4, sl
 800a140:	2205      	movs	r2, #5
 800a142:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a146:	4858      	ldr	r0, [pc, #352]	; (800a2a8 <_vfiprintf_r+0x24c>)
 800a148:	f7f6 f86a 	bl	8000220 <memchr>
 800a14c:	9a04      	ldr	r2, [sp, #16]
 800a14e:	b9d8      	cbnz	r0, 800a188 <_vfiprintf_r+0x12c>
 800a150:	06d1      	lsls	r1, r2, #27
 800a152:	bf44      	itt	mi
 800a154:	2320      	movmi	r3, #32
 800a156:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a15a:	0713      	lsls	r3, r2, #28
 800a15c:	bf44      	itt	mi
 800a15e:	232b      	movmi	r3, #43	; 0x2b
 800a160:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a164:	f89a 3000 	ldrb.w	r3, [sl]
 800a168:	2b2a      	cmp	r3, #42	; 0x2a
 800a16a:	d015      	beq.n	800a198 <_vfiprintf_r+0x13c>
 800a16c:	9a07      	ldr	r2, [sp, #28]
 800a16e:	4654      	mov	r4, sl
 800a170:	2000      	movs	r0, #0
 800a172:	f04f 0c0a 	mov.w	ip, #10
 800a176:	4621      	mov	r1, r4
 800a178:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a17c:	3b30      	subs	r3, #48	; 0x30
 800a17e:	2b09      	cmp	r3, #9
 800a180:	d94e      	bls.n	800a220 <_vfiprintf_r+0x1c4>
 800a182:	b1b0      	cbz	r0, 800a1b2 <_vfiprintf_r+0x156>
 800a184:	9207      	str	r2, [sp, #28]
 800a186:	e014      	b.n	800a1b2 <_vfiprintf_r+0x156>
 800a188:	eba0 0308 	sub.w	r3, r0, r8
 800a18c:	fa09 f303 	lsl.w	r3, r9, r3
 800a190:	4313      	orrs	r3, r2
 800a192:	9304      	str	r3, [sp, #16]
 800a194:	46a2      	mov	sl, r4
 800a196:	e7d2      	b.n	800a13e <_vfiprintf_r+0xe2>
 800a198:	9b03      	ldr	r3, [sp, #12]
 800a19a:	1d19      	adds	r1, r3, #4
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	9103      	str	r1, [sp, #12]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	bfbb      	ittet	lt
 800a1a4:	425b      	neglt	r3, r3
 800a1a6:	f042 0202 	orrlt.w	r2, r2, #2
 800a1aa:	9307      	strge	r3, [sp, #28]
 800a1ac:	9307      	strlt	r3, [sp, #28]
 800a1ae:	bfb8      	it	lt
 800a1b0:	9204      	strlt	r2, [sp, #16]
 800a1b2:	7823      	ldrb	r3, [r4, #0]
 800a1b4:	2b2e      	cmp	r3, #46	; 0x2e
 800a1b6:	d10c      	bne.n	800a1d2 <_vfiprintf_r+0x176>
 800a1b8:	7863      	ldrb	r3, [r4, #1]
 800a1ba:	2b2a      	cmp	r3, #42	; 0x2a
 800a1bc:	d135      	bne.n	800a22a <_vfiprintf_r+0x1ce>
 800a1be:	9b03      	ldr	r3, [sp, #12]
 800a1c0:	1d1a      	adds	r2, r3, #4
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	9203      	str	r2, [sp, #12]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	bfb8      	it	lt
 800a1ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1ce:	3402      	adds	r4, #2
 800a1d0:	9305      	str	r3, [sp, #20]
 800a1d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a2b8 <_vfiprintf_r+0x25c>
 800a1d6:	7821      	ldrb	r1, [r4, #0]
 800a1d8:	2203      	movs	r2, #3
 800a1da:	4650      	mov	r0, sl
 800a1dc:	f7f6 f820 	bl	8000220 <memchr>
 800a1e0:	b140      	cbz	r0, 800a1f4 <_vfiprintf_r+0x198>
 800a1e2:	2340      	movs	r3, #64	; 0x40
 800a1e4:	eba0 000a 	sub.w	r0, r0, sl
 800a1e8:	fa03 f000 	lsl.w	r0, r3, r0
 800a1ec:	9b04      	ldr	r3, [sp, #16]
 800a1ee:	4303      	orrs	r3, r0
 800a1f0:	3401      	adds	r4, #1
 800a1f2:	9304      	str	r3, [sp, #16]
 800a1f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1f8:	482c      	ldr	r0, [pc, #176]	; (800a2ac <_vfiprintf_r+0x250>)
 800a1fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1fe:	2206      	movs	r2, #6
 800a200:	f7f6 f80e 	bl	8000220 <memchr>
 800a204:	2800      	cmp	r0, #0
 800a206:	d03f      	beq.n	800a288 <_vfiprintf_r+0x22c>
 800a208:	4b29      	ldr	r3, [pc, #164]	; (800a2b0 <_vfiprintf_r+0x254>)
 800a20a:	bb1b      	cbnz	r3, 800a254 <_vfiprintf_r+0x1f8>
 800a20c:	9b03      	ldr	r3, [sp, #12]
 800a20e:	3307      	adds	r3, #7
 800a210:	f023 0307 	bic.w	r3, r3, #7
 800a214:	3308      	adds	r3, #8
 800a216:	9303      	str	r3, [sp, #12]
 800a218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a21a:	443b      	add	r3, r7
 800a21c:	9309      	str	r3, [sp, #36]	; 0x24
 800a21e:	e767      	b.n	800a0f0 <_vfiprintf_r+0x94>
 800a220:	fb0c 3202 	mla	r2, ip, r2, r3
 800a224:	460c      	mov	r4, r1
 800a226:	2001      	movs	r0, #1
 800a228:	e7a5      	b.n	800a176 <_vfiprintf_r+0x11a>
 800a22a:	2300      	movs	r3, #0
 800a22c:	3401      	adds	r4, #1
 800a22e:	9305      	str	r3, [sp, #20]
 800a230:	4619      	mov	r1, r3
 800a232:	f04f 0c0a 	mov.w	ip, #10
 800a236:	4620      	mov	r0, r4
 800a238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a23c:	3a30      	subs	r2, #48	; 0x30
 800a23e:	2a09      	cmp	r2, #9
 800a240:	d903      	bls.n	800a24a <_vfiprintf_r+0x1ee>
 800a242:	2b00      	cmp	r3, #0
 800a244:	d0c5      	beq.n	800a1d2 <_vfiprintf_r+0x176>
 800a246:	9105      	str	r1, [sp, #20]
 800a248:	e7c3      	b.n	800a1d2 <_vfiprintf_r+0x176>
 800a24a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a24e:	4604      	mov	r4, r0
 800a250:	2301      	movs	r3, #1
 800a252:	e7f0      	b.n	800a236 <_vfiprintf_r+0x1da>
 800a254:	ab03      	add	r3, sp, #12
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	462a      	mov	r2, r5
 800a25a:	4b16      	ldr	r3, [pc, #88]	; (800a2b4 <_vfiprintf_r+0x258>)
 800a25c:	a904      	add	r1, sp, #16
 800a25e:	4630      	mov	r0, r6
 800a260:	f7fb fd90 	bl	8005d84 <_printf_float>
 800a264:	4607      	mov	r7, r0
 800a266:	1c78      	adds	r0, r7, #1
 800a268:	d1d6      	bne.n	800a218 <_vfiprintf_r+0x1bc>
 800a26a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a26c:	07d9      	lsls	r1, r3, #31
 800a26e:	d405      	bmi.n	800a27c <_vfiprintf_r+0x220>
 800a270:	89ab      	ldrh	r3, [r5, #12]
 800a272:	059a      	lsls	r2, r3, #22
 800a274:	d402      	bmi.n	800a27c <_vfiprintf_r+0x220>
 800a276:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a278:	f7fe ff24 	bl	80090c4 <__retarget_lock_release_recursive>
 800a27c:	89ab      	ldrh	r3, [r5, #12]
 800a27e:	065b      	lsls	r3, r3, #25
 800a280:	f53f af12 	bmi.w	800a0a8 <_vfiprintf_r+0x4c>
 800a284:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a286:	e711      	b.n	800a0ac <_vfiprintf_r+0x50>
 800a288:	ab03      	add	r3, sp, #12
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	462a      	mov	r2, r5
 800a28e:	4b09      	ldr	r3, [pc, #36]	; (800a2b4 <_vfiprintf_r+0x258>)
 800a290:	a904      	add	r1, sp, #16
 800a292:	4630      	mov	r0, r6
 800a294:	f7fc f81a 	bl	80062cc <_printf_i>
 800a298:	e7e4      	b.n	800a264 <_vfiprintf_r+0x208>
 800a29a:	bf00      	nop
 800a29c:	0801313c 	.word	0x0801313c
 800a2a0:	0801315c 	.word	0x0801315c
 800a2a4:	0801311c 	.word	0x0801311c
 800a2a8:	08013354 	.word	0x08013354
 800a2ac:	0801335e 	.word	0x0801335e
 800a2b0:	08005d85 	.word	0x08005d85
 800a2b4:	0800a037 	.word	0x0800a037
 800a2b8:	0801335a 	.word	0x0801335a
 800a2bc:	00000000 	.word	0x00000000

0800a2c0 <nan>:
 800a2c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a2c8 <nan+0x8>
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	00000000 	.word	0x00000000
 800a2cc:	7ff80000 	.word	0x7ff80000

0800a2d0 <_sbrk_r>:
 800a2d0:	b538      	push	{r3, r4, r5, lr}
 800a2d2:	4d06      	ldr	r5, [pc, #24]	; (800a2ec <_sbrk_r+0x1c>)
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	4608      	mov	r0, r1
 800a2da:	602b      	str	r3, [r5, #0]
 800a2dc:	f7f7 fc6e 	bl	8001bbc <_sbrk>
 800a2e0:	1c43      	adds	r3, r0, #1
 800a2e2:	d102      	bne.n	800a2ea <_sbrk_r+0x1a>
 800a2e4:	682b      	ldr	r3, [r5, #0]
 800a2e6:	b103      	cbz	r3, 800a2ea <_sbrk_r+0x1a>
 800a2e8:	6023      	str	r3, [r4, #0]
 800a2ea:	bd38      	pop	{r3, r4, r5, pc}
 800a2ec:	200015d8 	.word	0x200015d8

0800a2f0 <__sread>:
 800a2f0:	b510      	push	{r4, lr}
 800a2f2:	460c      	mov	r4, r1
 800a2f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2f8:	f000 f93a 	bl	800a570 <_read_r>
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	bfab      	itete	ge
 800a300:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a302:	89a3      	ldrhlt	r3, [r4, #12]
 800a304:	181b      	addge	r3, r3, r0
 800a306:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a30a:	bfac      	ite	ge
 800a30c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a30e:	81a3      	strhlt	r3, [r4, #12]
 800a310:	bd10      	pop	{r4, pc}

0800a312 <__swrite>:
 800a312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a316:	461f      	mov	r7, r3
 800a318:	898b      	ldrh	r3, [r1, #12]
 800a31a:	05db      	lsls	r3, r3, #23
 800a31c:	4605      	mov	r5, r0
 800a31e:	460c      	mov	r4, r1
 800a320:	4616      	mov	r6, r2
 800a322:	d505      	bpl.n	800a330 <__swrite+0x1e>
 800a324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a328:	2302      	movs	r3, #2
 800a32a:	2200      	movs	r2, #0
 800a32c:	f000 f8b8 	bl	800a4a0 <_lseek_r>
 800a330:	89a3      	ldrh	r3, [r4, #12]
 800a332:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a336:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a33a:	81a3      	strh	r3, [r4, #12]
 800a33c:	4632      	mov	r2, r6
 800a33e:	463b      	mov	r3, r7
 800a340:	4628      	mov	r0, r5
 800a342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a346:	f000 b837 	b.w	800a3b8 <_write_r>

0800a34a <__sseek>:
 800a34a:	b510      	push	{r4, lr}
 800a34c:	460c      	mov	r4, r1
 800a34e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a352:	f000 f8a5 	bl	800a4a0 <_lseek_r>
 800a356:	1c43      	adds	r3, r0, #1
 800a358:	89a3      	ldrh	r3, [r4, #12]
 800a35a:	bf15      	itete	ne
 800a35c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a35e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a362:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a366:	81a3      	strheq	r3, [r4, #12]
 800a368:	bf18      	it	ne
 800a36a:	81a3      	strhne	r3, [r4, #12]
 800a36c:	bd10      	pop	{r4, pc}

0800a36e <__sclose>:
 800a36e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a372:	f000 b851 	b.w	800a418 <_close_r>

0800a376 <strncmp>:
 800a376:	b510      	push	{r4, lr}
 800a378:	b17a      	cbz	r2, 800a39a <strncmp+0x24>
 800a37a:	4603      	mov	r3, r0
 800a37c:	3901      	subs	r1, #1
 800a37e:	1884      	adds	r4, r0, r2
 800a380:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a384:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a388:	4290      	cmp	r0, r2
 800a38a:	d101      	bne.n	800a390 <strncmp+0x1a>
 800a38c:	42a3      	cmp	r3, r4
 800a38e:	d101      	bne.n	800a394 <strncmp+0x1e>
 800a390:	1a80      	subs	r0, r0, r2
 800a392:	bd10      	pop	{r4, pc}
 800a394:	2800      	cmp	r0, #0
 800a396:	d1f3      	bne.n	800a380 <strncmp+0xa>
 800a398:	e7fa      	b.n	800a390 <strncmp+0x1a>
 800a39a:	4610      	mov	r0, r2
 800a39c:	e7f9      	b.n	800a392 <strncmp+0x1c>

0800a39e <__ascii_wctomb>:
 800a39e:	b149      	cbz	r1, 800a3b4 <__ascii_wctomb+0x16>
 800a3a0:	2aff      	cmp	r2, #255	; 0xff
 800a3a2:	bf85      	ittet	hi
 800a3a4:	238a      	movhi	r3, #138	; 0x8a
 800a3a6:	6003      	strhi	r3, [r0, #0]
 800a3a8:	700a      	strbls	r2, [r1, #0]
 800a3aa:	f04f 30ff 	movhi.w	r0, #4294967295
 800a3ae:	bf98      	it	ls
 800a3b0:	2001      	movls	r0, #1
 800a3b2:	4770      	bx	lr
 800a3b4:	4608      	mov	r0, r1
 800a3b6:	4770      	bx	lr

0800a3b8 <_write_r>:
 800a3b8:	b538      	push	{r3, r4, r5, lr}
 800a3ba:	4d07      	ldr	r5, [pc, #28]	; (800a3d8 <_write_r+0x20>)
 800a3bc:	4604      	mov	r4, r0
 800a3be:	4608      	mov	r0, r1
 800a3c0:	4611      	mov	r1, r2
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	602a      	str	r2, [r5, #0]
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	f7f7 fba7 	bl	8001b1a <_write>
 800a3cc:	1c43      	adds	r3, r0, #1
 800a3ce:	d102      	bne.n	800a3d6 <_write_r+0x1e>
 800a3d0:	682b      	ldr	r3, [r5, #0]
 800a3d2:	b103      	cbz	r3, 800a3d6 <_write_r+0x1e>
 800a3d4:	6023      	str	r3, [r4, #0]
 800a3d6:	bd38      	pop	{r3, r4, r5, pc}
 800a3d8:	200015d8 	.word	0x200015d8

0800a3dc <__assert_func>:
 800a3dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3de:	4614      	mov	r4, r2
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	4b09      	ldr	r3, [pc, #36]	; (800a408 <__assert_func+0x2c>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4605      	mov	r5, r0
 800a3e8:	68d8      	ldr	r0, [r3, #12]
 800a3ea:	b14c      	cbz	r4, 800a400 <__assert_func+0x24>
 800a3ec:	4b07      	ldr	r3, [pc, #28]	; (800a40c <__assert_func+0x30>)
 800a3ee:	9100      	str	r1, [sp, #0]
 800a3f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a3f4:	4906      	ldr	r1, [pc, #24]	; (800a410 <__assert_func+0x34>)
 800a3f6:	462b      	mov	r3, r5
 800a3f8:	f000 f81e 	bl	800a438 <fiprintf>
 800a3fc:	f000 f8ca 	bl	800a594 <abort>
 800a400:	4b04      	ldr	r3, [pc, #16]	; (800a414 <__assert_func+0x38>)
 800a402:	461c      	mov	r4, r3
 800a404:	e7f3      	b.n	800a3ee <__assert_func+0x12>
 800a406:	bf00      	nop
 800a408:	2000041c 	.word	0x2000041c
 800a40c:	08013365 	.word	0x08013365
 800a410:	08013372 	.word	0x08013372
 800a414:	080133a0 	.word	0x080133a0

0800a418 <_close_r>:
 800a418:	b538      	push	{r3, r4, r5, lr}
 800a41a:	4d06      	ldr	r5, [pc, #24]	; (800a434 <_close_r+0x1c>)
 800a41c:	2300      	movs	r3, #0
 800a41e:	4604      	mov	r4, r0
 800a420:	4608      	mov	r0, r1
 800a422:	602b      	str	r3, [r5, #0]
 800a424:	f7f7 fb95 	bl	8001b52 <_close>
 800a428:	1c43      	adds	r3, r0, #1
 800a42a:	d102      	bne.n	800a432 <_close_r+0x1a>
 800a42c:	682b      	ldr	r3, [r5, #0]
 800a42e:	b103      	cbz	r3, 800a432 <_close_r+0x1a>
 800a430:	6023      	str	r3, [r4, #0]
 800a432:	bd38      	pop	{r3, r4, r5, pc}
 800a434:	200015d8 	.word	0x200015d8

0800a438 <fiprintf>:
 800a438:	b40e      	push	{r1, r2, r3}
 800a43a:	b503      	push	{r0, r1, lr}
 800a43c:	4601      	mov	r1, r0
 800a43e:	ab03      	add	r3, sp, #12
 800a440:	4805      	ldr	r0, [pc, #20]	; (800a458 <fiprintf+0x20>)
 800a442:	f853 2b04 	ldr.w	r2, [r3], #4
 800a446:	6800      	ldr	r0, [r0, #0]
 800a448:	9301      	str	r3, [sp, #4]
 800a44a:	f7ff fe07 	bl	800a05c <_vfiprintf_r>
 800a44e:	b002      	add	sp, #8
 800a450:	f85d eb04 	ldr.w	lr, [sp], #4
 800a454:	b003      	add	sp, #12
 800a456:	4770      	bx	lr
 800a458:	2000041c 	.word	0x2000041c

0800a45c <_fstat_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4d07      	ldr	r5, [pc, #28]	; (800a47c <_fstat_r+0x20>)
 800a460:	2300      	movs	r3, #0
 800a462:	4604      	mov	r4, r0
 800a464:	4608      	mov	r0, r1
 800a466:	4611      	mov	r1, r2
 800a468:	602b      	str	r3, [r5, #0]
 800a46a:	f7f7 fb7e 	bl	8001b6a <_fstat>
 800a46e:	1c43      	adds	r3, r0, #1
 800a470:	d102      	bne.n	800a478 <_fstat_r+0x1c>
 800a472:	682b      	ldr	r3, [r5, #0]
 800a474:	b103      	cbz	r3, 800a478 <_fstat_r+0x1c>
 800a476:	6023      	str	r3, [r4, #0]
 800a478:	bd38      	pop	{r3, r4, r5, pc}
 800a47a:	bf00      	nop
 800a47c:	200015d8 	.word	0x200015d8

0800a480 <_isatty_r>:
 800a480:	b538      	push	{r3, r4, r5, lr}
 800a482:	4d06      	ldr	r5, [pc, #24]	; (800a49c <_isatty_r+0x1c>)
 800a484:	2300      	movs	r3, #0
 800a486:	4604      	mov	r4, r0
 800a488:	4608      	mov	r0, r1
 800a48a:	602b      	str	r3, [r5, #0]
 800a48c:	f7f7 fb7d 	bl	8001b8a <_isatty>
 800a490:	1c43      	adds	r3, r0, #1
 800a492:	d102      	bne.n	800a49a <_isatty_r+0x1a>
 800a494:	682b      	ldr	r3, [r5, #0]
 800a496:	b103      	cbz	r3, 800a49a <_isatty_r+0x1a>
 800a498:	6023      	str	r3, [r4, #0]
 800a49a:	bd38      	pop	{r3, r4, r5, pc}
 800a49c:	200015d8 	.word	0x200015d8

0800a4a0 <_lseek_r>:
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	4d07      	ldr	r5, [pc, #28]	; (800a4c0 <_lseek_r+0x20>)
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	4608      	mov	r0, r1
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	602a      	str	r2, [r5, #0]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	f7f7 fb76 	bl	8001ba0 <_lseek>
 800a4b4:	1c43      	adds	r3, r0, #1
 800a4b6:	d102      	bne.n	800a4be <_lseek_r+0x1e>
 800a4b8:	682b      	ldr	r3, [r5, #0]
 800a4ba:	b103      	cbz	r3, 800a4be <_lseek_r+0x1e>
 800a4bc:	6023      	str	r3, [r4, #0]
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	200015d8 	.word	0x200015d8

0800a4c4 <memmove>:
 800a4c4:	4288      	cmp	r0, r1
 800a4c6:	b510      	push	{r4, lr}
 800a4c8:	eb01 0402 	add.w	r4, r1, r2
 800a4cc:	d902      	bls.n	800a4d4 <memmove+0x10>
 800a4ce:	4284      	cmp	r4, r0
 800a4d0:	4623      	mov	r3, r4
 800a4d2:	d807      	bhi.n	800a4e4 <memmove+0x20>
 800a4d4:	1e43      	subs	r3, r0, #1
 800a4d6:	42a1      	cmp	r1, r4
 800a4d8:	d008      	beq.n	800a4ec <memmove+0x28>
 800a4da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4e2:	e7f8      	b.n	800a4d6 <memmove+0x12>
 800a4e4:	4402      	add	r2, r0
 800a4e6:	4601      	mov	r1, r0
 800a4e8:	428a      	cmp	r2, r1
 800a4ea:	d100      	bne.n	800a4ee <memmove+0x2a>
 800a4ec:	bd10      	pop	{r4, pc}
 800a4ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a4f6:	e7f7      	b.n	800a4e8 <memmove+0x24>

0800a4f8 <__malloc_lock>:
 800a4f8:	4801      	ldr	r0, [pc, #4]	; (800a500 <__malloc_lock+0x8>)
 800a4fa:	f7fe bde2 	b.w	80090c2 <__retarget_lock_acquire_recursive>
 800a4fe:	bf00      	nop
 800a500:	200015cc 	.word	0x200015cc

0800a504 <__malloc_unlock>:
 800a504:	4801      	ldr	r0, [pc, #4]	; (800a50c <__malloc_unlock+0x8>)
 800a506:	f7fe bddd 	b.w	80090c4 <__retarget_lock_release_recursive>
 800a50a:	bf00      	nop
 800a50c:	200015cc 	.word	0x200015cc

0800a510 <_realloc_r>:
 800a510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a514:	4680      	mov	r8, r0
 800a516:	4614      	mov	r4, r2
 800a518:	460e      	mov	r6, r1
 800a51a:	b921      	cbnz	r1, 800a526 <_realloc_r+0x16>
 800a51c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a520:	4611      	mov	r1, r2
 800a522:	f7ff bba1 	b.w	8009c68 <_malloc_r>
 800a526:	b92a      	cbnz	r2, 800a534 <_realloc_r+0x24>
 800a528:	f7ff fb32 	bl	8009b90 <_free_r>
 800a52c:	4625      	mov	r5, r4
 800a52e:	4628      	mov	r0, r5
 800a530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a534:	f000 f835 	bl	800a5a2 <_malloc_usable_size_r>
 800a538:	4284      	cmp	r4, r0
 800a53a:	4607      	mov	r7, r0
 800a53c:	d802      	bhi.n	800a544 <_realloc_r+0x34>
 800a53e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a542:	d812      	bhi.n	800a56a <_realloc_r+0x5a>
 800a544:	4621      	mov	r1, r4
 800a546:	4640      	mov	r0, r8
 800a548:	f7ff fb8e 	bl	8009c68 <_malloc_r>
 800a54c:	4605      	mov	r5, r0
 800a54e:	2800      	cmp	r0, #0
 800a550:	d0ed      	beq.n	800a52e <_realloc_r+0x1e>
 800a552:	42bc      	cmp	r4, r7
 800a554:	4622      	mov	r2, r4
 800a556:	4631      	mov	r1, r6
 800a558:	bf28      	it	cs
 800a55a:	463a      	movcs	r2, r7
 800a55c:	f7fe fe32 	bl	80091c4 <memcpy>
 800a560:	4631      	mov	r1, r6
 800a562:	4640      	mov	r0, r8
 800a564:	f7ff fb14 	bl	8009b90 <_free_r>
 800a568:	e7e1      	b.n	800a52e <_realloc_r+0x1e>
 800a56a:	4635      	mov	r5, r6
 800a56c:	e7df      	b.n	800a52e <_realloc_r+0x1e>
	...

0800a570 <_read_r>:
 800a570:	b538      	push	{r3, r4, r5, lr}
 800a572:	4d07      	ldr	r5, [pc, #28]	; (800a590 <_read_r+0x20>)
 800a574:	4604      	mov	r4, r0
 800a576:	4608      	mov	r0, r1
 800a578:	4611      	mov	r1, r2
 800a57a:	2200      	movs	r2, #0
 800a57c:	602a      	str	r2, [r5, #0]
 800a57e:	461a      	mov	r2, r3
 800a580:	f7f7 faae 	bl	8001ae0 <_read>
 800a584:	1c43      	adds	r3, r0, #1
 800a586:	d102      	bne.n	800a58e <_read_r+0x1e>
 800a588:	682b      	ldr	r3, [r5, #0]
 800a58a:	b103      	cbz	r3, 800a58e <_read_r+0x1e>
 800a58c:	6023      	str	r3, [r4, #0]
 800a58e:	bd38      	pop	{r3, r4, r5, pc}
 800a590:	200015d8 	.word	0x200015d8

0800a594 <abort>:
 800a594:	b508      	push	{r3, lr}
 800a596:	2006      	movs	r0, #6
 800a598:	f000 f834 	bl	800a604 <raise>
 800a59c:	2001      	movs	r0, #1
 800a59e:	f7f7 fa95 	bl	8001acc <_exit>

0800a5a2 <_malloc_usable_size_r>:
 800a5a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5a6:	1f18      	subs	r0, r3, #4
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	bfbc      	itt	lt
 800a5ac:	580b      	ldrlt	r3, [r1, r0]
 800a5ae:	18c0      	addlt	r0, r0, r3
 800a5b0:	4770      	bx	lr

0800a5b2 <_raise_r>:
 800a5b2:	291f      	cmp	r1, #31
 800a5b4:	b538      	push	{r3, r4, r5, lr}
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	460d      	mov	r5, r1
 800a5ba:	d904      	bls.n	800a5c6 <_raise_r+0x14>
 800a5bc:	2316      	movs	r3, #22
 800a5be:	6003      	str	r3, [r0, #0]
 800a5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c4:	bd38      	pop	{r3, r4, r5, pc}
 800a5c6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a5c8:	b112      	cbz	r2, 800a5d0 <_raise_r+0x1e>
 800a5ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5ce:	b94b      	cbnz	r3, 800a5e4 <_raise_r+0x32>
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f000 f831 	bl	800a638 <_getpid_r>
 800a5d6:	462a      	mov	r2, r5
 800a5d8:	4601      	mov	r1, r0
 800a5da:	4620      	mov	r0, r4
 800a5dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5e0:	f000 b818 	b.w	800a614 <_kill_r>
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d00a      	beq.n	800a5fe <_raise_r+0x4c>
 800a5e8:	1c59      	adds	r1, r3, #1
 800a5ea:	d103      	bne.n	800a5f4 <_raise_r+0x42>
 800a5ec:	2316      	movs	r3, #22
 800a5ee:	6003      	str	r3, [r0, #0]
 800a5f0:	2001      	movs	r0, #1
 800a5f2:	e7e7      	b.n	800a5c4 <_raise_r+0x12>
 800a5f4:	2400      	movs	r4, #0
 800a5f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	4798      	blx	r3
 800a5fe:	2000      	movs	r0, #0
 800a600:	e7e0      	b.n	800a5c4 <_raise_r+0x12>
	...

0800a604 <raise>:
 800a604:	4b02      	ldr	r3, [pc, #8]	; (800a610 <raise+0xc>)
 800a606:	4601      	mov	r1, r0
 800a608:	6818      	ldr	r0, [r3, #0]
 800a60a:	f7ff bfd2 	b.w	800a5b2 <_raise_r>
 800a60e:	bf00      	nop
 800a610:	2000041c 	.word	0x2000041c

0800a614 <_kill_r>:
 800a614:	b538      	push	{r3, r4, r5, lr}
 800a616:	4d07      	ldr	r5, [pc, #28]	; (800a634 <_kill_r+0x20>)
 800a618:	2300      	movs	r3, #0
 800a61a:	4604      	mov	r4, r0
 800a61c:	4608      	mov	r0, r1
 800a61e:	4611      	mov	r1, r2
 800a620:	602b      	str	r3, [r5, #0]
 800a622:	f7f7 fa43 	bl	8001aac <_kill>
 800a626:	1c43      	adds	r3, r0, #1
 800a628:	d102      	bne.n	800a630 <_kill_r+0x1c>
 800a62a:	682b      	ldr	r3, [r5, #0]
 800a62c:	b103      	cbz	r3, 800a630 <_kill_r+0x1c>
 800a62e:	6023      	str	r3, [r4, #0]
 800a630:	bd38      	pop	{r3, r4, r5, pc}
 800a632:	bf00      	nop
 800a634:	200015d8 	.word	0x200015d8

0800a638 <_getpid_r>:
 800a638:	f7f7 ba30 	b.w	8001a9c <_getpid>

0800a63c <sqrtf>:
 800a63c:	b508      	push	{r3, lr}
 800a63e:	ed2d 8b02 	vpush	{d8}
 800a642:	eeb0 8a40 	vmov.f32	s16, s0
 800a646:	f000 f817 	bl	800a678 <__ieee754_sqrtf>
 800a64a:	eeb4 8a48 	vcmp.f32	s16, s16
 800a64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a652:	d60c      	bvs.n	800a66e <sqrtf+0x32>
 800a654:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a674 <sqrtf+0x38>
 800a658:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a65c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a660:	d505      	bpl.n	800a66e <sqrtf+0x32>
 800a662:	f7fb fabd 	bl	8005be0 <__errno>
 800a666:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a66a:	2321      	movs	r3, #33	; 0x21
 800a66c:	6003      	str	r3, [r0, #0]
 800a66e:	ecbd 8b02 	vpop	{d8}
 800a672:	bd08      	pop	{r3, pc}
 800a674:	00000000 	.word	0x00000000

0800a678 <__ieee754_sqrtf>:
 800a678:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a67c:	4770      	bx	lr
	...

0800a680 <_init>:
 800a680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a682:	bf00      	nop
 800a684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a686:	bc08      	pop	{r3}
 800a688:	469e      	mov	lr, r3
 800a68a:	4770      	bx	lr

0800a68c <_fini>:
 800a68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68e:	bf00      	nop
 800a690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a692:	bc08      	pop	{r3}
 800a694:	469e      	mov	lr, r3
 800a696:	4770      	bx	lr
